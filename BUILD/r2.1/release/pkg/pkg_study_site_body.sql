create or replace PACKAGE BODY pkg_study_site AS


 PROCEDURE SP_STUDY_SITE(
    P_USERID            IN NUMBER,
    P_INCLUDEINACTIVE   IN VARCHAR2,
    P_STUDYID           IN INTEGER,
	P_COUNTRYIDS        IN NUM_ARRAY,
	P_SITEIDS           IN NUM_ARRAY,
    P_OFFSET            IN NUMBER,
    P_LIMIT             IN NUMBER,
    P_ORDRBY            IN VARCHAR2,
    P_SORTBY            IN VARCHAR2,
    CUR_STUDYSITELIST   OUT SYS_REFCURSOR,
    P_COUNT 			OUT NUMBER
 )
 AS
  V_MSG 				VARCHAR2(32767 CHAR);
  V_STATIC_SQL_PART     VARCHAR2(32767 CHAR);
  V_FROM_CLAUSE  		VARCHAR2(32767 CHAR);
  V_JOIN_CLAUSE  		VARCHAR2(32767 CHAR);
  V_STATIC_JOIN_CLAUSE  VARCHAR2(32767 CHAR);
  V_DYNMC_WHERE_CLAUSE  VARCHAR2(32767 CHAR);
  V_ISACTIVE_CLAUSE  	VARCHAR2(32767 CHAR);
  V_COUNTRY_CLAUSE  	VARCHAR2(32767 CHAR);
  V_SITE_CLAUSE  		VARCHAR2(32767 CHAR);
  V_COUNT_QUERY			VARCHAR2(32767 CHAR);
  V_ORDERBY_CLAUSE  	VARCHAR2(9999 CHAR);
  V_FINAL_QUERY         VARCHAR2(32767 CHAR);
  V_COUNTRY_IDS       	VARCHAR2(32767 CHAR);
  V_SITE_IDS       	VARCHAR2(32767 CHAR);
  V_COUNT_START         VARCHAR2(32767 CHAR);
  V_SORT_BY				VARCHAR2(500 CHAR);
  V_ORDER_BY			VARCHAR2(500 CHAR);
  V_QUERY_START 		VARCHAR2(32767 CHAR);
  V_QUERY_END 			VARCHAR2(32767 CHAR);
  V_COUNT				NUMBER;
  V_RECORD_COUNT		NUMBER;
  V_STARTINDEX          NUMBER;
  V_ENDINDEX		    NUMBER;


  BEGIN
  V_RECORD_COUNT := 0;
  V_COUNT := 0;

  V_STARTINDEX := P_OFFSET + 1;
  IF P_OFFSET = 0 THEN
	V_STARTINDEX := P_OFFSET;
  END IF;
  V_ENDINDEX := P_LIMIT + P_OFFSET;

  V_QUERY_START := 'SELECT * FROM (SELECT ROWNUM RNUM , TEMP.* FROM ( ';
  V_QUERY_END := ') TEMP WHERE ROWNUM <= ' || TO_CHAR(V_ENDINDEX) ||' ) WHERE RNUM >= '|| TO_CHAR(V_STARTINDEX);

   V_STATIC_SQL_PART	:=	'SELECT DISTINCT SITE.SITEID, SITE.STUDYID, SITE.PRINCIPALFACILITYID, SITE.PIID, SITE.TRANSCELERATESITEID, SITE.SITENAME,
							SITE.ISAFFILIATED, SITE.CLOSUREDT, SITE.INSTITUTIONNAME, SITE.CONTACTID, SITE.ISACTIVE, SITE.CREATEDBY,
							SITE.CREATEDDT, TRIM((select pkg_encrypt.fn_decrypt(USERPROF.LASTNAME)  || '','' || pkg_encrypt.fn_decrypt(USERPROF.FIRSTNAME) || '' '' || (CASE WHEN USERPROF.MIDDLENAME IS NOT NULL THEN pkg_encrypt.fn_decrypt(USERPROF.MIDDLENAME) ELSE '''' END) FROM TBL_USERPROFILES USERPROF WHERE USERPROF.TRANSCELERATEUSERID = SITE.MODIFIEDBY)) MODIFIEDBY, 
							SITE.MODIFIEDDT, SITE.CTMSITENUM, SITE.ORGID, SITE.PLANNEDENDDATE,
							UP.USERID, UP.TRANSCELERATEUSERID, pkg_encrypt.fn_decrypt(UP.FIRSTNAME) AS FIRSTNAME, pkg_encrypt.fn_decrypt(UP.MIDDLENAME) AS MIDDLENAME, pkg_encrypt.fn_decrypt(UP.LASTNAME) AS LASTNAME, FACILITY.FACILITYID,
							FACILITY.FACILITYNAME, FACILITY.ISDEPARTMENT, FACILITY.DEPARTMENTNAME, FACILITY.DEPARTMENTTYPEID, FACILITY.FACILITYFORDEPT,
							FACILITY.ISACTIVE FACACTIVE, FACILITY.CREATEDBY FACCREATEDBY, FACILITY.CREATEDDT FACCREATEDDATE,
							DEPTYPE.DEPARTMENTTYPENAME, CONTACT.CONTACTID CONTID, CONTACT.CONTACTENTITY, CONTACT.CONTACTTYPE,
							CONTACT.REGIONCD, CONTACT.ADDRESSTYPE, pkg_encrypt.fn_decrypt(CONTACT.ADDRESS1) AS ADDRESS1, pkg_encrypt.fn_decrypt(CONTACT.ADDRESS2) AS ADDRESS2, pkg_encrypt.fn_decrypt(CONTACT.ADDRESS3) AS ADDRESS3, CONTACT.CITY,
							CONTACT.STATE, CONTACT.COUNTRYCD, pkg_encrypt.fn_decrypt(CONTACT.POSTALCODE) AS POSTALCODE, pkg_encrypt.fn_decrypt(CONTACT.TELECOMADDRESS) AS TELECOMADDRESS, pkg_encrypt.fn_decrypt(CONTACT.PHONE1) AS PHONE1,
							pkg_encrypt.fn_decrypt(CONTACT.PHONE1EXT) AS PHONE1EXT, pkg_encrypt.fn_decrypt(CONTACT.PHONE2) AS PHONE2, pkg_encrypt.fn_decrypt(CONTACT.PHONE2EXT) AS PHONE2EXT, pkg_encrypt.fn_decrypt(CONTACT.ASSISTANTPHONE) AS ASSISTANTPHONE, pkg_encrypt.fn_decrypt(CONTACT.PAGER) AS PAGER, pkg_encrypt.fn_decrypt(CONTACT.FAX) AS FAX,
							pkg_encrypt.fn_decrypt(CONTACT.EMAIL) AS EMAIL, CONTACT.ISACTIVE ACTIVEFLG, CONTACT.CREATEDBY CONTCREATEDBY, CONTACT.CREATEDDT CONTCREATEDDT,
							CONTACT.MODIFIEDBY CONTMODIFIEDBY, CONTACT.MODIFIEDDT CONTMODIFIEDDT, COUNTRY.COUNTRYNAME , SITE.DOCEXSITEID, 
							site.Safety_Notification_Startdate SAFETYNOTSTARTDT,  
							site.Safety_Notification_Enddate SAFETYNOTENDDT, site.Sipreadonlydate SIPREADONLYDT,
							TRIM(pkg_encrypt.fn_decrypt(UP.LASTNAME)  || '','' || pkg_encrypt.fn_decrypt(UP.FIRSTNAME) || '' '' || (CASE WHEN UP.MIDDLENAME IS NOT NULL THEN pkg_encrypt.fn_decrypt(UP.MIDDLENAME) ELSE '''' END)) PINAME,
							(CASE WHEN SITE.ISACTIVE = ''N'' THEN ''CLOSED'' ELSE ''ACTIVE'' END) SITESTATUS ';

  V_STATIC_JOIN_CLAUSE := ' JOIN TBL_CONTACT CONTACT ON SITE.CONTACTID = CONTACT.CONTACTID
							LEFT JOIN TBL_COUNTRIES COUNTRY ON COUNTRY.COUNTRYCD = CONTACT.COUNTRYCD
							LEFT JOIN TBL_FACILITIES FACILITY ON SITE.PRINCIPALFACILITYID = FACILITY.FACILITYID
							LEFT JOIN TBL_USERPROFILES UP ON SITE.PIID = UP.USERID
							LEFT JOIN TBL_DEPARTMENTTYPE DEPTYPE ON  FACILITY.DEPARTMENTTYPEID = DEPTYPE.DEPARTMENTTYPEID ';

  V_DYNMC_WHERE_CLAUSE := ' WHERE ';

  IF P_INCLUDEINACTIVE IS NULL THEN
    V_ISACTIVE_CLAUSE := ' SITE.ISACTIVE = ''N'' AND ';
  ELSIF P_INCLUDEINACTIVE IS NOT NULL AND P_INCLUDEINACTIVE = 'N' THEN
	V_ISACTIVE_CLAUSE := ' SITE.ISACTIVE = ''Y'' AND ';  
  ELSE
	V_ISACTIVE_CLAUSE := '';
  END IF;

  V_COUNTRY_CLAUSE := '';
  IF P_COUNTRYIDS IS NOT NULL AND P_COUNTRYIDS.COUNT > 0 THEN
	FOR i IN 1..P_COUNTRYIDS.COUNT
	LOOP
		EXIT WHEN P_COUNTRYIDS(i) = -1;
		IF i = 1 THEN
			V_COUNTRY_IDS := P_COUNTRYIDS(i);
		ELSE
			V_COUNTRY_IDS := V_COUNTRY_IDS || ',' || P_COUNTRYIDS(i);
		END IF;
    END LOOP;
	V_COUNTRY_CLAUSE := ' COUNTRY.COUNTRYID IN (' || V_COUNTRY_IDS || ') AND ';
  END IF;
  
  V_SITE_CLAUSE := '';
  IF P_SITEIDS IS NOT NULL AND P_SITEIDS.COUNT > 0 THEN
	FOR i IN 1..P_SITEIDS.COUNT
	LOOP
		EXIT WHEN P_SITEIDS(i) = -1;
		IF i = 1 THEN
			V_SITE_IDS := P_SITEIDS(i);
		ELSE
			V_SITE_IDS := V_SITE_IDS || ',' || P_SITEIDS(i);
		END IF;
    END LOOP;
	V_SITE_CLAUSE := ' SITE.SITEID IN (' || V_SITE_IDS || ') AND ';
  END IF;

  IF P_ORDRBY IS NULL THEN
	V_ORDER_BY := 'ASC ';
  ELSE
	V_ORDER_BY := P_ORDRBY;
  END IF;

  IF P_SORTBY IS NULL THEN
	V_SORT_BY := ' UPPER(TRIM(SITE.SITENAME)) ';
  ELSIF P_SORTBY = 'SITEID' THEN
	V_SORT_BY := ' SITE.SITEID ';
  ELSIF P_SORTBY = 'STUDYID' THEN
	V_SORT_BY := ' SITE.STUDYID ';
  ELSIF P_SORTBY = 'PRINCIPALFACILITYID' THEN
	V_SORT_BY := ' SITE.PRINCIPALFACILITYID ';
  ELSIF P_SORTBY = 'PIID' THEN
	V_SORT_BY := ' SITE.PIID ';
  ELSIF P_SORTBY = 'TRANSCELERATESITEID' THEN
	V_SORT_BY := ' SITE.TRANSCELERATESITEID ';
  ELSIF P_SORTBY = 'SITENAME' THEN
	V_SORT_BY := ' UPPER(TRIM(SITE.SITENAME)) ';
  ELSIF P_SORTBY = 'CLOSUREDT' THEN
	V_SORT_BY := ' SITE.CLOSUREDT ';
  ELSIF P_SORTBY = 'INSTITUTIONNAME' THEN
	V_SORT_BY := ' UPPER(TRIM(SITE.INSTITUTIONNAME)) ';
  ELSIF P_SORTBY = 'CREATEDBY' THEN
	V_SORT_BY := ' UPPER(TRIM(SITE.CREATEDBY)) ';
  ELSIF P_SORTBY = 'CREATEDDT' THEN
	V_SORT_BY := ' SITE.CREATEDDT ';
  ELSIF P_SORTBY = 'ORGID' THEN
	V_SORT_BY := ' SITE.ORGID ';
  ELSIF P_SORTBY = 'PLANNEDENDDATE' THEN
	V_SORT_BY := ' SITE.PLANNEDENDDATE ';
  ELSIF P_SORTBY = 'FIRSTNAME' THEN
	V_SORT_BY := ' UPPER(pkg_encrypt.fn_decrypt(UP.FIRSTNAME)) ';
  ELSIF P_SORTBY = 'MIDDLENAME' THEN
	V_SORT_BY := ' UPPER(pkg_encrypt.fn_decrypt(UP.MIDDLENAME)) ';
  ELSIF P_SORTBY = 'LASTNAME' THEN
	V_SORT_BY := ' UPPER(pkg_encrypt.fn_decrypt(UP.LASTNAME)) ';
  ELSIF P_SORTBY = 'TRANSCELERATEUSERID' THEN
	V_SORT_BY := ' UP.TRANSCELERATEUSERID ';
  ELSIF P_SORTBY = 'FACILITYID' THEN
	V_SORT_BY := ' FACILITY.FACILITYID ';
  ELSIF P_SORTBY = 'FACILITYNAME' THEN
	V_SORT_BY := ' FACILITY.FACILITYNAME ';
  ELSIF P_SORTBY = 'DEPARTMENTNAME' THEN
	V_SORT_BY := ' FACILITY.DEPARTMENTNAME ';
  ELSIF P_SORTBY = 'CITY' THEN
	V_SORT_BY := ' CONTACT.CITY ';
  ELSIF P_SORTBY = 'STATE' THEN
	V_SORT_BY := ' CONTACT.STATE ';
  ELSIF P_SORTBY = 'COUNTRYCD' THEN
	V_SORT_BY := ' CONTACT.COUNTRYCD ';
  ELSIF P_SORTBY = 'COUNTRYNAME' THEN
	V_SORT_BY := ' COUNTRY.COUNTRYNAME ';
  ELSIF P_SORTBY = 'ACTIVE' THEN
	V_SORT_BY := ' SITE.ISACTIVE ';
  ELSIF P_SORTBY = 'PINAME' THEN
  V_SORT_BY := ' UPPER(PINAME) ';
  ELSIF P_SORTBY = 'MODIFIEDBY' THEN
  V_SORT_BY := ' UPPER(MODIFIEDBY) ';
  ELSIF P_SORTBY = 'MODIFIEDDT' THEN
	V_SORT_BY := ' SITE.MODIFIEDDT ';
  ELSIF P_SORTBY = 'SAFETYNOTSTARTDT' THEN
	V_SORT_BY := ' SAFETYNOTSTARTDT ';
  ELSIF P_SORTBY = 'SAFETYNOTENDDT' THEN
	V_SORT_BY := ' SAFETYNOTENDDT ';
  ELSIF P_SORTBY = 'SIPREADONLYDT' THEN
	V_SORT_BY := ' SAFETYNOTENDDT ';
  ELSIF P_SORTBY = 'SITESTATUS' THEN
	V_SORT_BY := ' SITESTATUS ';
  ELSE
	--V_SORT_BY := ' UPPER(TRIM(SITE.SITENAME)) ';
	V_SORT_BY := ' SITESTATUS, COUNTRY.COUNTRYNAME, UPPER(TRIM(PINAME)), UPPER(TRIM(SITE.SITENAME))  ';
  END IF;

  V_ORDERBY_CLAUSE  := ' ORDER BY ' || V_SORT_BY || V_ORDER_BY;

  IF P_STUDYID > 0 THEN	--FIRST IF
	--Fetching the records for 'Type II and Type III' users...
		SELECT COUNT(*) INTO V_COUNT
		FROM TBL_USERROLEMAP URM
		JOIN TBL_ROLES ROLES ON URM.ROLEID = ROLES.ROLEID
		JOIN TBL_ROLETYPE ROLETYPE ON ROLETYPE.ROLETYPEID = ROLES.ROLETYPEID
		WHERE URM.USERID = P_USERID
		AND ROLETYPE.ROLETYPE IN ('Type II', 'Type III')
		AND (URM.EFFECTIVEENDDATE IS NULL OR
		TO_DATE(TO_CHAR(URM.EFFECTIVEENDDATE, 'MM/DD/YYYY HH24:MI:SS'), 'MM/DD/YYYY HH24:MI:SS') >=
		TO_DATE(TO_CHAR(CURRENT_TIMESTAMP, 'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS'));

		--DBMS_OUTPUT.PUT_LINE('V_COUNT for Type II, Type III users : '|| V_COUNT);

		IF V_COUNT > 0 THEN	--SECOND IF
			V_FROM_CLAUSE 		:= 'FROM TBL_SITE SITE  ';

			V_JOIN_CLAUSE := V_STATIC_JOIN_CLAUSE;

			V_DYNMC_WHERE_CLAUSE	:= ' WHERE ' || V_ISACTIVE_CLAUSE || V_COUNTRY_CLAUSE || V_SITE_CLAUSE || ' SITE.STUDYID = ' || P_STUDYID;

			V_FINAL_QUERY := V_STATIC_SQL_PART || V_FROM_CLAUSE || V_JOIN_CLAUSE || V_DYNMC_WHERE_CLAUSE || V_ORDERBY_CLAUSE;
			V_COUNT_QUERY := 'SELECT COUNT(1) FROM (' || V_FINAL_QUERY || ')';
			--DBMS_OUTPUT.PUT_LINE('V_COUNT_QUERY for Type II and Type III users : '|| V_COUNT_QUERY);

			EXECUTE IMMEDIATE V_COUNT_QUERY INTO V_RECORD_COUNT;
		END IF;	--SECOND IF

		--DBMS_OUTPUT.PUT_LINE('V_RECORD_COUNT for Type II and Type III users : '|| V_RECORD_COUNT);

	--Fetching the records for 'CRO Training Course Assigner' users...
		IF V_RECORD_COUNT = 0 THEN	--THIRD IF
			SELECT COUNT(*) INTO V_COUNT
			FROM TBL_USERROLEMAP URM
			JOIN TBL_ROLES ROLES ON URM.ROLEID = ROLES.ROLEID
			WHERE URM.STUDYID = P_STUDYID AND URM.USERID = P_USERID
			AND (URM.EFFECTIVEENDDATE IS NULL OR URM.EFFECTIVEENDDATE >= CURRENT_TIMESTAMP)
			AND ROLES.ROLENAME IN ('CRO Training Course Assigner');

			--DBMS_OUTPUT.PUT_LINE('V_COUNT for CRO Training Course Assigner users : '|| V_COUNT);
			IF V_COUNT > 0 THEN	--FOURTH IF
				V_FROM_CLAUSE := 'FROM TBL_USERROLEMAP URM ';

				V_JOIN_CLAUSE := ' JOIN TBL_SITE SITE ON URM.STUDYID = SITE.STUDYID
								   LEFT JOIN TBL_STUDY STUDY ON URM.STUDYID = STUDY.STUDYID '
								   || V_STATIC_JOIN_CLAUSE;

				V_DYNMC_WHERE_CLAUSE := ' WHERE ' || V_ISACTIVE_CLAUSE || V_COUNTRY_CLAUSE || V_SITE_CLAUSE ||' URM.USERID = '|| P_USERID
											|| ' AND URM.SITEID IS NULL AND URM.STUDYID = ' || P_STUDYID
											|| ' AND (URM.EFFECTIVEENDDATE IS NULL OR URM.EFFECTIVEENDDATE >= CURRENT_TIMESTAMP) '
											|| ' AND (URM.EFFECTIVESTARTDATE <= CURRENT_TIMESTAMP)';

				V_FINAL_QUERY := V_STATIC_SQL_PART || V_FROM_CLAUSE || V_JOIN_CLAUSE || V_DYNMC_WHERE_CLAUSE || V_ORDERBY_CLAUSE;
				V_COUNT_QUERY := 'SELECT COUNT(1) FROM (' || V_FINAL_QUERY || ')';
				--DBMS_OUTPUT.PUT_LINE('V_COUNT_QUERY for CRO Training Course Assigner users : '|| V_COUNT_QUERY);
			ELSE
				V_FROM_CLAUSE := 'FROM TBL_USERROLEMAP URM ';

				V_JOIN_CLAUSE := ' JOIN TBL_SITE SITE ON URM.SITEID = SITE.SITEID
								   LEFT JOIN TBL_ROLES ROLES ON URM.ROLEID = ROLES.ROLEID '
								   || V_STATIC_JOIN_CLAUSE;

				V_DYNMC_WHERE_CLAUSE := ' WHERE ' || V_ISACTIVE_CLAUSE || V_COUNTRY_CLAUSE || V_SITE_CLAUSE || ' URM.USERID = ' || P_USERID
											|| ' AND URM.STUDYID = ' || P_STUDYID
											|| ' AND ROLES.ROLENAME IN (''Monitor'') '
											|| ' AND (URM.EFFECTIVEENDDATE IS NULL OR TO_DATE(TO_CHAR(URM.EFFECTIVEENDDATE, ''MM/DD/YYYY HH24:MI:SS''),
											     ''MM/DD/YYYY HH24:MI:SS'') >= TO_DATE(TO_CHAR(CURRENT_TIMESTAMP,''MM/DD/YYYY HH24:MI:SS''),
											     ''MM/DD/YYYY HH24:MI:SS'')) '
											|| ' AND (TO_DATE(TO_CHAR(URM.EFFECTIVESTARTDATE, ''MM/DD/YYYY HH24:MI:SS''),
											     ''MM/DD/YYYY HH24:MI:SS'') <= TO_DATE(TO_CHAR(CURRENT_TIMESTAMP,''MM/DD/YYYY HH24:MI:SS''),
											     ''MM/DD/YYYY HH24:MI:SS''))'	 ;

				V_FINAL_QUERY := V_STATIC_SQL_PART || V_FROM_CLAUSE || V_JOIN_CLAUSE || V_DYNMC_WHERE_CLAUSE || V_ORDERBY_CLAUSE;
				V_COUNT_QUERY := 'SELECT COUNT(1) FROM (' || V_FINAL_QUERY || ')';
				--DBMS_OUTPUT.PUT_LINE('V_COUNT_QUERY for Monitor and  CRO Monitor : '|| V_COUNT_QUERY);
			END IF;	--FOURTH IF

			EXECUTE IMMEDIATE V_COUNT_QUERY INTO V_RECORD_COUNT;
		--	DBMS_OUTPUT.PUT_LINE('V_RECORD_COUNT for CRO Training Course Assigner users : '|| V_RECORD_COUNT);
		END IF; --THIRD IF

		IF V_RECORD_COUNT = 0 THEN	--FIFTH IF
			V_FROM_CLAUSE := 'FROM TBL_USERROLEMAP URM ';

			V_JOIN_CLAUSE := ' JOIN TBL_SITE SITE ON URM.SITEID = SITE.SITEID '
							   || V_STATIC_JOIN_CLAUSE;

			V_DYNMC_WHERE_CLAUSE := ' WHERE ' || V_ISACTIVE_CLAUSE || V_COUNTRY_CLAUSE || V_SITE_CLAUSE || ' URM.USERID = ' || P_USERID
										|| ' AND URM.STUDYID = ' || P_STUDYID
										|| ' AND (URM.EFFECTIVEENDDATE IS NULL OR URM.EFFECTIVEENDDATE >= CURRENT_TIMESTAMP) '
										|| ' AND (URM.EFFECTIVESTARTDATE <= CURRENT_TIMESTAMP)';

			V_FINAL_QUERY := V_STATIC_SQL_PART || V_FROM_CLAUSE || V_JOIN_CLAUSE || V_DYNMC_WHERE_CLAUSE || V_ORDERBY_CLAUSE;
			V_COUNT_QUERY := 'SELECT COUNT(1) FROM (' || V_FINAL_QUERY || ')';
			--DBMS_OUTPUT.PUT_LINE('V_COUNT_QUERY fifth if condition : '|| V_COUNT_QUERY);

			EXECUTE IMMEDIATE V_COUNT_QUERY INTO V_RECORD_COUNT;
			--DBMS_OUTPUT.PUT_LINE('V_RECORD_COUNT for fifth if condition : '|| V_RECORD_COUNT);

			IF V_RECORD_COUNT = 0 THEN	--SIXTH IF
				V_FROM_CLAUSE := 'FROM TBL_USERROLEMAP URM ';

				V_JOIN_CLAUSE := ' JOIN TBL_SITE SITE ON URM.STUDYID = SITE.STUDYID
								   LEFT JOIN TBL_STUDY STUDY ON URM.STUDYID = STUDY.STUDYID '
								   || V_STATIC_JOIN_CLAUSE;

				V_DYNMC_WHERE_CLAUSE := ' WHERE ' || V_ISACTIVE_CLAUSE || V_COUNTRY_CLAUSE || V_SITE_CLAUSE  || ' URM.USERID = ' || P_USERID
											|| ' AND URM.STUDYID = ' || P_STUDYID
											|| ' AND (URM.EFFECTIVEENDDATE IS NULL OR URM.EFFECTIVEENDDATE >= CURRENT_TIMESTAMP) '
											|| ' AND (URM.EFFECTIVESTARTDATE <= CURRENT_TIMESTAMP) '
											|| ' AND URM.SITEID IS NULL';

				V_FINAL_QUERY := V_STATIC_SQL_PART || V_FROM_CLAUSE || V_JOIN_CLAUSE || V_DYNMC_WHERE_CLAUSE || V_ORDERBY_CLAUSE;
				V_COUNT_QUERY := 'SELECT COUNT(1) FROM (' || V_FINAL_QUERY || ')';
				--DBMS_OUTPUT.PUT_LINE('V_COUNT_QUERY sixth if condition : '|| V_COUNT_QUERY);

				EXECUTE IMMEDIATE V_COUNT_QUERY INTO V_RECORD_COUNT;
				--DBMS_OUTPUT.PUT_LINE('V_RECORD_COUNT for sixth if condition : '|| V_RECORD_COUNT);
			END IF;	--SIXTH IF
		END IF;	--FIFTH IF
	ELSE
		--DBMS_OUTPUT.PUT_LINE('IN ELSE PART');
		V_FROM_CLAUSE := 'FROM TBL_USERROLEMAP URM ';

		V_JOIN_CLAUSE := ' JOIN TBL_SITE SITE ON URM.SITEID = SITE.SITEID
						   LEFT JOIN TBL_ROLES ROLES ON URM.ROLEID = ROLES.ROLEID '
						   || V_STATIC_JOIN_CLAUSE;

		V_DYNMC_WHERE_CLAUSE := ' WHERE ' || V_ISACTIVE_CLAUSE || V_COUNTRY_CLAUSE || V_SITE_CLAUSE || ' URM.USERID = ' || P_USERID
									|| ' AND ROLES.ROLENAME = ''Monitor'' '
									|| ' AND (URM.EFFECTIVEENDDATE IS NULL OR URM.EFFECTIVEENDDATE >= CURRENT_TIMESTAMP) '
									|| ' AND (URM.EFFECTIVESTARTDATE <= CURRENT_TIMESTAMP)';

		V_FINAL_QUERY := V_STATIC_SQL_PART || V_FROM_CLAUSE || V_JOIN_CLAUSE || V_DYNMC_WHERE_CLAUSE || V_ORDERBY_CLAUSE;
		V_COUNT_QUERY := 'SELECT COUNT(1) FROM (' || V_FINAL_QUERY || ')';
		--DBMS_OUTPUT.PUT_LINE('V_COUNT_QUERY IN ELSE PART : '|| V_COUNT_QUERY);

		EXECUTE IMMEDIATE V_COUNT_QUERY INTO V_RECORD_COUNT;
		--DBMS_OUTPUT.PUT_LINE('V_RECORD_COUNT IN ELSE PART : '|| V_RECORD_COUNT);

		IF V_RECORD_COUNT = 0 THEN	--SEVENTH IF
			V_FROM_CLAUSE := 'FROM TBL_USERROLEMAP URM ';

			V_JOIN_CLAUSE := ' JOIN TBL_SITE SITE ON URM.SITEID = SITE.SITEID '
							   || V_STATIC_JOIN_CLAUSE;

			V_DYNMC_WHERE_CLAUSE := ' WHERE ' || V_ISACTIVE_CLAUSE || V_COUNTRY_CLAUSE || V_SITE_CLAUSE || ' URM.USERID = ' || P_USERID
									|| ' AND (URM.EFFECTIVEENDDATE IS NULL OR URM.EFFECTIVEENDDATE >= CURRENT_TIMESTAMP) '
									|| ' AND (URM.EFFECTIVESTARTDATE <= CURRENT_TIMESTAMP)';

			V_FINAL_QUERY := V_STATIC_SQL_PART || V_FROM_CLAUSE || V_JOIN_CLAUSE || V_DYNMC_WHERE_CLAUSE || V_ORDERBY_CLAUSE;
			V_COUNT_QUERY := 'SELECT COUNT(1) FROM (' || V_FINAL_QUERY || ')';
			--DBMS_OUTPUT.PUT_LINE('V_COUNT_QUERY IN IF CONDITION OF ELSE PART : '|| V_COUNT_QUERY);

			EXECUTE IMMEDIATE V_COUNT_QUERY INTO V_RECORD_COUNT;
			--DBMS_OUTPUT.PUT_LINE('V_RECORD_COUNT IN IF CONDITION OF ELSE PART : '|| V_RECORD_COUNT);
		END IF;	--SEVENTH IF
	END IF;	--FIRST IF
	P_COUNT := V_RECORD_COUNT;
	V_FINAL_QUERY := V_QUERY_START || V_FINAL_QUERY || V_QUERY_END;
	--DBMS_OUTPUT.PUT_LINE('V_FINAL_QUERY to return : '|| V_FINAL_QUERY);
	--DBMS_OUTPUT.PUT_LINE('P_COUNT to return : '|| P_COUNT);

	OPEN CUR_STUDYSITELIST FOR V_FINAL_QUERY;

	EXCEPTION
	/*when no data found then log exception*/
	WHEN NO_DATA_FOUND THEN
		V_MSG := 'NO DATA FOUND';
		DBMS_OUTPUT.PUT_LINE(V_MSG);
		RETURN;
	/*if Primary key violation then log exception*/
	WHEN DUP_VAL_ON_INDEX THEN
		V_MSG := SQLERRM;
		DBMS_OUTPUT.PUT_LINE(V_MSG);
		RETURN;
	/*if other exception then log exception*/
	WHEN OTHERS THEN
		V_MSG := SQLERRM;
		DBMS_OUTPUT.PUT_LINE(V_MSG);
	RETURN;
END SP_STUDY_SITE;

PROCEDURE SP_FETCH_ALL_LABS_FOR_SITE (
		I_STUDYID    	IN NUMBER,
		I_SITEID    	IN NUMBER,
		I_OFFSET        IN NUMBER,
		I_LIMIT         IN NUMBER,
		I_ORDRBY        IN VARCHAR2,
		I_SORTBY        IN VARCHAR2,
		I_COUNT 		OUT NUMBER,
		SITELABS		OUT SYS_REFCURSOR
	)
	AS
		V_STUDYLABS_SELECT_CLAUSE 		VARCHAR2(32000 );
		V_STUDYLABS_JOIN_CLAUSE 		VARCHAR2(32000 );
		V_STUDYLABS_WHERE_CLAUSE 		VARCHAR2(32000 );
		V_STUDYLABS_GROUPBY_CLAUSE 		VARCHAR2(32000 );
		V_FACILITYLABS_SELECT_CLAUSE 	VARCHAR2(32000 );
		V_FACILITYLABS_JOIN_CLAUSE 		VARCHAR2(32000 );
		V_FACILITYLABS_WHERE_CLAUSE 	VARCHAR2(32000 );
		V_UNIONALL_CLAUSE 				VARCHAR2(32000 );
		V_SQL_MAIN_QUERY         		VARCHAR2(32000 );
		V_FINAL_QUERY					VARCHAR2(32000 );
		V_COUNT_QUERY          			VARCHAR2(32000 );
		TEMP_SORTBY            			VARCHAR2(32000 );
		TEMP_ORDRBY            			VARCHAR2(32000 );
		V_MSG                  			VARCHAR2(32000);
		V_COUNTRYID						NUMBER(38,0);
		
	BEGIN
	
	TEMP_SORTBY := '';
	V_COUNTRYID := 0; 
	
	IF I_SORTBY = 'LABNAME' THEN
		TEMP_SORTBY := 'UPPER(TRIM(LABNAME))';
	ELSIF I_SORTBY = 'LABTYPE' THEN
		TEMP_SORTBY := 'UPPER(TRIM(LABTYPE))';
	ELSIF I_SORTBY = 'LABSOURCE' THEN
		TEMP_SORTBY := 'UPPER(TRIM(LABSOURCE))';
	ELSE
		TEMP_SORTBY := 'UPPER(TRIM(LABNAME))';
	END IF;
	
	IF I_ORDRBY IS NOT NULL THEN
		TEMP_ORDRBY := ' ' || I_ORDRBY;
	ELSE
		TEMP_ORDRBY := ' ASC';
	END IF;
		
		SELECT COUNTRY.COUNTRYID INTO V_COUNTRYID
		FROM TBL_COUNTRIES COUNTRY
		JOIN TBL_CONTACT CT ON COUNTRY.COUNTRYCD = CT.COUNTRYCD
		JOIN TBL_SITE SITE ON CT.CONTACTID = SITE.CONTACTID
		WHERE SITE.SITEID = I_SITEID; 
		
		V_STUDYLABS_SELECT_CLAUSE := 'SELECT SCL.STUDYLABID LABID, SCL.EXTERNALID EXTERNALID, ''Central'' AS LABTYPE, ST.STUDYNAME LABSOURCE, 
									SCL.LABNAME LABNAME, pkg_encrypt.fn_decrypt(CT.ADDRESS1) ADDRESS1, pkg_encrypt.fn_decrypt(CT.ADDRESS2) ADDRESS2, 
									pkg_encrypt.fn_decrypt(CT.ADDRESS3) ADDRESS3, CT.CITY, CT.STATE, CT.COUNTRYCD, pkg_encrypt.fn_decrypt(CT.POSTALCODE) POSTALCODE,
                  CT.CONTACTID, CT.ISACTIVE, ST.STUDYID LABSOURCEID, 
									LISTAGG(LAC.LABACCREDITATIONNAME,'', '') WITHIN GROUP (ORDER BY LAC.LABACCREDITATIONNAME) ACCREDITATION 
									FROM TBL_STUDYCENTRALLAB SCL ';
		
		V_STUDYLABS_JOIN_CLAUSE := 'LEFT JOIN TBL_STUDYLABACCREDITATIONMAP LMAP ON LMAP.STUDYLABID=SCL.STUDYLABID
									LEFT JOIN TBL_LABACCREDITATION LAC ON LAC.LABACCREDITATIONID=LMAP.LABACCREDITATIONID
									LEFT JOIN TBL_STUDY ST ON SCL.STUDYID = ST.STUDYID
									LEFT JOIN TBL_CONTACT CT ON SCL.CONTACTID = CT.CONTACTID 
									LEFT JOIN TBL_STUDYLABCOUNTRY SLC ON SCL.STUDYLABID = SLC.STUDYLABID ';
									
		V_STUDYLABS_WHERE_CLAUSE := 'WHERE SCL.STATUS = ''Y'' AND SCL.STUDYID = ' || I_STUDYID || ' AND (SCL.LABTYPE = ''Global'' OR SLC.COUNTRYID = ' || V_COUNTRYID || ')'; 
		
		V_STUDYLABS_GROUPBY_CLAUSE := ' GROUP BY SCL.STUDYLABID, SCL.EXTERNALID, LABTYPE, ST.STUDYNAME, ''Central'', 
										SCL.LABNAME, pkg_encrypt.fn_decrypt(CT.ADDRESS1), pkg_encrypt.fn_decrypt(CT.ADDRESS2), pkg_encrypt.fn_decrypt(CT.ADDRESS3), CT.CITY, 
										CT.STATE, CT.COUNTRYCD, pkg_encrypt.fn_decrypt(CT.POSTALCODE), CT.CONTACTID, CT.ISACTIVE, ST.STUDYID ';
										
		V_FACILITYLABS_SELECT_CLAUSE := 'SELECT (ADDFAC.ADDITIONALFACILITYID) LABID, ADDFAC.IRADDITIONALFACILITYID EXTERNALID, 
										''Local'' AS LABTYPE,
										CASE WHEN FAC.ISDEPARTMENT = ''Y'' THEN FAC.DEPARTMENTNAME ELSE FAC.FACILITYNAME END AS LABSOURCE, 
										ADDFAC.LABNAME LABNAME, pkg_encrypt.fn_decrypt(CT.ADDRESS1) ADDRESS1, 
										pkg_encrypt.fn_decrypt(CT.ADDRESS2) ADDRESS2, pkg_encrypt.fn_decrypt(CT.ADDRESS3) ADDRESS3, CT.CITY, CT.STATE, CT.COUNTRYCD, 
                    pkg_encrypt.fn_decrypt(CT.POSTALCODE) POSTALCODE, CT.CONTACTID, CT.ISACTIVE, FAC.FACILITYID LABSOURCEID, 
										LTRIM(
										CASE WHEN LABACC.ISCAP = ''Y'' THEN ''CAP'' END 
										|| CASE WHEN LABACC.ISCLIA = ''Y'' THEN '', CLIA'' END 
										|| CASE WHEN LABACC.ISGLP = ''Y'' THEN '', GLP'' END 
										|| CASE WHEN LABACC.ISISO = ''Y'' THEN '', ISO'' END
										|| CASE WHEN LABACC.OTHER IS NOT NULL THEN '', '' || LABACC.OTHER END, '', '') AS ACCREDITATION 
										FROM TBL_ADDITIONALFACILITY ADDFAC ';
										
		V_FACILITYLABS_JOIN_CLAUSE := 'LEFT JOIN TBL_FACILITIES FAC ON ADDFAC.FACILITYID = FAC.FACILITYID 										
										LEFT JOIN TBL_ADDITIONALFACILITYLABACC LABACC ON LABACC.ADDITIONALFACILITYID = ADDFAC.ADDITIONALFACILITYID
										LEFT JOIN TBL_CONTACT CT ON ADDFAC.CONTACTID = CT.CONTACTID ';
										
		V_FACILITYLABS_WHERE_CLAUSE := 'WHERE ADDFAC.ISACTIVE = ''Y'' AND ADDFAC.MASTERFACILITYTYPECODE = ''LAB'' '
                                    || 'AND ADDFAC.FACILITYID in ('
                                    || '(SELECT PRINCIPALFACILITYID FROM TBL_SITE WHERE SITEID = ' || I_SITEID || ' AND STUDYID = ' || I_STUDYID || ' ) '
                                    || 'UNION ALL '
                                    || '(SELECT FACILITYID  FROM TBL_ADDLSITELOCATION WHERE SITEID = ' || I_SITEID || ' AND STATUS = ''Y''))';
                                   		
		V_UNIONALL_CLAUSE := 'UNION ALL ';
		
		V_SQL_MAIN_QUERY := 	V_STUDYLABS_SELECT_CLAUSE || V_STUDYLABS_JOIN_CLAUSE || V_STUDYLABS_WHERE_CLAUSE || 			V_STUDYLABS_GROUPBY_CLAUSE ||
							V_UNIONALL_CLAUSE || 
							V_FACILITYLABS_SELECT_CLAUSE || V_FACILITYLABS_JOIN_CLAUSE || V_FACILITYLABS_WHERE_CLAUSE;
							
		V_COUNT_QUERY  := 'SELECT COUNT(1) FROM ((' || V_SQL_MAIN_QUERY || '))';
		
		EXECUTE IMMEDIATE V_COUNT_QUERY INTO I_COUNT;
		
		V_FINAL_QUERY := 'SELECT * FROM (' || V_SQL_MAIN_QUERY || ') ORDER BY LABTYPE, LABNAME ASC';
		
		OPEN SITELABS FOR V_FINAL_QUERY;
		
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
		V_MSG := 'NO DATA FOUND';
		DBMS_OUTPUT.PUT_LINE(V_MSG);
		RETURN;
END SP_FETCH_ALL_LABS_FOR_SITE;

END pkg_study_site;
/