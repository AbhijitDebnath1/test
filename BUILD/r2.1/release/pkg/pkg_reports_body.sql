	CREATE OR REPLACE PACKAGE BODY "PKG_REPORTS"
	AS
	PROCEDURE SP_USER_STUDIES_REPORT(
		P_USERID            IN NUMBER,
		P_STUDYID           IN NUMBER,
		P_STUDYSHORTDESC    IN VARCHAR2,
		P_COMPOUNDID        IN NUMBER,
		P_PROGID            IN NUMBER,
		P_THERAPEUTICAREAID IN NUMBER,
		P_COUNTRYID         IN NUMBER,
		P_INDICATIONID      IN NUMBER,
		P_OFFSET            IN NUMBER,
		P_LIMIT             IN NUMBER,
		P_ORDRBY            IN VARCHAR2,
		P_SORTBY            IN VARCHAR2,
		P_USER_STUDIES OUT SYS_REFCURSOR,
		P_COUNT OUT NUMBER)
	AS
	  --temp_dbuser V_USER_STUDIES%ROWTYPE;
	  V_STATIC_SQL_PART    VARCHAR2(9999 BYTE);
	  V_DYNMC_WHERE_CLAUSE VARCHAR2(9999 BYTE);
	  V_FINAL_QUERY        VARCHAR2(9999 BYTE);
	  V_COUNT_START        VARCHAR2(9999 BYTE);
	  V_FULL_START         VARCHAR2(9999 BYTE);
	  V_WHERE         VARCHAR2(9999 BYTE);
	  V_FROMCD              VARCHAR2(20);
	  V_WHERECD          VARCHAR2(100 BYTE);
	  V_ORGID              NUMBER;
	  V_ORDER              VARCHAR2(20);
	  V_COUNTRYCD          VARCHAR2(100 BYTE);
	  PAG_END_ROW          NUMBER;
	BEGIN
	  V_FROMCD := ', TBL_CONTACT con';

	  SELECT ORGID INTO V_ORGID FROM TBL_USERPROFILES WHERE USERID=P_USERID;
	  IF P_COUNTRYID IS NOT NULL AND P_COUNTRYID != 0 THEN
	  EXECUTE IMMEDIATE 'SELECT COUNTRYCD FROM TBL_COUNTRIES WHERE COUNTRYID ='|| P_COUNTRYID INTO V_COUNTRYCD;
	  END IF;
	  V_WHERECD :=' AND con.CONTACTID = s.CONTACTID AND con.COUNTRYCD =''' || V_COUNTRYCD ||'''';
	  --DBMS_OUTPUT.PUT_LINE('Country Code: '||V_COUNTRYCD);
	  V_COUNT_START          := 'SELECT COUNT(*) ';
	  --V_FULL_START           := 'SELECT * ';
		V_FINAL_QUERY:= 'SELECT *';
		V_FULL_START      := '  FROM (SELECT ROWNUM RNUM ,AA.*  FROM (SELECT DISTINCT s.STUDYID,
	s.STUDYSHORTDESC,
	s.STUDYSTATUSCD,
	pkg_encrypt.fn_decrypt (s.SPONCONTLASTNAME) || pkg_encrypt.fn_decrypt(s.SPONCONTFIRSTNAME) AS USERNAME,
	s.ACTUALSTARTDT,
	s.ACTUALENDDT
	FROM tbl_study s,
	  TBL_PROGRAM prog,
	  TBL_ORGANIZATION org';
	V_WHERE :=' WHERE s.PROGID      = prog.PROGID
	AND prog.ORGID    = org.ORGID
	AND org.ORGID     = '||V_ORGID ;
	  V_DYNMC_WHERE_CLAUSE   := '';
	  IF P_THERAPEUTICAREAID IS NOT NULL AND P_THERAPEUTICAREAID !=0 THEN-- i is even
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND s.THERAPEUTICAREAID = '||P_THERAPEUTICAREAID;
		--V_COUNT_START := V_COUNT_START || V_DYNMC_WHERE_CLAUSE;
	  END IF;
	  IF P_COMPOUNDID        IS NOT NULL AND P_COMPOUNDID !=0 THEN -- i is even
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND s.COMPOUNDID = '||P_COMPOUNDID;
		--V_COUNT_START := V_COUNT_START || V_DYNMC_WHERE_CLAUSE;
		--DBMS_OUTPUT.PUT_LINE(V_DYNMC_WHERE_CLAUSE);
	  END IF;
	  IF P_PROGID            IS NOT NULL AND P_PROGID !=0 THEN -- i is even
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND s.PROGID =  ' || P_PROGID;
		--V_COUNT_START := V_COUNT_START || V_DYNMC_WHERE_CLAUSE;
		--DBMS_OUTPUT.PUT_LINE(V_DYNMC_WHERE_CLAUSE);
	  END IF;
	  IF P_INDICATIONID      IS NOT NULL AND P_INDICATIONID !=0 THEN -- i is even
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND s.INDICATIONID = ' || P_INDICATIONID;
		--V_COUNT_START := V_COUNT_START || V_DYNMC_WHERE_CLAUSE;
		--DBMS_OUTPUT.PUT_LINE(V_DYNMC_WHERE_CLAUSE);
	  END IF;
	  IF P_STUDYSHORTDESC    IS NOT NULL THEN -- i is even
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND LOWER(s.STUDYSHORTDESC) LIKE LOWER(''%' || TO_CHAR

	(P_STUDYSHORTDESC) || '%'')';
		--V_COUNT_START := V_COUNT_START || V_DYNMC_WHERE_CLAUSE;
		--DBMS_OUTPUT.PUT_LINE(V_DYNMC_WHERE_CLAUSE);
	  END IF;
	  IF P_COUNTRYID         IS NOT NULL AND P_COUNTRYID !=0 THEN -- i is even
		V_WHERE := V_WHERE || V_WHERECD ;
		V_FULL_START := V_FULL_START || V_FROMCD;
	   -- DBMS_OUTPUT.PUT_LINE(V_DYNMC_WHERE_CLAUSE);
	  END IF ;
	  IF P_STUDYID           IS NOT NULL AND P_STUDYID !=0 THEN -- i is even
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND s.STUDYID = ' || P_STUDYID;
		--DBMS_OUTPUT.PUT_LINE(V_DYNMC_WHERE_CLAUSE);
	  END IF;
	  IF P_SORTBY    ='STUDYSHORTDESC' THEN
		V_ORDER     := 's.STUDYSHORTDESC';
	  ELSIF P_SORTBY = 'STUDYSTATUSCD' THEN
		V_ORDER     := 's.STUDYSTATUSCD';
	  ELSIF P_SORTBY = 'USERNAME' THEN
		V_ORDER     := 'USERNAME';
	  ELSIF P_SORTBY = 'ACTUALSTARTDT' THEN
		V_ORDER     := 's.ACTUALSTARTDT';
	  ELSIF P_SORTBY = 'ACTUALENDDT' THEN
		V_ORDER     := 's.ACTUALENDDT';
	  ELSE
		V_ORDER := 's.STUDYID';
	  END IF;

	  PAG_END_ROW   := P_OFFSET + P_LIMIT - 1;

	  V_FINAL_QUERY := V_FINAL_QUERY || V_FULL_START || V_WHERE || V_DYNMC_WHERE_CLAUSE || ' ORDER BY ' || V_ORDER||' '||

	P_ORDRBY ||') AA  WHERE ROWNUM <= ' || TO_CHAR(PAG_END_ROW) ||' ) WHERE RNUM >='|| TO_CHAR(P_OFFSET) ;
	  V_COUNT_START := V_COUNT_START || V_FULL_START || V_WHERE || V_DYNMC_WHERE_CLAUSE || ' ORDER BY ' || V_ORDER||' '||

	P_ORDRBY ||') AA   ) ' ;
	  --V_COUNT_START := V_COUNT_START;
	  --DBMS_OUTPUT.PUT_LINE(V_COUNT_START);
	  EXECUTE IMMEDIATE V_COUNT_START INTO P_COUNT;
	 -- DBMS_OUTPUT.PUT_LINE(V_FINAL_QUERY);

	  OPEN P_USER_STUDIES FOR V_FINAL_QUERY;
	  --P_COUNT := 123;
	  --DBMS_OUTPUT.PUT_LINE(P_COUNT);
	END SP_USER_STUDIES_REPORT;

	PROCEDURE PROC_STUDYSITEFACDETAILS  ( V_ORGID IN NUMBER,
		V_TRANSCELERATEID IN VARCHAR2,
		P_OFFSET          IN NUMBER,
		P_LIMIT           IN NUMBER,
		P_ORDRBY          IN VARCHAR2,
		P_SORTBY          IN VARCHAR2,
		P_STUDYSITEFACDETAILS OUT SYS_REFCURSOR,
		P_COUNT OUT NUMBER
		)
	AS

	  V_FINAL_QUERY        VARCHAR2(9999 BYTE);
	  V_DYNMC_WHERE_CLAUSE VARCHAR2(9999 BYTE);
	  V_STATIC_SQL_PART VARCHAR2(9999 BYTE);
	  V_STATIC_SQL_PART_TRANSUSER VARCHAR2(9999 BYTE);
	  V_STATIC_SQL_PART_ORGID VARCHAR2(9999 BYTE);
	  V_STATIC_SQL_PART_ORGID2 VARCHAR2(9999 BYTE);
	  V_STATIC_SQL_ORGID VARCHAR2(9999 BYTE);
	   V_COUNT_QUERY     VARCHAR2(9999 BYTE);
	   V_STATIC_SQL_PARTROW    VARCHAR2(9999 BYTE);
	  V_MSG                VARCHAR2(500);
	  V_YES                VARCHAR2(10);
	  V_ENDINDEX           NUMBER;
	  V_STARTINDEX         NUMBER;
	   V_ORGID1        NUMBER;
	   V_ORGID2        NUMBER;
	   V_ROLE_COUNT            NUMBER;
	   V_USER_ID            NUMBER;
		 U_USERID              number;
	  U_roleid              number;
	  U_roletype            number;
	  u_count               number;
	  u_orgid               number;

	BEGIN
	 V_YES               := 'Y';
	 V_ROLE_COUNT := 0;
	 V_USER_ID := 0;
	 V_STARTINDEX   := p_OFFSET;
	  IF p_OFFSET     = 1 THEN
		V_STARTINDEX := p_OFFSET -1;
	  END IF;
	  V_ENDINDEX := p_LIMIT + p_OFFSET-1;


	  select tup.userid into u_userid from tbl_userprofiles tup where tup.transcelerateuserid=V_TRANSCELERATEID;
	select count(*) into u_count from TBL_USERROLEMAP  where userid=u_userid and ROLEID in (select ROLEID from TBL_ROLES where roletypeid in (2,3));

	V_STATIC_SQL_PARTROW := ' SELECT * FROM (SELECT ROWNUM RNUM ,TEMP.*  FROM ';

	V_STATIC_SQL_PART_ORGID :=
				' (select study.STUDYID,study.STUDYLONGDESC as PROTOCOLTITLE,study.STUDYSHORTDESC as SHORTDESC

	,study.STUDYNAME,site.SITEID,site.SITENAME,fac.FACILITYID,fac.IRFACILITYID,fac.FACILITYNAME
			  ,fac.CONTACTID,pkg_encrypt.fn_decrypt (up.FIRSTNAME) FIRSTNAME,pkg_encrypt.fn_decrypt (up.LASTNAME) LASTNAME
			  from TBL_SITE site
			  JOIN TBL_STUDY study ON site.STUDYID=study.STUDYID
			  JOIN TBL_FACILITIES fac ON site.PRINCIPALFACILITYID=fac.FACILITYID
			  JOIN TBL_Program prog ON study.PROGID=prog.PROGID ';

	IF V_ORGID    IS NOT NULL THEN
		V_STATIC_SQL_ORGID :=' AND prog.ORGID= '||V_ORGID ||'';
		V_STATIC_SQL_PART_ORGID := V_STATIC_SQL_PART_ORGID || V_STATIC_SQL_ORGID;
	END IF;

	V_STATIC_SQL_PART_ORGID2 := ' AND site.ISACTIVE='''|| V_YES ||'''
			  LEFT JOIN TBL_Contact con ON fac.CONTACTID=con.CONTACTID
			  LEFT JOIN TBL_USERPROFILES up ON con.CONTACTID=up.CONTACTID';

	V_STATIC_SQL_PART_ORGID :=V_STATIC_SQL_PART_ORGID  ||  V_STATIC_SQL_PART_ORGID2;

	IF V_TRANSCELERATEID            IS NOT NULL THEN
	  SELECT USERID INTO V_USER_ID FROM TBL_USERPROFILES WHERE LOWER(TRANSCELERATEUSERID) = LOWER(V_TRANSCELERATEID);
	  SELECT COUNT(*) INTO V_ROLE_COUNT
	  FROM TBL_USERROLEMAP usrrole
	  LEFT JOIN TBL_ROLES tblroles
	  ON usrrole.ROLEID        = tblroles.ROLEID
	  WHERE tblroles.ROLETYPEID=1
	  AND usrrole.EFFECTIVESTARTDATE    <= SYSDATE
	  AND (usrrole.EFFECTIVEENDDATE >= SYSDATE
	  OR usrrole.EFFECTIVEENDDATE   IS NULL) AND usrrole.USERID=V_USER_ID;
	END IF;

	  IF u_count >0           THEN
		select distinct tu.orgid into u_orgid from tbl_userprofiles tu where tu.transcelerateuserid=V_TRANSCELERATEID;
		V_STATIC_SQL_PART_TRANSUSER := '(select distinct study.STUDYID,
					study.STUDYLONGDESC  as PROTOCOLTITLE,
					study.STUDYSHORTDESC as SHORTDESC,
					study.STUDYNAME,
					site.SITEID,
					site.SITENAME,
					fac.FACILITYID,
					fac.IRFACILITYID,
					fac.FACILITYNAME,
					fac.CONTACTID,
					null  as FIRSTNAME,
					null  as LASTNAME

	  from TBL_study study
	  JOIN TBL_Site site
		on site.studyid = study.STUDYID
	   AND site.ISACTIVE = ''Y''
	  JOIN TBL_FACILITIES fac
		on site.PRINCIPALFACILITYID = fac.facilityid
	 where study.STUDYID in
		   (SELECT STUDYID
			  FROM TBL_STUDY
			 WHERE PROGID IN (SELECT PROGID FROM TBL_PROGRAM WHERE ORGID ='|| u_orgid ||'))';

	else

	IF V_TRANSCELERATEID            IS NOT NULL AND V_ROLE_COUNT> 0 THEN

		  V_STATIC_SQL_PART_TRANSUSER :=' (select distinct study.STUDYID,study.STUDYLONGDESC as PROTOCOLTITLE,study.STUDYSHORTDESC as
			SHORTDESC ,study.STUDYNAME,
			site.SITEID,site.SITENAME,fac.FACILITYID,fac.IRFACILITYID,fac.FACILITYNAME ,fac.CONTACTID,pkg_encrypt.fn_decrypt (up.FIRSTNAME) FIRSTNAME,pkg_encrypt.fn_decrypt (up.LASTNAME) LASTNAME
			from tbl_userrolemap urm
			JOIN TBL_study study on study.studyid=urm.studyid
			JOIN TBL_Site site on site.studyid=urm.STUDYID
			AND site.ISACTIVE='''|| V_YES ||'''
			JOIN TBL_FACILITIES fac on site.PRINCIPALFACILITYID=fac.facilityid
			JOIN TBL_USERPROFILES up on up.userid=urm.userid and up.TRANSCELERATEUSERID='''|| V_TRANSCELERATEID ||'''
			where urm.EFFECTIVEENDDATE >= sysdate or urm.EFFECTIVEENDDATE is null AND study.STUDYID in (SELECT STUDYID FROM TBL_USERROLEMAP WHERE USERID ='|| V_USER_ID || ')';
	ELSIF V_TRANSCELERATEID            IS NOT NULL THEN

	V_STATIC_SQL_PART_TRANSUSER :=' (select distinct study.STUDYID,study.STUDYLONGDESC as PROTOCOLTITLE,study.STUDYSHORTDESC as

	SHORTDESC ,study.STUDYNAME,
			site.SITEID,site.SITENAME,fac.FACILITYID,fac.IRFACILITYID,fac.FACILITYNAME ,fac.CONTACTID,pkg_encrypt.fn_decrypt (up.FIRSTNAME) FIRSTNAME,pkg_encrypt.fn_decrypt (up.LASTNAME) LASTNAME
			from tbl_userrolemap urm
			JOIN TBL_study study on study.studyid=urm.studyid
			JOIN TBL_Site site on site.studyid=urm.STUDYID
			AND site.ISACTIVE='''|| V_YES ||'''
			JOIN TBL_FACILITIES fac on site.PRINCIPALFACILITYID=fac.facilityid
			JOIN TBL_USERPROFILES up on up.userid=urm.userid and up.TRANSCELERATEUSERID='''|| V_TRANSCELERATEID ||'''
			where urm.EFFECTIVEENDDATE >= sysdate or urm.EFFECTIVEENDDATE is null ';
	END IF;

	  END IF;
	  IF V_TRANSCELERATEID            IS NOT NULL THEN
		  V_STATIC_SQL_PART := V_STATIC_SQL_PART_TRANSUSER;
		ELSE
		 V_STATIC_SQL_PART := V_STATIC_SQL_PART_ORGID;
	  END IF;


	 V_DYNMC_WHERE_CLAUSE   := '';

	  IF P_SORTBY            IS NOT NULL THEN
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' ORDER BY trim(lower(' || P_SORTBY ||'))';
	  ELSE
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || '  ORDER BY trim(lower(STUDY.STUDYNAME))';
	  END IF;
	  IF P_ORDRBY            IS NOT NULL THEN
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' ' || P_ORDRBY;
	  END IF;


	 -- DBMS_OUTPUT.PUT_LINE(V_FINAL_QUERY);

	  V_FINAL_QUERY       := V_STATIC_SQL_PARTROW || V_STATIC_SQL_PART || V_DYNMC_WHERE_CLAUSE;
	  V_FINAL_QUERY       := V_FINAL_QUERY || ' ) TEMP  WHERE ROWNUM <= ' || TO_CHAR(V_ENDINDEX) ||' ) WHERE RNUM >='||

	TO_CHAR(V_STARTINDEX) ;
	  V_COUNT_QUERY       := 'SELECT COUNT(*) FROM ' || V_STATIC_SQL_PART || V_DYNMC_WHERE_CLAUSE|| ')';
	  --dbms_output.put_line(V_COUNT_QUERY);

	  OPEN P_STUDYSITEFACDETAILS FOR V_FINAL_QUERY;
	  EXECUTE IMMEDIATE V_COUNT_QUERY INTO P_COUNT;
	  --DBMS_OUTPUT.PUT_LINE(V_FINAL_QUERY);

	  EXCEPTION
	  /*when no data found then log exception*/
	  WHEN NO_DATA_FOUND THEN
	  V_MSG := 'NO DATA FOUND';
	  DBMS_OUTPUT.PUT_LINE(V_MSG);
	  RETURN;

	END PROC_STUDYSITEFACDETAILS;


	PROCEDURE SP_HISTORICAL_USER_ACCESS(
		p_USERID    IN NUMBER,
		p_FIRSTNAME IN VARCHAR2,
		p_LASTNAME  IN VARCHAR2,
		p_EMAIL     IN VARCHAR2,
		p_OUT_PARAM OUT SYS_REFCURSOR )
	AS
	  V_TEMP_CUR SYS_REFCURSOR;
	  V_TEMP_DATE DATE;
	BEGIN
	  -- work in progress
	  SELECT EFFECTIVEENDDATE
	  INTO V_TEMP_DATE
	  FROM TBL_USERROLEMAP;
	END SP_HISTORICAL_USER_ACCESS;

	PROCEDURE PROC_USERREGISTRATIONREP(
		V_TRANSCELERATEID IN VARCHAR2,
		V_ROLEID          IN NUMBER,
		V_STATUS          IN VARCHAR2,
		V_ACTSTARTDATE    IN DATE,
		V_ACTENDDATE      IN DATE,
		P_OFFSET          IN NUMBER,
		P_LIMIT           IN NUMBER,
		P_ORDRBY          IN VARCHAR2,
		P_SORTBY          IN VARCHAR2,
		P_USERREGISTRATION OUT SYS_REFCURSOR,
		P_COUNT OUT NUMBER )
	AS
	  V_ORGID              NUMBER(38,0);
	  V_STATIC_SQL_PART    VARCHAR2(9999 BYTE);
	   V_STATIC_SQL_PARTROW    VARCHAR2(9999 BYTE);
	  V_DYNMC_WHERE_CLAUSE VARCHAR2(9999 BYTE);
	  V_FINAL_QUERY        VARCHAR2(9999 BYTE);
	  STC_COUNTSQL_PART    VARCHAR2(9999 BYTE);
	  COUNT_QUERY          VARCHAR2(9999 BYTE);
	  V_MSG                VARCHAR2(500);
	  PAG_END_ROW          NUMBER;
	  V_USERNAME           VARCHAR2(9999 BYTE);
	   V_COUNT_QUERY              VARCHAR2(9999 BYTE);
		V_ENDINDEX		       NUMBER;
	  V_STARTINDEX         NUMBER;
	BEGIN

	  V_STARTINDEX := P_OFFSET + 1;
	  IF P_OFFSET = 0 THEN
			 V_STARTINDEX := P_OFFSET;
		END IF;
		 IF P_OFFSET = 1 THEN
			 V_STARTINDEX := P_OFFSET;
		END IF;
	  V_ENDINDEX := P_LIMIT + P_OFFSET;
	  SELECT up.ORGID
	  INTO V_ORGID
	  FROM TBL_USERPROFILES up
	  WHERE up.TRANSCELERATEUSERID = V_TRANSCELERATEID ;
	 -- DBMS_OUTPUT.PUT_LINE('V_ORGID = '|| V_ORGID);
	   V_STATIC_SQL_PARTROW := 'SELECT * FROM (SELECT ROWNUM RNUM ,TEMP.*  FROM';

	  --'|| ' ' ||'
	  V_STATIC_SQL_PART      := ' (SELECT DISTINCT pkg_encrypt.fn_decrypt (up.FIRSTNAME) || '' '' || pkg_encrypt.fn_decrypt (up.LASTNAME) as USERNAME,
	pkg_encrypt.fn_decrypt (con.EMAIL) EMAIL,
	pkg_encrypt.fn_decrypt (con.PHONE1) PHONE1,
	rol.ROLENAME,
	up.ACTIVATIONSTARTDT,
	up.ISACTIVE,
	up.TRANSCELERATEUSERID
	FROM TBL_USERROLEMAP urm ,
	TBL_USERPROFILES up,
	TBL_CONTACT con,
	TBL_ROLES rol
	WHERE urm.USERID=up.USERID
	AND up.CONTACTID=con.CONTACTID
	AND  rol.ROLEID=urm.ROLEID
	AND up.ORGID    =' ||V_ORGID || '';
	  STC_COUNTSQL_PART      :='SELECT COUNT(1)
	FROM TBL_USERROLEMAP urm ,
	TBL_USERPROFILES up,
	TBL_CONTACT con,
	TBL_ROLES rol
	WHERE urm.USERID=up.USERID
	AND up.CONTACTID=con.CONTACTID
	AND  rol.ROLEID=urm.ROLEID
	AND up.ORGID    =' ||V_ORGID ;
	  V_DYNMC_WHERE_CLAUSE   := '';
	  IF V_ROLEID            IS NOT NULL THEN -- i is even
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND rol.ROLEID=' || V_ROLEID;
	   -- DBMS_OUTPUT.PUT_LINE(V_DYNMC_WHERE_CLAUSE);
	  END IF;
	  IF V_STATUS            IS NOT NULL THEN
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND up.ISACTIVE='''|| V_STATUS ||'''';
		--DBMS_OUTPUT.PUT_LINE(V_DYNMC_WHERE_CLAUSE);
	  END IF;
	  IF V_ACTSTARTDATE      IS NOT NULL THEN
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND TO_DATE(up.ACTIVATIONSTARTDT,''dd-mon-yy HH24:MI:SS'') >= 

	TO_DATE(''' || V_ACTSTARTDATE|| ''',''dd-mon-yy HH24:MI:SS'')' ;
	  END IF;
	  IF V_ACTENDDATE        IS NOT NULL THEN
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND TO_DATE(up.ACTIVATIONSTARTDT,''dd-mon-yy HH24:MI:SS'') <= 

	TO_DATE(''' || V_ACTENDDATE|| ''',''dd-mon-yy HH24:MI:SS'')' ;
	  END IF;
	  PAG_END_ROW   := P_OFFSET + P_LIMIT - 1;

	   IF P_SORTBY               IS NOT NULL THEN
		V_DYNMC_WHERE_CLAUSE   := V_DYNMC_WHERE_CLAUSE || ' ORDER BY ' || P_SORTBY;
	  ELSE
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' ORDER BY up.TRANSCELERATEUSERID ';
	  END IF;
	  IF P_ORDRBY             IS NOT NULL THEN
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' ' || P_ORDRBY;
	  END IF;


	  V_DYNMC_WHERE_CLAUSE:=V_DYNMC_WHERE_CLAUSE;
	  V_FINAL_QUERY       := V_STATIC_SQL_PARTROW || V_STATIC_SQL_PART || V_DYNMC_WHERE_CLAUSE;
	  V_FINAL_QUERY       := V_FINAL_QUERY || ' ) TEMP  WHERE ROWNUM <= ' || TO_CHAR(V_ENDINDEX) ||' ) WHERE RNUM >='|| 

	TO_CHAR(V_STARTINDEX) ;
	 V_COUNT_QUERY       := 'SELECT COUNT(*) FROM ' || V_STATIC_SQL_PART || V_DYNMC_WHERE_CLAUSE|| ')';


	  --DBMS_OUTPUT.PUT_LINE(V_FINAL_QUERY);

	 EXECUTE IMMEDIATE V_COUNT_QUERY INTO P_COUNT;
	  --COUNT_QUERY;
	 -- dbms_output.put_line(P_COUNT);
	 -- dbms_output.put_line(V_COUNT_QUERY);
	  OPEN P_USERREGISTRATION FOR V_FINAL_QUERY;
	EXCEPTION
	WHEN NO_DATA_FOUND THEN
	  V_MSG := 'NO DATA FOUND';
	  DBMS_OUTPUT.PUT_LINE(V_MSG);
	  RETURN;
	END PROC_USERREGISTRATIONREP;

	--Procedure to fetch site userlist associated to facilites as per search criteria
	PROCEDURE SITE_USR_ASOC_FAC_PROC(
		I_STUDYIDS       IN NUM_ARRAY,
		I_CNTRYID        IN NUM_ARRAY,
		I_LOGINID        IN NUMBER,
		I_FIRSTNAME      IN VARCHAR2,
		I_LASTNAME       IN VARCHAR2,
		I_FACILITY_DEPT_NAME   IN VARCHAR2,
		I_EXCLUDE        IN VARCHAR2,
		I_OFFSET         IN NUMBER,
		I_LIMIT          IN NUMBER,
		I_ORDRBY         IN VARCHAR2,
		I_SORTBY         IN VARCHAR2,
		SITEUSRASSOCFACREP OUT SYS_REFCURSOR,
		O_COUNT OUT NUMBER )
	AS
	  STC_SQL_PART               VARCHAR2(9999 BYTE);
	  SELECT_SQL_PART            VARCHAR2(9999 BYTE);
	  JOIN_SQL_PART              VARCHAR2(9999 BYTE);
	  DYNMC_SQL_CLAUSE_PART      VARCHAR2(9999 BYTE);
	  STC_COUNTSQL_PART          VARCHAR2(9999 BYTE);
	  DYNMC_COUNTSQL_CLAUSE_PART VARCHAR2(9999 BYTE);
	  COUNT_QUERY                VARCHAR2(9999 BYTE);
	  STUDY_IDS_STR              VARCHAR2(9999 BYTE);
	  V_ORDER                    VARCHAR2(500);
	  PAG_END_ROW                NUMBER;
	  V_ORGID                    NUMBER(38,0);
	  V_ROLE_COUNT               NUMBER;
	  V_country_str              VARCHAR2(9999 BYTE);
	  V_FACILITYNAME             VARCHAR2(9999 BYTE);
	BEGIN
	V_ROLE_COUNT := 0;

	IF I_LOGINID         IS NOT NULL THEN
	  SELECT ORGID INTO V_ORGID FROM TBL_USERPROFILES WHERE USERID=I_LOGINID;

	  SELECT COUNT(*) INTO V_ROLE_COUNT
	  FROM TBL_USERROLEMAP usrrole
	  LEFT JOIN TBL_ROLES tblroles
	  ON usrrole.ROLEID        = tblroles.ROLEID
	  WHERE tblroles.ROLETYPEID=1
	  AND usrrole.EFFECTIVESTARTDATE    <= SYSDATE
	  AND (usrrole.EFFECTIVEENDDATE >= SYSDATE
	  OR usrrole.EFFECTIVEENDDATE   IS NULL) AND usrrole.USERID=I_LOGINID;
	END IF;


	  IF I_STUDYIDS         IS NOT NULL AND I_STUDYIDS.count >0 THEN
		FOR i IN 1..I_STUDYIDS.count
		LOOP
		  EXIT
		WHEN I_STUDYIDS(i) = -1;
		  IF i             = 1 THEN
			STUDY_IDS_STR := I_STUDYIDS(i);
		  ELSE
			STUDY_IDS_STR := STUDY_IDS_STR || ',' || I_STUDYIDS(i);
		  END IF;
		END LOOP;
	  END IF;
	  --Static query starts
	  SELECT_SQL_PART  :=' select distinct case when fac.isdepartment=''Y'' then   FAC.Departmentname 
	else fac.facilityname end FACILITY_DEPT_NAME,
	  pkg_encrypt.fn_decrypt (INITCAP(UU.FIRSTNAME)) FIRSTNAME,
	  pkg_encrypt.fn_decrypt (INITCAP(UU.LASTNAME)) LASTNAME,
	  pkg_encrypt.fn_decrypt (LOWER(CONT.EMAIL)) EMAIL,
	  pkg_encrypt.fn_decrypt (CONT.PHONE1) PHONE1,
	  pkg_encrypt.fn_decrypt (CONT.PHONE1EXT) PHONE1EXT,
	  pkg_encrypt.fn_decrypt (CONT.PHONE2) PHONE2,
	  pkg_encrypt.fn_decrypt (CONT.PHONE2EXT) PHONE2EXT,
	  TR.Rolename USER_TYPE, ';
	  IF STUDY_IDS_STR IS NOT NULL  AND I_CNTRYID  IS NOT NULL THEN
	  SELECT_SQL_PART := SELECT_SQL_PART || ' INITCAP(CNTRY.COUNTRYNAME) COUNTRYNAME,
	  FAC.FACILITYID,
	  LOWER(UU.TRANSCELERATEUSERID) TRANSCELERATEUSERID ';
	  ELSE
	  SELECT_SQL_PART := SELECT_SQL_PART || ' INITCAP(CNTR.COUNTRYNAME) COUNTRYNAME,
	  FAC.FACILITYID,
	  LOWER(UU.TRANSCELERATEUSERID) TRANSCELERATEUSERID ';
	  END IF;




	IF STUDY_IDS_STR IS NOT NULL  AND I_CNTRYID  IS NOT NULL THEN
	  JOIN_SQL_PART :=' FROM TBL_IRFACILITYUSERMAP FUSERMAP
	JOIN TBL_USERPROFILES UU
	ON UU.USERID =FUSERMAP.USERID
	JOIN TBL_FACILITIES FAC
	ON FAC.FACILITYID =FUSERMAP.FACILITYID
	JOIN TBL_USERROLEMAP USERROLEMAP
	ON USERROLEMAP.USERID = FUSERMAP.USERID
	JOIN TBL_SITE SITE
	ON SITE.SITEID= USERROLEMAP.SITEID
	JOIN TBL_CONTACT CONT
	ON CONT.CONTACTID= UU.CONTACTID
	JOIN TBL_CONTACT CN
	ON CN.CONTACTID= SITE.CONTACTID
	LEFT JOIN TBL_COUNTRIES CNTR
	ON CNTR.COUNTRYCD = CN.COUNTRYCD
	LEFT JOIN TBL_COUNTRIES CNTRY
	ON CNTRY.COUNTRYCD = CONT.COUNTRYCD 
	LEFT JOIN TBL_ROLES TR
	ON TR.Roleid=UU.Roleid ';
	   IF I_LOGINID         IS NOT NULL THEN
		  JOIN_SQL_PART := JOIN_SQL_PART || ' JOIN TBL_STUDY STUDY
				ON STUDY.STUDYID=USERROLEMAP.STUDYID
				JOIN TBL_PROGRAM PROG
				ON PROG.PROGID=STUDY.PROGID
				JOIN TBL_ORGANIZATION ORG
				ON ORG.ORGID=PROG.ORGID ';
		  END IF;

	ELSIF STUDY_IDS_STR   IS NOT NULL THEN
	JOIN_SQL_PART :=' FROM TBL_IRFACILITYUSERMAP FUSERMAP
	JOIN TBL_USERPROFILES UU
	ON UU.USERID =FUSERMAP.USERID
	JOIN TBL_FACILITIES FAC
	ON FAC.FACILITYID =FUSERMAP.FACILITYID
	JOIN TBL_USERROLEMAP USERROLEMAP
	ON USERROLEMAP.USERID  = FUSERMAP.USERID
	JOIN TBL_CONTACT CONT
	ON CONT.CONTACTID= UU.CONTACTID
	LEFT JOIN TBL_COUNTRIES CNTR
	ON CNTR.COUNTRYCD = CONT.COUNTRYCD 
	LEFT JOIN TBL_ROLES TR
	ON TR.Roleid=UU.Roleid ';
	  IF I_LOGINID         IS NOT NULL THEN
		  JOIN_SQL_PART := JOIN_SQL_PART || ' JOIN TBL_STUDY STUDY
				ON STUDY.STUDYID=USERROLEMAP.STUDYID
				JOIN TBL_PROGRAM PROG
				ON PROG.PROGID=STUDY.PROGID
				JOIN TBL_ORGANIZATION ORG
				ON ORG.ORGID=PROG.ORGID ';
		  END IF;
	ELSIF I_EXCLUDE IS NOT NULL AND UPPER(I_EXCLUDE) = 'Y' THEN
	JOIN_SQL_PART :=' FROM TBL_IRFACILITYUSERMAP FUSERMAP
	JOIN TBL_USERPROFILES UU
	ON UU.USERID =FUSERMAP.USERID
	JOIN TBL_FACILITIES FAC
	ON FAC.FACILITYID =FUSERMAP.FACILITYID
	JOIN TBL_CONTACT CONT
	ON CONT.CONTACTID= UU.CONTACTID
	LEFT JOIN TBL_COUNTRIES CNTR
	ON CNTR.COUNTRYCD = CONT.COUNTRYCD
	LEFT JOIN TBL_USERROLEMAP USERROLEMAP
	ON USERROLEMAP.USERID   = FUSERMAP.USERID ';
	ELSE
	  JOIN_SQL_PART :=' FROM TBL_IRFACILITYUSERMAP FUSERMAP
	JOIN TBL_USERPROFILES UU
	ON UU.USERID =FUSERMAP.USERID
	JOIN TBL_FACILITIES FAC
	ON FAC.FACILITYID =FUSERMAP.FACILITYID
	JOIN TBL_CONTACT CONT
	ON CONT.CONTACTID= UU.CONTACTID
	LEFT JOIN TBL_COUNTRIES CNTR
	ON CNTR.COUNTRYCD = CONT.COUNTRYCD 
	LEFT JOIN TBL_ROLES TR
	ON TR.Roleid=UU.Roleid
	';
	  IF I_LOGINID         IS NOT NULL THEN
		  JOIN_SQL_PART := JOIN_SQL_PART || ' JOIN TBL_USERROLEMAP USERROLEMAP
				ON USERROLEMAP.USERID  = FUSERMAP.USERID
				JOIN TBL_STUDY STUDY
				ON STUDY.STUDYID=USERROLEMAP.STUDYID
				JOIN TBL_PROGRAM PROG
				ON PROG.PROGID=STUDY.PROGID
				JOIN TBL_ORGANIZATION ORG
				ON ORG.ORGID=PROG.ORGID ';
		  END IF;
	END IF;


	  STC_SQL_PART     :='SELECT * FROM
	(SELECT ROWNUM RNUM ,
	TEMP.*
	FROM
	( ' || SELECT_SQL_PART || JOIN_SQL_PART || '
	WHERE FUSERMAP.ISACTIVE             =''Y''
	AND UU.ISACTIVE                     =''Y''
	AND FAC.ISACTIVE                    =''Y'' AND UU.ISSPONSOR=''N'' ';


	  STC_COUNTSQL_PART:='SELECT count(1)
	FROM (' || SELECT_SQL_PART || JOIN_SQL_PART ||
	'WHERE FUSERMAP.ISACTIVE             =''Y''
	AND UU.ISACTIVE                     =''Y''
	AND FAC.ISACTIVE                    =''Y'' AND UU.ISSPONSOR=''N'' ';

	  -- Dyanamic query starts
	  DYNMC_SQL_CLAUSE_PART := '';
	  IF STUDY_IDS_STR     IS NOT NULL THEN
		DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART ||
		' AND USERROLEMAP.EFFECTIVESTARTDATE <= sysdate
		  AND ( USERROLEMAP.EFFECTIVEENDDATE >= sysdate
		  OR USERROLEMAP.EFFECTIVEENDDATE    IS NULL)  AND USERROLEMAP.STUDYID IN(' || STUDY_IDS_STR || ')';
		  IF I_LOGINID         IS NOT NULL  AND V_ROLE_COUNT > 0 THEN
		  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND STUDY.STUDYID in (SELECT STUDYID FROM TBL_USERROLEMAP WHERE USERID = '|| TO_CHAR(I_LOGINID) || ') AND ORG.ORGID='|| TO_CHAR(V_ORGID) ;

		  ELSIF I_LOGINID         IS NOT NULL THEN
		  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND ORG.ORGID='|| TO_CHAR(V_ORGID) ;
		  END IF;

	  ELSIF I_EXCLUDE IS NOT NULL AND UPPER(I_EXCLUDE) = 'Y' THEN
	  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART ||
		' AND ( USERROLEMAP.EFFECTIVESTARTDATE <= sysdate or USERROLEMAP.EFFECTIVESTARTDATE is null )
		  AND ( USERROLEMAP.EFFECTIVEENDDATE >= sysdate
		  OR USERROLEMAP.EFFECTIVEENDDATE    IS NULL)  AND USERROLEMAP.STUDYID is null ';

	  ELSIF I_LOGINID         IS NOT NULL  AND V_ROLE_COUNT > 0 THEN
		  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND STUDY.STUDYID in (SELECT STUDYID FROM TBL_USERROLEMAP WHERE USERID = '|| TO_CHAR(I_LOGINID) || ') AND ORG.ORGID='|| TO_CHAR(V_ORGID) ;

	  ELSIF I_LOGINID         IS NOT NULL THEN
		  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND ORG.ORGID='|| TO_CHAR(V_ORGID) ;
	  END IF;
	 

	 IF I_CNTRYID            IS NOT NULL AND I_CNTRYID.COUNT>0  THEN -- i is even
	   FOR I IN 1..I_CNTRYID.COUNT LOOP
		 EXIT WHEN I_CNTRYID(I)= -1 ;
		 IF I = 1 THEN
		   V_country_str:=I_CNTRYID(I);
		   ELSE
		   V_country_str := V_country_str||','||I_CNTRYID(I);
		 END IF;
		 END LOOP;
	  END IF;     
	   
	  IF V_country_str IS NOT NULL THEN
		DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND CNTR.COUNTRYID IN (' || V_country_str ||')';
	  END IF;
	  
	  
	  
	  IF I_FIRSTNAME          IS NOT NULL THEN -- i is even
		DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UPPER(pkg_encrypt.fn_decrypt (UU.FIRSTNAME)) LIKE UPPER(''%' || UPPER(TRIM(I_FIRSTNAME))

	||'%'')';
	  END IF;
	  IF I_LASTNAME           IS NOT NULL THEN -- i is even
		DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UPPER(pkg_encrypt.fn_decrypt (UU.LASTNAME)) LIKE UPPER(''%' || UPPER(TRIM(I_LASTNAME))

	||'%'')';
	  END IF;
	 

	/* IF I_FACILITYNAME       IS NOT NULL THEN -- i is even/
		DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UPPER(FAC.FACILITYNAME) LIKE UPPER(''%' || UPPER(TRIM

	(Replace(I_FACILITYNAME,'''',''''''))) ||'%'')';
	  END IF;
	  IF I_DEPARTMENTNAME     IS NOT NULL THEN -- i is even/
		DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UPPER(FAC.FACILITYNAME) LIKE UPPER(''%' || UPPER(TRIM

	(I_DEPARTMENTNAME)) ||'%'')';
	END IF;*/

	IF I_FACILITY_DEPT_NAME  IS NOT NULL  THEN 
	  
	SELECT COUNT(A.FACILITYNAME) INTO V_FACILITYNAME FROM TBL_FACILITIES A WHERE A.FACILITYNAME= I_FACILITY_DEPT_NAME;

	IF V_FACILITYNAME > 0 THEN
	 
	 DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UPPER(FAC.FACILITYNAME) LIKE UPPER(''%' || UPPER(TRIM

	(Replace(I_FACILITY_DEPT_NAME,'''',''''''))) ||'%'')'; 

	ELSE 
	  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UPPER(FAC.DEPARTMENTNAME) LIKE UPPER(''%' || UPPER(TRIM

	(Replace(I_FACILITY_DEPT_NAME,'''',''''''))) ||'%'')';  

	END IF;
	END IF;

	  DYNMC_COUNTSQL_CLAUSE_PART:=DYNMC_SQL_CLAUSE_PART || ')';
	  IF I_SORTBY = 'FACILITY_DEPT_NAME' THEN
		V_ORDER := 'trim(lower(FACILITY_DEPT_NAME))';
	  ELSIF I_SORTBY = 'COUNTRYNAME' THEN
		V_ORDER     := 'trim(lower(COUNTRYNAME))';
	  ELSIF I_SORTBY = 'FIRSTNAME' THEN
		V_ORDER     := 'trim(lower(FIRSTNAME))';
	  ELSIF I_SORTBY = 'LASTNAME' THEN
		V_ORDER     := 'trim(lower(LASTNAME))';
	  ELSIF I_SORTBY = 'EMAIL' THEN
		V_ORDER     := 'trim(lower(EMAIL))';
	  ELSIF I_SORTBY = 'PHONE1' THEN
		V_ORDER     := 'trim(lower(PHONE1))';
	  ELSIF I_SORTBY = 'FACILITYID' THEN
		V_ORDER     := 'FACILITYID';
	  ELSIF I_SORTBY = 'TRANSCELERATEUSERID' THEN
		V_ORDER     := 'trim(lower(TRANSCELERATEUSERID))';
	   ELSE
		V_ORDER := 'trim(lower(FACILITY_DEPT_NAME)),trim(lower(pkg_encrypt.fn_decrypt (LASTNAME)))';
	  END IF;

	  IF I_SORTBY               IS NOT NULL THEN
		DYNMC_SQL_CLAUSE_PART   := DYNMC_SQL_CLAUSE_PART || ' ORDER BY ' || TO_CHAR(V_ORDER);
	  ELSE
		DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' ORDER BY ' || TO_CHAR(V_ORDER);
	  END IF;
	  IF I_ORDRBY             IS NOT NULL THEN
		DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' ' || I_ORDRBY;
	  END IF;
	  PAG_END_ROW           := I_OFFSET + I_LIMIT - 1;
	  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' ) TEMP  WHERE ROWNUM <= ' || TO_CHAR(PAG_END_ROW) ||' ) WHERE RNUM

	>='|| TO_CHAR(I_OFFSET) ;
	  --print statement for logging
	 -- dbms_output.put_line(STC_SQL_PART);
	 -- dbms_output.put_line(DYNMC_SQL_CLAUSE_PART);
	  COUNT_QUERY:= STC_COUNTSQL_PART||DYNMC_COUNTSQL_CLAUSE_PART;
	  --dbms_output.put_line(COUNT_QUERY);
	  EXECUTE IMMEDIATE COUNT_QUERY INTO O_COUNT;
	  --COUNT_QUERY;
	  dbms_output.put_line(STC_SQL_PART || DYNMC_SQL_CLAUSE_PART);
	  --open cursor
	  OPEN SITEUSRASSOCFACREP FOR STC_SQL_PART || DYNMC_SQL_CLAUSE_PART;
	EXCEPTION
	WHEN OTHERS THEN
	  dbms_output.put_line('Unhandled Error!');
	END SITE_USR_ASOC_FAC_PROC;

	/* POTENTIAL INVESTIGATOR REGISTRATION REPORT PROCEDURE - END */
	-- Package Body for study Close Report
	PROCEDURE PROC_STUDYCLOSE_REPORT(
		p_USERID  IN NUMBER,
		p_STUDYID IN NUMBER,
		p_SITEID IN NUMBER,
		p_COUNTRYCD  IN VARCHAR2,
		p_OFFSET  IN NUMBER,
		p_LIMIT   IN NUMBER,
		p_ORDRBY  IN VARCHAR2,
		p_SORTBY  IN VARCHAR2,
		p_STUDYCLOSEREC OUT SYS_REFCURSOR,
		P_COUNT OUT NUMBER)
	  /*********************************************************************
	  /**
	  /** Procedure:   PROC_STUDYCLOSE_REPORT
	  /** Description: POPULATES STUDY CLOSE REPORT
	  /** Author:      Cognizant
	  /** Out:
	  /** In:
	  /*********************************************************************/
	AS
	  V_MSG VARCHAR2(500);
	  V_QUERY VARCHAR2(9999);
	  V_QUERY_WHERECLAUSE VARCHAR2(9999);
	  V_FINAL_QUERY VARCHAR2(9999);
	  V_COUNT_START        VARCHAR2(9999 BYTE);
	  V_FULL_START         VARCHAR2(9999 BYTE);
	  V_ORDER              VARCHAR2(20);
	  V_ENDINDEX		       NUMBER;
	  V_STARTINDEX         NUMBER;

	BEGIN

	  V_STARTINDEX := p_OFFSET + 1;
	  IF p_OFFSET = 0 THEN
			 V_STARTINDEX := p_OFFSET;
		END IF;
	  V_ENDINDEX := p_LIMIT + p_OFFSET;

	  /*GET STUDY CLOSE REPORT*/

	  V_COUNT_START          := 'SELECT COUNT(1) FROM (';
	  V_FULL_START           := 'SELECT * FROM (SELECT ROWNUM RNUM , TEMP.* FROM ( ';

	  V_QUERY := 'SELECT DISTINCT usrp.USERID,
		  usrp.TRANSCELERATEUSERID,
		  pkg_encrypt.fn_decrypt (usrp.FIRSTNAME) FIRSTNAME,
		  pkg_encrypt.fn_decrypt (usrp.LASTNAME) LASTNAME,
		  pkg_encrypt.fn_decrypt (usrp.FIRSTNAME) || '' '' || pkg_encrypt.fn_decrypt (usrp.LASTNAME) USERNAME,
		  urm.ROLEID,
		  rols.ROLENAME,
		  usrcon.CONTACTID,
		  pkg_encrypt.fn_decrypt (usrcon.EMAIL) EMAIL,
		  pkg_encrypt.fn_decrypt (usrcon.PHONE1) PHONE1,
		  pkg_encrypt.fn_decrypt (usrcon.PHONE1EXT) PHONE1EXT,
		  urm.STUDYID,
		  sty.STUDYNAME,
		  urm.SITEID,
		  sit.SITENAME,
		  org.ORGNAME,
		  sc.OVERALLSTATUS,
		  sc.STUDYCLOSEDDT,
		  sty.ACTUALSTUDYCOMPFINALDT,
		  conu.COUNTRYNAME COUNTRYCD
		FROM TBL_STUDYCLOSUREMAP sc,
		  TBL_USERROLEMAP urm,
		  TBL_STUDY sty,
		  TBL_SITE sit,
		  TBL_USERPROFILES usrp,
		  TBL_ROLES rols,
		  TBL_CONTACT usrcon,
		  TBL_COUNTRIES conu,
		  TBL_PROGRAM prg,
		  TBL_ORGANIZATION org
		';

		V_QUERY_WHERECLAUSE := ' WHERE org.ORGID = prg.ORGID
		AND prg.PROGID       = sty.PROGID
		AND sty.STUDYID      = urm.studyid
		AND sit.SITEID       = urm.SITEID
		AND urm.studyid      = sc.studyid
		AND conu.COUNTRYCD 	 = usrcon.COUNTRYCD
		AND usrcon.CONTACTID = usrp.CONTACTID
		AND org.ORGID        = usrp.ORGID
		AND usrp.USERID      = urm.USERID
		AND rols.ROLEID      = urm.ROLEID
		AND sc.ISSTUDYCLOSE  = ''Y''';

		IF p_STUDYID IS NOT NULL THEN
			V_QUERY_WHERECLAUSE := V_QUERY_WHERECLAUSE || ' AND sc.STUDYID = ' || TO_CHAR(p_STUDYID);
		END IF;

		IF p_SITEID IS NOT NULL THEN
			V_QUERY_WHERECLAUSE := V_QUERY_WHERECLAUSE || ' AND sit.SITEID = ' || TO_CHAR(p_SITEID);
		END IF;

		IF p_COUNTRYCD IS NOT NULL THEN
			V_QUERY_WHERECLAUSE := V_QUERY_WHERECLAUSE || ' AND usrcon.COUNTRYCD = ''' || TO_CHAR(p_COUNTRYCD) || '''';
		END IF;

		IF p_USERID IS NOT NULL THEN
			V_QUERY_WHERECLAUSE := V_QUERY_WHERECLAUSE || ' AND org.ORGID = (SELECT inusrp.ORGID FROM TBL_USERPROFILES 

	inusrp WHERE inusrp.USERID = ' || TO_CHAR(p_USERID) || ' )';
		END IF;

		  IF P_SORTBY = 'USERNAME' THEN
			V_ORDER := 'USERNAME';
		  ELSIF P_SORTBY = 'EMAIL' THEN
			V_ORDER     := 'pkg_encrypt.fn_decrypt (usrcon.EMAIL)';
		  ELSIF P_SORTBY = 'PHONE' THEN
			V_ORDER     := 'pkg_encrypt.fn_decrypt (usrcon.PHONE1)';
		  ELSIF P_SORTBY = 'ROLENAME' THEN
			V_ORDER     := 'rols.ROLENAME';
		  ELSIF P_SORTBY = 'STARTDATE' THEN
			V_ORDER     := 'sc.STUDYCLOSEDDT';
		  ELSIF P_SORTBY = 'ENDDATE' THEN
			V_ORDER     := 'sty.ACTUALSTUDYCOMPFINALDT';
		  ELSIF P_SORTBY = 'COUNTRYCD' THEN
			V_ORDER     := 'conu.COUNTRYNAME';
		  ELSIF P_SORTBY = 'STUDYID' THEN
			V_ORDER     := 'urm.STUDYID';
		  ELSE
			V_ORDER := 'urm.STUDYID';
		  END IF;

		--V_FINAL_QUERY := V_QUERY || V_QUERY_WHERECLAUSE;

		V_FULL_START := V_FULL_START || V_QUERY || V_QUERY_WHERECLAUSE || ' ORDER BY ' || V_ORDER||' '||P_ORDRBY ||') TEMP  

	WHERE ROWNUM <= ' || TO_CHAR(V_ENDINDEX) ||' ) WHERE RNUM >='|| TO_CHAR(V_STARTINDEX) ;

		V_COUNT_START := V_COUNT_START || V_QUERY || V_QUERY_WHERECLAUSE || ' ORDER BY ' || V_ORDER||' '||P_ORDRBY ||' )';

	--	DBMS_OUTPUT.PUT_LINE(V_FULL_START);

		--DBMS_OUTPUT.PUT_LINE(V_FINAL_QUERY);

		OPEN p_STUDYCLOSEREC FOR V_FULL_START;

		EXECUTE IMMEDIATE V_COUNT_START INTO P_COUNT;

		--DBMS_OUTPUT.PUT_LINE(P_COUNT);

	EXCEPTION
	  /*when no data found then log exception*/
	WHEN NO_DATA_FOUND THEN
	  V_MSG := 'NO DATA FOUND';
	  DBMS_OUTPUT.PUT_LINE(V_MSG);
	  RETURN;
	  /*if Primary key violation then log exception*/
	WHEN DUP_VAL_ON_INDEX THEN
	  V_MSG := SQLERRM;
	  DBMS_OUTPUT.PUT_LINE(V_MSG);
	  RETURN;
	  /*if other exception then log exception*/
	WHEN OTHERS THEN
	  V_MSG := SQLERRM;
	  DBMS_OUTPUT.PUT_LINE(V_MSG);
	  RETURN;
	END PROC_STUDYCLOSE_REPORT;

	PROCEDURE SP_SiteUser_Registration(
		  I_FIRSTNAME      IN VARCHAR2,
		  I_LASTNAME       IN VARCHAR2,
		  I_TRANSUSERID    IN VARCHAR2,
		  I_EMAIL          IN VARCHAR2,
		--  I_ACTSTATUS      IN VARCHAR2,
		  I_INVITE_START_DATE    IN DATE,
		  I_INVITE_END_DATE      IN DATE,
		  I_REG_START_DATE       IN DATE,
		  I_REG_END_DATE         IN DATE,
		  I_DEACTIVE_START_DATE  IN DATE,
		  I_DEACTIVE_END_DATE    IN DATE,
		  I_FACILITY_NAME        IN VARCHAR2,
		  I_DEPT_NAME            IN VARCHAR2,
		--  I_ACTFROM_DATE   IN DATE,
		--  I_ACTTO_DATE     IN DATE,
		--  I_STUDYIDS       IN NUM_ARRAY,
		--  I_SITEIDS        IN NUM_ARRAY,
		  I_ROLEID         IN NUMBER,
		  I_STATEID        IN NUM_ARRAY,
		  I_LOGGEDINUSERID IN NUMBER,
		 -- I_USERID         IN NUMBER,
		  I_COUNTRYID      IN NUM_ARRAY,
		--  I_ORGID          IN NUMBER,
		--  I_DEGSITECNTCT   IN VARCHAR2,
		--  I_INVFROM_DATE   IN DATE,
		--  I_INVTO_DATE     IN DATE,
		  I_OFFSET         IN NUMBER,
		  I_LIMIT          IN NUMBER,
		  I_ORDRBY         IN VARCHAR2,
		  I_SORTBY         IN VARCHAR2,
		  I_COUNT OUT NUMBER,
		  USERACCESSREP OUT SYS_REFCURSOR)
	  AS
		STC_SQL_PART          VARCHAR2(9999 BYTE);
		DYNMC_SQL_CLAUSE_PART VARCHAR2(9999 BYTE);
		PAG_END_ROW           NUMBER;
		V_COUNT_QUERY         VARCHAR2(9999 BYTE);
		STUDY_IDS_STR         VARCHAR2(9999 BYTE);
		SITE_IDS_STR          VARCHAR2(9999 BYTE);
		V_COUNTRYID          VARCHAR2(9999 BYTE);
	  TEMP_SORTBY            VARCHAR2(9999 BYTE);
		TEMP_ORDRBY              VARCHAR2(9999 BYTE);
	  V_ACTFROM_DATE      VARCHAR2(20);
		V_ACTTO_DATE        VARCHAR2(20);
		V_ROLE_COUNT            NUMBER;
		V_I_STATEID_STR         VARCHAR2(32000);
		v_orgflag            VARCHAR2(1);
		V_ROLENAME           VARCHAR2(100);

		TYPE s_org IS VARRAY(200) OF varchar2(1000);
		l_org s_org:=s_org();
		ORG_IDS_STR   VARCHAR2(32000);

	  BEGIN
	  V_ROLE_COUNT := 0;
	  IF (I_LOGGEDINUSERID       IS NOT NULL AND I_LOGGEDINUSERID > 0) THEN

	  SELECT COUNT(*) INTO V_ROLE_COUNT
		  FROM TBL_USERROLEMAP usrrole
		  LEFT JOIN TBL_ROLES tblroles
		  ON usrrole.ROLEID        = tblroles.ROLEID
		  WHERE tblroles.ROLETYPEID=1
		  AND usrrole.EFFECTIVESTARTDATE    <= SYSDATE
		  AND (usrrole.EFFECTIVEENDDATE >= SYSDATE
		  OR usrrole.EFFECTIVEENDDATE   IS NULL) AND usrrole.USERID=I_LOGGEDINUSERID;
	  END IF;
		TEMP_ORDRBY := '';

	  IF I_SORTBY    = 'TRANSCELERATEUSERID' THEN
		TEMP_SORTBY := 'UPPER(TRIM(TRANSCELERATEUSERID))';
	  ELSIF I_SORTBY = 'FIRSTNAME' THEN
		TEMP_SORTBY := 'UPPER(TRIM(FIRSTNAME))';
	  ELSIF I_SORTBY = 'LASTNAME' THEN
		TEMP_SORTBY := 'UPPER(TRIM(LASTNAME))';
	  ELSIF I_SORTBY = 'ROLENAME' THEN
		TEMP_SORTBY := 'UPPER(TRIM(ROLENAME))';
	  ELSIF I_SORTBY = 'STUDYNAME' THEN
		TEMP_SORTBY := 'UPPER(TRIM(STUDYNAME))';
	  ELSIF I_SORTBY = 'ORGNAME' THEN
		TEMP_SORTBY := 'UPPER(TRIM(ORGNAME))';
	  ELSIF I_SORTBY = 'COUNTRYNAME' THEN
		TEMP_SORTBY := 'UPPER(TRIM(COUNTRYNAME))';
	  ELSIF I_SORTBY = 'SITENAME' THEN
		TEMP_SORTBY := 'UPPER(TRIM(SITENAME))';
	  ELSIF I_SORTBY = 'ISACTIVE' THEN
		TEMP_SORTBY := 'UPPER(TRIM(ISACTIVE))';
	  ELSIF I_SORTBY = 'SITEACTSTATUS' THEN
		TEMP_SORTBY := 'UPPER(TRIM(SITEACTSTATUS))';
	  ELSIF I_SORTBY = 'COUNTRYNAME, LASTNAME' THEN
		TEMP_SORTBY := 'COUNTRYNAME, UPPER(TRIM(LASTNAME))';
	   ELSIF I_SORTBY = 'EMAIL' THEN
		TEMP_SORTBY := 'UPPER(EMAIL)';
	   ELSIF I_SORTBY = 'ROLEID' THEN
		TEMP_SORTBY := 'ROLEID';
	   ELSIF I_SORTBY = 'ADDRESS' THEN
		TEMP_SORTBY := 'UPPER(ADDRESS)';
	ELSIF I_SORTBY = 'STATENAME' THEN
		TEMP_SORTBY := 'UPPER(STATENAME)';
	ELSIF I_SORTBY = 'PHONE1' THEN
		TEMP_SORTBY := 'UPPER(PHONE1)';
	ELSIF I_SORTBY = 'SENTDATE' THEN
		TEMP_SORTBY := 'SENTDATE';
	ELSIF I_SORTBY = 'INVITE_BY' THEN
		TEMP_SORTBY := 'UPPER(INVITE_BY)';
	ELSIF I_SORTBY = 'REGISTRATIONDATE' THEN
		TEMP_SORTBY := 'REGISTRATIONDATE';
	ELSIF I_SORTBY = 'FIRST_LOGIN_DATE' THEN
		TEMP_SORTBY := 'FIRST_LOGIN_DATE';
	ELSIF I_SORTBY = 'TRNG_COMPLETION_DATE' THEN
		TEMP_SORTBY := 'TRNG_COMPLETION_DATE';
	ELSIF I_SORTBY = 'USER_PROFILE_STATUS' THEN
		TEMP_SORTBY := 'UPPER(USER_PROFILE_STATUS)';
	ELSIF I_SORTBY = 'CV_GENERATION_DATE' THEN
		TEMP_SORTBY := 'CV_GENERATION_DATE';
	ELSIF I_SORTBY = 'FACILITYNAME' THEN
		TEMP_SORTBY := 'UPPER(FACILITYNAME)';
	ELSIF I_SORTBY = 'DEPARTMENTNAME' THEN
		TEMP_SORTBY := 'UPPER(DEPARTMENTNAME)';
	ELSIF I_SORTBY = 'DEPARTMENT_TYPE' THEN
		TEMP_SORTBY := 'UPPER(DEPARTMENT_TYPE)';
	ELSIF I_SORTBY = 'SIP_USER_ID' THEN
		TEMP_SORTBY := 'UPPER(SIP_USER_ID)';
	ELSIF I_SORTBY ='USER_PROFILE_STATUS' THEN
		TEMP_SORTBY := 'UPPER(User_Profile_Status)' ;   
	ELSIF I_SORTBY = 'DEACTIVATION_DATE' THEN
		TEMP_SORTBY := 'DEACTIVATION_DATE';

	  ELSE
		TEMP_SORTBY := 'UPPER(LASTNAME),UPPER(FIRSTNAME),UPPER(EMAIL),FACILITYID';
		--INSERT INTO temp_table VALUES (I_SORTBY);
	  END IF;
	--    TEMP_SORTBY:=TEMP_SORTBY||' ,FACILITYID ';
	if I_LOGGEDINUSERID is not null then
	select a.issponsor into v_orgflag from tbl_userprofiles a where a.userid=I_LOGGEDINUSERID;
	end if;
	 STC_SQL_PART :=
		'SELECT DISTINCT UP.TRANSCELERATEUSERID SIP_User_ID,
	  pkg_encrypt.fn_decrypt (UP.LASTNAME) LASTNAME,
	  pkg_encrypt.fn_decrypt (UP.FIRSTNAME) FIRSTNAME,
	  pkg_encrypt.fn_decrypt (CNT.Email) Email,
	  case when CNT.Institution is null  AND pkg_encrypt.fn_decrypt(CNT.Address2) is not null and pkg_encrypt.fn_decrypt(CNT.Address3) is not null then
	  pkg_encrypt.fn_decrypt(CNT.Address1) || '', '' ||
		   pkg_encrypt.fn_decrypt(CNT.Address2) || '', '' ||
		   pkg_encrypt.fn_decrypt(CNT.Address3) || '', '' ||cnt.city||'', ''||pkg_encrypt.fn_decrypt(CNT.POSTALCODE)
	   
	   when CNT.Institution is null AND  pkg_encrypt.fn_decrypt(CNT.Address2) is null and pkg_encrypt.fn_decrypt(CNT.Address3) is not null then
		   pkg_encrypt.fn_decrypt(CNT.Address1) || '', '' || pkg_encrypt.fn_decrypt(CNT.Address3) || '', '' ||cnt.city||'', ''||pkg_encrypt.fn_decrypt(CNT.POSTALCODE)
		 
		 when CNT.Institution is not null AND pkg_encrypt.fn_decrypt(CNT.Address2) is not null and pkg_encrypt.fn_decrypt(CNT.Address3) is null then
		   CNT.Institution|| '', '' ||pkg_encrypt.fn_decrypt(CNT.Address1) || '', '' ||cnt.city||'', ''||pkg_encrypt.fn_decrypt(CNT.POSTALCODE)
	   
	  when CNT.Institution is null AND  pkg_encrypt.fn_decrypt(CNT.Address2) is null and pkg_encrypt.fn_decrypt(CNT.Address3) is  null then
		   pkg_encrypt.fn_decrypt(CNT.Address1) ||'', '' ||cnt.city||'', ''||pkg_encrypt.fn_decrypt(CNT.POSTALCODE)
		 
	  when CNT.Institution is not null  AND pkg_encrypt.fn_decrypt(CNT.Address2) is not null and pkg_encrypt.fn_decrypt(CNT.Address3) is not null then
		 CNT.Institution || '', '' ||pkg_encrypt.fn_decrypt(CNT.Address1) || '', '' ||
		   pkg_encrypt.fn_decrypt(CNT.Address2) || '', '' ||
		   pkg_encrypt.fn_decrypt(CNT.Address3) || '', '' ||cnt.city||'', ''||pkg_encrypt.fn_decrypt(CNT.POSTALCODE)
	   
	   when CNT.Institution is not null AND  pkg_encrypt.fn_decrypt(CNT.Address2) is null and pkg_encrypt.fn_decrypt(CNT.Address3) is not null then
		   CNT.Institution || '', '' ||pkg_encrypt.fn_decrypt(CNT.Address1) || '', '' || pkg_encrypt.fn_decrypt(CNT.Address3) || '', '' ||cnt.city||'', ''||pkg_encrypt.fn_decrypt(CNT.POSTALCODE)
		 
	   when CNT.Institution is not null AND  pkg_encrypt.fn_decrypt(CNT.Address2) is not  null and pkg_encrypt.fn_decrypt(CNT.Address3) is not null then
		   CNT.Institution || '', '' ||pkg_encrypt.fn_decrypt(CNT.Address1) || '', '' || pkg_encrypt.fn_decrypt(CNT.Address3) || '', '' ||cnt.city||'', ''||pkg_encrypt.fn_decrypt(CNT.POSTALCODE)
		 
	   else 
		 
		   pkg_encrypt.fn_decrypt(CNT.Address1) || '' '' ||
		   pkg_encrypt.fn_decrypt(CNT.Address2) || '' '' ||
		   pkg_encrypt.fn_decrypt(CNT.Address3) || '' '' ||cnt.city||'', ''||pkg_encrypt.fn_decrypt(CNT.POSTALCODE)
		   end Address,
		   
	  st.statename Statename,
	  ST.STATEID,
	  CONTRY.COUNTRYNAME COUNTRYNAME,
	 CNT.Maindaytime PHONE1,
	  REG.SENTDATE SENTDATE,
	  (SELECT DISTINCT too.orgname
	  FROM tbl_organization too
	  WHERE too.orgid=reg.sentbyorganization
	  ) Invite_By,
	  REG.Registrationdate Registrationdate,
	  UP.FIRST_LOGIN_DATE FIRST_LOGIN_DATE,
	  autolog.prereqtraining_completed_date TRNG_COMPLETION_DATE,
	  NVL(UP.profile_completion_status,''N'') AS User_Profile_Status,
	  (SELECT MAX(DOC1.CREATEDDT)
	  FROM TBL_DOCUMENTS DOC1
	  WHERE UP.USERID    = DOC1.DOCUSERID
	  AND DOC1.ISDELETED = ''N''
	  AND DOC1.DOCTYPECD =1
	  ) AS CV_Generation_date,
	  FAC.Facilityname facilityname,
	  FAC.departmentname departmentname,
	  FAC.Facilityid,
	  FAC.Departmenttypeid,
	  dept.departmenttypename Department_Type,
	  up.ROLEID,
	  (SELECT ROLENAME FROM tbl_roles WHERE roleid=up.ROLEID
	  ) ROLENAME,
	  UP.ACTIVATIONENDDT Deactivation_Date,
	  (
	  CASE
		WHEN lower(UP.ISACTIVE) = lower(''Y'')
		THEN ''A''
		WHEN lower(UP.ISACTIVE) = lower(''N'')
		THEN ''I''
	  END) ISACTIVE
	FROM TBL_USERPROFILES UP
	LEFT JOIN TBL_USERROLEMAP URM
	ON URM.USERID = UP.USERID
	LEFT JOIN TBL_ROLES RLS
	ON URM.ROLEID = RLS.ROLEID
	AND up.roleid =rls.roleid
	Left join Tbl_Orgsitestaffmap orgmap
	on Orgmap.Sitestaffuserid = Up.Userid
	LEFT JOIN TBL_ORGANIZATION ORG
	ON orgmap.ORGID = ORG.ORGID
	LEFT JOIN TBL_CONTACT CNT
	ON UP.CONTACTID = CNT.CONTACTID
	LEFT JOIN TBL_COUNTRIES CONTRY
	ON CNT.COUNTRYCD = CONTRY.COUNTRYCD
	LEFT JOIN TBL_STATES ST
	ON ST.COUNTRYID=CONTRY.COUNTRYID
	AND ST.STATECD =CNT.STATE
	LEFT JOIN TBL_REGISTRATIONINVITE REG
	ON CNT.Email=reg.registeredemail
	LEFT JOIN Tbl_Irfacilityusermap irfacmap
	ON UP.userid=irfacmap.userid
	LEFT JOIN Tbl_Facilities fac
	ON irfacmap.facilityid=fac.facilityid
	LEFT JOIN Tbl_Departmenttype dept
	ON Fac.Departmenttypeid = Dept.Departmenttypeid
	LEFT JOIN TBL_AUTO_LOGIN autolog
	on REGEXP_SUBSTR (autolog.TRANSCELERATE_ID, ''[^@]+'')=up.transcelerateuserid';
	if v_orgflag='N' then
		DYNMC_SQL_CLAUSE_PART   := ' where (UP.ISSPONSOR = ''N''
	--AND UP.Isactive=''Y''
	AND REG.Isactive=''N''
	AND REG.Iscompleted=''Y''
	AND REG.Priority=''P''
	AND irfacmap.Isactive=''Y''
	)';
	else
	 DYNMC_SQL_CLAUSE_PART   := ' where (UP.ISSPONSOR = ''N''
	--AND UP.Isactive=''Y''
	AND REG.Isactive=''N''
	AND REG.Iscompleted=''Y''
	AND REG.Priority=''P''
	AND irfacmap.Isactive=''Y''
	or (UP.TRANSCELERATEUSERID  in (SELECT DISTINCT UP.TRANSCELERATEUSERID SIP_User_ID
	 FROM TBL_USERPROFILES UP where up.issponsor=''N'' ))) AND REGISTRATIONDATE  IS NOT NULL ';

	end if;

	/*IF I_LOGGEDINUSERID       IS NOT NULL AND I_LOGGEDINUSERID > 0 AND V_ROLE_COUNT > 0  AND v_orgflag='Y' THEN
	DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND ORG.ORGID = (select ORGID from TBL_USERPROFILES where USERID

	= ' || TO_CHAR(I_LOGGEDINUSERID) || ')';
	ELS*//*IF I_LOGGEDINUSERID       IS NOT NULL AND I_LOGGEDINUSERID > 0 AND v_orgflag='Y' THEN
	 DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND REGISTRATIONDATE  IS NOT NULL ';
		END IF;*/
	 --------Change start for site users
	/*  for j in 1 ..l_org.count loop
	  SELECT RTRIM (
			  XMLAGG (XMLELEMENT (e, orgid  || ',')).EXTRACT ('//text()'),
			  ',') bulk collect into  l_org from tbl_orgsitestaffmap where sitestaffuserid =P_LOGGEDINUSERID;

	dbms_output.put_line(l_org(j));*/
	 ------

	 /*IF I_LOGGEDINUSERID       IS NOT NULL  AND v_orgflag='N' THEN

	  SELECT RTRIM (
			  XMLAGG (XMLELEMENT (e, orgid  || ',')).EXTRACT ('//text()'),
			  ',') bulk collect into  l_org from tbl_orgsitestaffmap where sitestaffuserid =I_LOGGEDINUSERID;


	 IF l_org  IS NOT NULL AND l_org.count>0 THEN
		FOR i IN 1..l_org.count
		LOOP
		  IF i             = 1 THEN
			ORG_IDS_STR := l_org(i);
		  ELSE
			ORG_IDS_STR := ORG_IDS_STR || ',' || l_org(i);
		  END IF;

		END LOOP;

	  END IF;


	 IF  ORG_IDS_STR IS NOT NULL THEN

	DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND ORG.ORGID in ('||ORG_IDS_STR||')';
	END IF;
	end if;*/
	 ----------change end for site users
	 IF I_LOGGEDINUSERID       IS NOT NULL  AND v_orgflag='N' THEN

	 DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND  irfacmap.FACILITYID in (select FACILITYID from TBL_IRFACILITYUSERMAP where USERID='||I_LOGGEDINUSERID||' and ISACTIVE=''Y'' ) and irfacmap.ISACTIVE=''Y''';

	 END IF;

		IF I_FIRSTNAME          IS NOT NULL THEN
		  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND LOWER(pkg_encrypt.fn_decrypt (UP.FIRSTNAME)) LIKE LOWER(''%' || I_FIRSTNAME || '%'')';
		END IF;
		IF I_LASTNAME           IS NOT NULL THEN
		  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND LOWER(pkg_encrypt.fn_decrypt (UP.LASTNAME)) LIKE LOWER(''%' || I_LASTNAME || '%'')';
		END IF;
	  --  IF I_TRANSUSERID        IS NOT NULL THEN
		--  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UP.TRANSCELERATEUSERID =''' || I_TRANSUSERID || '''';
	   -- END IF;
		IF I_EMAIL              IS NOT NULL THEN
		  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND LOWER(pkg_encrypt.fn_decrypt (CNT.EMAIL)) LIKE LOWER(''%' || I_EMAIL || '%'')';
		END IF;

		 IF I_FACILITY_NAME        IS NOT NULL THEN
		  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART ||  ' AND LOWER(fac.FACILITYNAME) LIKE LOWER(''%' || Replace(I_FACILITY_NAME,'''','''''') || '%'')';
		END IF;

		 IF I_DEPT_NAME        IS NOT NULL THEN
		  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND LOWER(FAC.departmentname ) LIKE LOWER(''%' || Replace(I_DEPT_NAME,'''','''''') || '%'')';
		END IF;


	   IF I_ROLEID IS NOT NULL THEN

	   select rolename into V_ROLENAME from tbl_roles where ROLEID=I_ROLEID;

	   IF V_ROLENAME ='Investigator' THEN

	   DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UP.ROLEID = ' || (I_ROLEID);


	   ELSE

	   DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UP.ROLEID in (select roleid from TBL_ROLES WHERE ROLENAME<>''Investigator'')';

	   END IF;
	   END IF;

	IF I_STATEID IS NOT NULL AND I_STATEID.count >0 THEN
		  FOR i IN 1..I_STATEID.count
		  LOOP
			EXIT
		  WHEN I_STATEID(i) = -1;
			IF i             = 1 THEN
			  V_I_STATEID_STR := I_STATEID(i);
			ELSE
			  V_I_STATEID_STR := V_I_STATEID_STR || ',' || I_STATEID(i);
			END IF;
		  END LOOP;
		  end if;
		  if V_I_STATEID_STR is not null then
	   DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND ST.STATEID in (' || V_I_STATEID_STR||')';

		END IF;

	  /*  IF UPPER(I_ACTSTATUS)    = 'Y' THEN
		  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UP.ISACTIVE =''Y''';
		END IF;*/
	  /*  IF UPPER(I_ACTSTATUS)    = 'N' THEN
		  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UP.ISACTIVE =''N''';
		END IF;*/
	/*    IF I_ACTFROM_DATE       IS NOT NULL THEN
		 V_ACTFROM_DATE := TO_CHAR(I_ACTFROM_DATE,'dd-mon-yy HH24:MI:SS');
		 DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UP.ACTIVATIONSTARTDT   >= TO_DATE('''|| V_ACTFROM_DATE

	|| ''', ''dd-mon-yy HH24:MI:SS'')';--TO_DATE('''|| I_ACTFROM_DATE || ''', ''dd-mon-yy'')';
		END IF;
		IF I_ACTTO_DATE         IS NOT NULL THEN
		V_ACTTO_DATE := TO_CHAR(I_ACTTO_DATE,'dd-mon-yy HH24:MI:SS');
		DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UP.ACTIVATIONSTARTDT   <= TO_DATE('''|| V_ACTTO_DATE ||

	''', ''dd-mon-yy HH24:MI:SS'')';--TO_DATE('''|| I_ACTTO_DATE || ' 23:59:59' || ''', ''dd-mon-yy HH24:MI:SS'')';
		END IF;*/
	   /* IF I_STATEID IS NOT NULL AND I_STATEID.count >0 THEN
		  FOR i IN 1..I_STATEID.count
		  LOOP
			EXIT
		  WHEN I_STATEID(i) = -1;
			IF i             = 1 THEN
			  STUDY_IDS_STR := I_STATEID(i);
			ELSE
			  STUDY_IDS_STR := STUDY_IDS_STR || ',' || I_STATEID(i);
			END IF;
		  END LOOP;
		END IF;
		IF STUDY_IDS_STR        IS NOT NULL THEN
		  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND URM.STUDYID  IN(' || STUDY_IDS_STR || ')';
		END IF;
		IF I_SITEIDS IS NOT NULL AND I_SITEIDS.count >0 THEN
		  FOR i IN 1..I_SITEIDS.count
		  LOOP
			EXIT
		  WHEN I_SITEIDS(i) = -1;
			IF i            = 1 THEN
			  SITE_IDS_STR := I_SITEIDS(i);
			ELSE
			  SITE_IDS_STR := SITE_IDS_STR || ',' || I_SITEIDS(i);
			END IF;
		  END LOOP;
		END IF;
		IF SITE_IDS_STR         IS NOT NULL THEN
		  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND URM.SITEID  IN(' || SITE_IDS_STR || ')';
		END IF;*/

	  /*  IF UPPER(I_DEGSITECNTCT)    = 'Y' AND I_ROLEID IS NULL THEN
		DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND URM.ROLEID = 49';
	  ELSIF I_ROLEID IS NOT NULL AND UPPER(I_DEGSITECNTCT) = 'Y' THEN
		DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND (URM.ROLEID =' || TO_CHAR(I_ROLEID) || ' OR URM.ROLEID =

	49)';
	  ELSIF I_ROLEID IS NOT NULL THEN
		DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND URM.ROLEID =' || TO_CHAR(I_ROLEID);
	  END IF;*/

	--I_TRANSUSERID

	  /*  IF I_USERID             IS NOT NULL THEN
		  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UP.USERID  =' || TO_CHAR(I_USERID);
		END IF;*/

		/* IF I_LOGGEDINUSERID             IS NOT NULL THEN
		  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UP.USERID  =' || TO_CHAR(I_LOGGEDINUSERID);
		END IF;*/

			IF I_TRANSUSERID             IS NOT NULL THEN
		  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UP.TRANSCELERATEUSERID = ''' || TO_CHAR(I_TRANSUSERID)||'''';
		END IF;

	   IF I_INVITE_START_DATE  IS NOT NULL THEN

	   DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND REG.SENTDATE  >= TO_DATE('''|| I_INVITE_START_DATE ||

	''', ''dd-mon-yy HH24:MI:SS'')';
		END IF;

	  IF I_INVITE_END_DATE  IS NOT NULL THEN

	   DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND REG.SENTDATE  <= TO_DATE('''|| I_INVITE_END_DATE ||' 23:59:59'||

	''', ''dd-mon-yy HH24:MI:SS'')';
		END IF;


	IF I_DEACTIVE_START_DATE  IS NOT NULL THEN

	   DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UP.ACTIVATIONENDDT  >= TO_DATE('''|| I_DEACTIVE_START_DATE ||

	''', ''dd-mon-yy HH24:MI:SS'')';
		END IF;

		  IF I_DEACTIVE_END_DATE  IS NOT NULL THEN

	   DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UP.ACTIVATIONENDDT  <= TO_DATE('''|| I_DEACTIVE_END_DATE ||' 23:59:59'||

	''', ''dd-mon-yy HH24:MI:SS'')';
		END IF;


	  IF  I_REG_START_DATE  IS NOT NULL THEN

	   DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND REG.Registrationdate  >= TO_DATE('''|| I_REG_START_DATE ||

	''', ''dd-mon-yy HH24:MI:SS'')';
		END IF;

	 IF  I_REG_END_DATE  IS NOT NULL THEN

	   DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND REG.Registrationdate  <= TO_DATE('''|| I_REG_END_DATE ||' 23:59:59'||

	''', ''dd-mon-yy HH24:MI:SS'')';
		END IF;


		IF I_COUNTRYID   IS NOT NULL AND I_COUNTRYID.COUNT>0 THEN


		   FOR i IN 1..I_COUNTRYID.count
		  LOOP
			EXIT
		  WHEN I_COUNTRYID(i) = -1;
			IF i            = 1 THEN
			  V_COUNTRYID := I_COUNTRYID(i);
			ELSE
			  V_COUNTRYID := V_COUNTRYID || ',' || I_COUNTRYID(i);
			END IF;
		  END LOOP;

			IF V_COUNTRYID IS NOT NULL  THEN


			/*STC_SQL_PART := STC_SQL_PART || ' LEFT JOIN TBL_CONTACT CNT2 ON SITE.CONTACTID = CNT2.CONTACTID
			LEFT JOIN TBL_COUNTRIES CONTRY2 ON CNT2.COUNTRYCD = CONTRY2.COUNTRYCD';*/
			DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND CONTRY.COUNTRYID  in (' || TO_CHAR(V_COUNTRYID)||')';

		 end if;
		END IF;

	 /*   IF I_ORGID              IS NOT NULL THEN
		  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND URM.STUDYID in (select STUDYID from TBL_STUDY where PROGID in

	(
	select PROGID from TBL_PROGRAM where ORGID =' || TO_CHAR(I_ORGID) || '))';
		END IF;*/

		IF I_ORDRBY             IS NOT NULL THEN
		  TEMP_ORDRBY := ' ' || I_ORDRBY;
		END IF;



		IF TEMP_SORTBY             IS NOT NULL AND TEMP_SORTBY = 'STUDYID' THEN
		  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' ORDER BY ' || TEMP_SORTBY || TEMP_ORDRBY;



		ELSIF TEMP_SORTBY             IS NOT NULL AND TEMP_SORTBY <> 'STUDYID' THEN
		  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' ORDER BY ' || TEMP_SORTBY || TEMP_ORDRBY ;--|| ', STUDYID ';
		ELSE
		  DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' ORDER BY COUNTRYNAME' || TEMP_ORDRBY || ', UPPER(TRIM(LASTNAME)) ';
		END IF;

		V_COUNT_QUERY := 'select count(1) from (' || STC_SQL_PART || DYNMC_SQL_CLAUSE_PART || ')';
		--dbms_output.put_line(V_COUNT_QUERY);
		-- INSERT INTO temp_table VALUES (V_COUNT_QUERY);
		--- INSERT INTO temp_table VALUES (null,V_COUNT_QUERY);
		--  commit;

		EXECUTE IMMEDIATE V_COUNT_QUERY INTO I_COUNT;
		STC_SQL_PART          := 'SELECT * FROM (SELECT ROWNUM RNUM , TEMP.* FROM (' || STC_SQL_PART;
		PAG_END_ROW           := I_OFFSET + I_LIMIT - 1;
		DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' ) TEMP  WHERE ROWNUM <= ' || TO_CHAR(PAG_END_ROW) ||' ) WHERE RNUM

	>='|| TO_CHAR(I_OFFSET) ;
	   -- dbms_output.put_line(STC_SQL_PART || DYNMC_SQL_CLAUSE_PART);
	   -- dbms_output.put_line(DYNMC_SQL_CLAUSE_PART);
	   --  INSERT INTO temp_table VALUES (DYNMC_SQL_CLAUSE_PART);
		-- commit;
		OPEN USERACCESSREP FOR STC_SQL_PART || DYNMC_SQL_CLAUSE_PART;
	  END SP_SiteUser_Registration;




	/******************************************************************************
	  Object_name - PROC_PLATFORMDIMENSION_REPORT
	  Purpose - Procedure to fetch overall platform diemnsion report as per search criteria
	  *******************************************************************************/
	PROCEDURE PROC_PLATFORMDIMENSION_REPORT(
		p_USERID IN NUMBER,
		p_ORGID  IN NUMBER,
		P_STUDYCNT OUT NUMBER,
		P_ASSOUSRCNT OUT NUMBER,
		P_NOTASSOUSRCNT OUT NUMBER,
		P_NOTACCEPTDTCCNT OUT NUMBER)
	  /*********************************************************************
	  /**
	  /** Procedure:   PROC_PLATFORMDIMENSION_REPORT
	  /** Description: POPULATES OVERALL PLATFORM DIMENSION_REPORT
	  /** Author:      Cognizant
	  /** Out:
	  /** In:
	  /*********************************************************************/
	AS
	  V_MSG                          VARCHAR2(500);
	  V_STUDYCNT_QUERY               VARCHAR2(9999);
	  V_STUDYCNT_QUERY_WH_CLS        VARCHAR2(9999);
	  V_FINAL_ASSOUSRCNT_QUERY       VARCHAR2(9999);
	  V_ASSOUSRCNT_QUERY             VARCHAR2(9999);
	  V_ASSOUSRCNT_QUERY_WH_CLS      VARCHAR2(9999);
	  V_NOTASSOUSRCNT_QUERY          VARCHAR2(9999);
	  V_NOTASSOUSRCNT_QUERY_WH_CLS   VARCHAR2(9999);
	  V_NOTACCEPTDTCCNT_QUERY        VARCHAR2(9999);
	  V_NOTACCEPTDTCCNT_QUERY_SITUSR VARCHAR2(9999);
	  V_TCPPORGSPONSORUSER  NUMBER;
	  V_TCPPORGSITEUSER  NUMBER;

	  V_ASSOSPUSRCNT_QUERY             VARCHAR2(9999);
	  V_ASSOSPUSRCNT_QUERY_WH_CLS      VARCHAR2(9999);
	  V_URRMASSOUSERCNT NUMBER;
	  V_ASSOSPONSRUSRCNT NUMBER;
	BEGIN


	  /*GET OVERALL PLATFORM DIMENSION_REPORT*/
	  V_STUDYCNT_QUERY          := 'SELECT
	COUNT(1)
	FROM TBL_STUDY sty,
	TBL_PROGRAM prg,
	TBL_ORGANIZATION org
	WHERE org.ORGID = prg.ORGID
	AND prg.PROGID  = sty.PROGID
	AND sty.ISACTIVE = ''Y''';
	  IF p_ORGID                IS NOT NULL THEN
		V_STUDYCNT_QUERY_WH_CLS := ' AND org.ORGID = ' || TO_CHAR(p_ORGID);
		V_STUDYCNT_QUERY        := V_STUDYCNT_QUERY || V_STUDYCNT_QUERY_WH_CLS;
	  END IF;
	  EXECUTE IMMEDIATE V_STUDYCNT_QUERY INTO P_STUDYCNT;

	  V_ASSOUSRCNT_QUERY          := 'SELECT usrp.USERID,
		  usrp.TRANSCELERATEUSERID,
		  pkg_encrypt.fn_decrypt (usrp.FIRSTNAME) FIRSTNAME,
		  pkg_encrypt.fn_decrypt (usrp.LASTNAME) LASTNAME,
		  pkg_encrypt.fn_decrypt (usrcon.PHONE1) PHONE1,
		  pkg_encrypt.fn_decrypt (usrcon.PHONE1EXT) PHONE1EXT,
		  pkg_encrypt.fn_decrypt (usrcon.PHONE2) PHONE2,
		  pkg_encrypt.fn_decrypt (usrcon.PHONE2EXT) PHONE2EXT,
		  pkg_encrypt.fn_decrypt (usrcon.EMAIL) EMAIL
		FROM TBL_USERROLEMAP usrrm
		JOIN TBL_USERPROFILES usrp
		ON usrrm.USERID = usrp.USERID
		JOIN TBL_CONTACT usrcon
		ON usrp.CONTACTID = usrcon.CONTACTID
		JOIN TBL_STUDY std
		ON usrrm.STUDYID = std.STUDYID
		JOIN TBL_PROGRAM prg
		ON std.PROGID = prg.PROGID
		JOIN TBL_ORGANIZATION org
		ON prg.ORGID                                    = org.ORGID
		WHERE (usrrm.EFFECTIVEENDDATE                  IS NULL
		OR TO_DATE(usrrm.EFFECTIVEENDDATE,''dd-mon-yy HH24:MI:SS'') >= TO_DATE(sysdate,''dd-mon-yy HH24:MI:SS''))
		AND std.ISACTIVE                                = ''Y''';

	V_ASSOSPUSRCNT_QUERY := 'SELECT usrp.USERID,
		  usrp.TRANSCELERATEUSERID,
		  pkg_encrypt.fn_decrypt (usrp.FIRSTNAME) FIRSTNAME,
		  pkg_encrypt.fn_decrypt (usrp.LASTNAME) LASTNAME,
		  pkg_encrypt.fn_decrypt (usrcon.PHONE1) PHONE1,
		  pkg_encrypt.fn_decrypt (usrcon.PHONE1EXT) PHONE1EXT,
		  pkg_encrypt.fn_decrypt (usrcon.PHONE2) PHONE2,
		  pkg_encrypt.fn_decrypt (usrcon.PHONE2EXT) PHONE2EXT,
		  pkg_encrypt.fn_decrypt (usrcon.EMAIL) EMAIL
		FROM TBL_USERROLEMAP usrrm
		JOIN TBL_USERPROFILES usrp
		ON usrrm.USERID = usrp.USERID
		JOIN TBL_CONTACT usrcon
		ON usrp.CONTACTID = usrcon.CONTACTID
		JOIN TBL_ROLES rol
		ON usrrm.ROLEID      = rol.ROLEID
		WHERE usrrm.STUDYID IS NULL
		AND rol.ROLETYPEID   =3';

	  IF p_ORGID                  IS NOT NULL THEN

		V_ASSOUSRCNT_QUERY_WH_CLS := ' AND org.ORGID = ' || TO_CHAR(p_ORGID);
		V_ASSOUSRCNT_QUERY        := V_ASSOUSRCNT_QUERY || V_ASSOUSRCNT_QUERY_WH_CLS;

	  V_ASSOSPUSRCNT_QUERY_WH_CLS := ' AND usrp.ORGID = ' || TO_CHAR(p_ORGID);
	  V_ASSOSPUSRCNT_QUERY        := V_ASSOSPUSRCNT_QUERY || V_ASSOSPUSRCNT_QUERY_WH_CLS;

	  END IF;

	  V_FINAL_ASSOUSRCNT_QUERY := 'SELECT COUNT(1) FROM ( SELECT DISTINCT * FROM ( ' || V_ASSOUSRCNT_QUERY || ' UNION ALL ' || 

	V_ASSOSPUSRCNT_QUERY || '))';

	  -- DBMS_OUTPUT.PUT_LINE(V_FINAL_ASSOUSRCNT_QUERY);

	  EXECUTE IMMEDIATE V_FINAL_ASSOUSRCNT_QUERY INTO P_ASSOUSRCNT;

	  V_NOTASSOUSRCNT_QUERY := 'SELECT COUNT(1)
	FROM TBL_USERPROFILES
	WHERE LOWER(ISSPONSOR) = LOWER(''N'') AND LOWER(ISACTIVE) = LOWER(''Y'')
	AND USERID NOT IN
	(SELECT DISTINCT SITESTAFFUSERID FROM TBL_ORGSITESTAFFMAP WHERE ORGID IS NOT NULL)';
	  EXECUTE IMMEDIATE V_NOTASSOUSRCNT_QUERY INTO P_NOTASSOUSRCNT;

	  V_NOTACCEPTDTCCNT_QUERY := 'SELECT
	COUNT(1)
	FROM TBL_AUTO_LOGIN al,
	TBL_USERPROFILES usrp
	WHERE
	 (al.TRANSCELERATE_ID = usrp.TRANSCELERATEUSERID OR al.TRANSCELERATE_ID = (REGEXP_SUBSTR

	(usrp.TRANSCELERATEUSERID,''[^@]+'',1,1))
	 OR usrp.TRANSCELERATEUSERID      = (REGEXP_SUBSTR(al.TRANSCELERATE_ID,''[^@]+'',1,1)))
	AND (al.IS_TERMS_ACCEPTED IS NULL OR al.IS_TERMS_ACCEPTED = ''N'' OR al.IS_POLICY_ACCEPTED IS NULL OR al.IS_POLICY_ACCEPTED 

	= ''N'') AND usrp.ISACTIVE = ''Y''';

	  IF p_ORGID                       IS NOT NULL THEN

	  V_NOTACCEPTDTCCNT_QUERY  :=  'SELECT count(distinct usrp.USERID)
	FROM TBL_AUTO_LOGIN al,
	  TBL_USERPROFILES usrp
	WHERE ( al.TRANSCELERATE_ID = usrp.TRANSCELERATEUSERID
	OR al.TRANSCELERATE_ID = (REGEXP_SUBSTR(usrp.TRANSCELERATEUSERID,''[^@]+'',1,1))
	OR usrp.TRANSCELERATEUSERID      = (REGEXP_SUBSTR(al.TRANSCELERATE_ID,''[^@]+'',1,1)))
	AND ( al.IS_TERMS_ACCEPTED IS NULL
	OR al.IS_TERMS_ACCEPTED = ''N''
	OR al.IS_POLICY_ACCEPTED   IS NULL
	OR al.IS_POLICY_ACCEPTED = ''N'' )
	AND usrp.ISSPONSOR =''Y''
	AND usrp.ISACTIVE = ''Y''
	AND usrp.ORGID = ' || TO_CHAR(p_ORGID);

		EXECUTE IMMEDIATE V_NOTACCEPTDTCCNT_QUERY INTO V_TCPPORGSPONSORUSER;

	  V_NOTACCEPTDTCCNT_QUERY_SITUSR := 'SELECT count(distinct usrp.USERID)
	FROM TBL_AUTO_LOGIN al,
	  TBL_USERPROFILES usrp
	WHERE ( al.TRANSCELERATE_ID = usrp.TRANSCELERATEUSERID
	OR al.TRANSCELERATE_ID      = (REGEXP_SUBSTR(usrp.TRANSCELERATEUSERID,''[^@]+'',1,1))
	OR usrp.TRANSCELERATEUSERID      = (REGEXP_SUBSTR(al.TRANSCELERATE_ID,''[^@]+'',1,1)))
	AND ( al.IS_TERMS_ACCEPTED IS NULL
	OR al.IS_TERMS_ACCEPTED     = ''N''
	OR al.IS_POLICY_ACCEPTED   IS NULL
	OR al.IS_POLICY_ACCEPTED    = ''N'' )
	AND usrp.ISSPONSOR          =''N''
	AND usrp.ISACTIVE = ''Y''
	AND usrp.USERID            IN
	  (SELECT DISTINCT SITESTAFFUSERID FROM TBL_ORGSITESTAFFMAP orgSit WHERE orgSit.ORGID=' || TO_CHAR(p_ORGID) || ')';

	  EXECUTE IMMEDIATE V_NOTACCEPTDTCCNT_QUERY_SITUSR INTO V_TCPPORGSITEUSER;

	  P_NOTACCEPTDTCCNT := V_TCPPORGSPONSORUSER + V_TCPPORGSITEUSER;
	  ELSE
	  EXECUTE IMMEDIATE V_NOTACCEPTDTCCNT_QUERY INTO P_NOTACCEPTDTCCNT;
	  END IF;

	EXCEPTION
	  /*when no data found then log exception*/
	WHEN NO_DATA_FOUND THEN
	  V_MSG := 'NO DATA FOUND';
	  DBMS_OUTPUT.PUT_LINE(V_MSG);
	  RETURN;
	  /*if Primary key violation then log exception*/
	WHEN DUP_VAL_ON_INDEX THEN
	  V_MSG := SQLERRM;
	  DBMS_OUTPUT.PUT_LINE(V_MSG);
	  RETURN;
	  /*if other exception then log exception*/
	WHEN OTHERS THEN
	  V_MSG := SQLERRM;
	  DBMS_OUTPUT.PUT_LINE(V_MSG);
	  RETURN;
	END PROC_PLATFORMDIMENSION_REPORT;

	/******************************************************************************
	Object_name - PROC_PFSPONSORSTUDIES_REPORT
	Purpose - Procedure to fetch overall platform diemnsion sponsor studies report as per search criteria
	*******************************************************************************/
	PROCEDURE PROC_PFSPONSORSTUDIES_REPORT(
		p_USERID IN NUMBER,
		p_ORGID  IN NUMBER,
	  P_OFFSET IN NUMBER,
		P_LIMIT  IN NUMBER,
		P_ORDRBY IN VARCHAR2,
		P_SORTBY IN VARCHAR2,
		P_COUNT OUT NUMBER,
		p_PFSPONSORSTUDIESREC OUT SYS_REFCURSOR)
	  /*********************************************************************
	  /**
	  /** Procedure:   PROC_PFSPONSORSTUDIES_REPORT
	  /** Description: POPULATES OVERALL PLATFORM DIMENSION SPONSOR STUDIES REPORT
	  /** Author:      Cognizant
	  /** Out:
	  /** In:
	  /*********************************************************************/
	AS
	  V_MSG VARCHAR2(500);
	  V_FINAL_QUERY VARCHAR2(9999);
	  V_QUERY_START VARCHAR2(500);
	  V_QUERY VARCHAR2(9999);
	  V_QUERY_WHERE_CLAUSE VARCHAR2(500);
	  V_QUERY_END VARCHAR2(500);

	  V_COUNT_QUERY VARCHAR2(9999);
	  V_COUNT_QUERY_START VARCHAR2(500);
	  V_COUNT_QUERY_END VARCHAR2(500);
	  V_ORDER VARCHAR2(500);
	  V_ENDINDEX           NUMBER;
	  V_STARTINDEX         NUMBER;

	BEGIN

	  V_STARTINDEX := p_OFFSET + 1;
	  IF p_OFFSET = 0 THEN
	  V_STARTINDEX := p_OFFSET;
	  END IF;
	  V_ENDINDEX := p_LIMIT + p_OFFSET;

	  /*GET OVERALL PLATFORM DIMENSION SPONSOR STUDIES REPORT*/

	  V_COUNT_QUERY_START := 'SELECT count(1) FROM ( ';
	  V_QUERY_START := 'SELECT * FROM (SELECT ROWNUM RNUM , TEMP.* FROM ( ';

	  V_QUERY := 'SELECT DISTINCT
		thera.THERAPEUTICAREAID,
		thera.THERAPEUTICAREANAME,
		prg.PROGID,
		prg.PROGNAME,
		dis.DISEASEID,
		dis.DISEASENAME,
		indi.INDICATIONID,
		indi.INDICATIONNAME,
		comp.COMPOUNDID,
		comp.COMPOUNDNAME,
		std.STUDYID,
		std.STUDYNAME,
		sit.SITEID,
		sit.SITENAME
	FROM TBL_STUDY std
	JOIN TBL_PROGRAM prg
	ON std.PROGID = prg.PROGID
	JOIN TBL_THERAPEUTICAREA thera
	ON std.THERAPEUTICAREAID = thera.THERAPEUTICAREAID
	LEFT JOIN TBL_DISEASE dis
	ON std.DISEASEID = dis.DISEASEID
	JOIN TBL_INDICATION indi
	ON std.INDICATIONID = indi.INDICATIONID
	JOIN TBL_COMPOUND comp
	ON std.COMPOUNDID = comp.COMPOUNDID
	JOIN TBL_ORGANIZATION org
	ON prg.ORGID = org.ORGID
	LEFT JOIN TBL_SITE sit
	ON std.STUDYID = sit.STUDYID
	WHERE
	std.ISACTIVE = ''Y'' AND (sit.ISACTIVE = ''Y'' OR sit.ISACTIVE IS NULL) ';

	  IF p_ORGID IS NOT NULL THEN
	  V_QUERY_WHERE_CLAUSE := V_QUERY_WHERE_CLAUSE || ' AND org.ORGID = ' || TO_CHAR(p_ORGID);
	  END IF;

	  IF p_SORTBY = 'THERAPEUTICAREA' THEN
		V_ORDER := 'trim(lower(thera.THERAPEUTICAREANAME))';
	  ELSIF p_SORTBY = 'PROGRAMNAME' THEN
		V_ORDER     := 'trim(lower(prg.PROGNAME))';
	  ELSIF p_SORTBY = 'DISEASENAME' THEN
		V_ORDER     := 'trim(lower(dis.DISEASENAME))';
	  ELSIF p_SORTBY = 'INDICATIONNAME' THEN
		V_ORDER     := 'trim(lower(indi.INDICATIONNAME))';
	  ELSIF p_SORTBY = 'COMPOUNDNAME' THEN
		V_ORDER     := 'trim(lower(comp.COMPOUNDNAME))';
	  ELSIF p_SORTBY = 'STUDY' THEN
		V_ORDER     := 'trim(lower(std.STUDYNAME))';
	  ELSIF p_SORTBY = 'SITE' THEN
		V_ORDER     := 'trim(lower(sit.SITENAME))';
	  ELSE
		V_ORDER := 'thera.THERAPEUTICAREANAME,prg.PROGNAME';
	  END IF;

	  IF p_SORTBY IS NOT NULL THEN
		V_QUERY_WHERE_CLAUSE   := V_QUERY_WHERE_CLAUSE || ' ORDER BY ' || TO_CHAR(V_ORDER);
	  ELSE
		V_QUERY_WHERE_CLAUSE := V_QUERY_WHERE_CLAUSE || ' ORDER BY ' || TO_CHAR(V_ORDER);
	  END IF;

	  IF p_ORDRBY IS NOT NULL THEN
		V_QUERY_WHERE_CLAUSE := V_QUERY_WHERE_CLAUSE || ' ' || p_ORDRBY;
	  ELSE
		 V_QUERY_WHERE_CLAUSE := V_QUERY_WHERE_CLAUSE || ' DESC ';
	  END IF;

	  V_QUERY_END := ') TEMP WHERE ROWNUM <= ' || TO_CHAR(V_ENDINDEX) ||' ) WHERE RNUM >= '|| TO_CHAR(V_STARTINDEX);

	  V_FINAL_QUERY := V_QUERY_START || V_QUERY || V_QUERY_WHERE_CLAUSE || V_QUERY_END;
	  -- DBMS_OUTPUT.PUT_LINE(V_FINAL_QUERY);

	  V_COUNT_QUERY_END := ' )';
	  V_COUNT_QUERY := V_COUNT_QUERY_START || V_QUERY || V_QUERY_WHERE_CLAUSE || V_COUNT_QUERY_END;
	--  DBMS_OUTPUT.PUT_LINE(V_COUNT_QUERY);

	  EXECUTE IMMEDIATE V_COUNT_QUERY INTO p_COUNT;

	  OPEN p_PFSPONSORSTUDIESREC FOR V_FINAL_QUERY;

	EXCEPTION
	  /*when no data found then log exception*/
	WHEN NO_DATA_FOUND THEN
	  V_MSG := 'NO DATA FOUND';
	  DBMS_OUTPUT.PUT_LINE(V_MSG);
	  RETURN;
	  /*if Primary key violation then log exception*/
	WHEN DUP_VAL_ON_INDEX THEN
	  V_MSG := SQLERRM;
	  DBMS_OUTPUT.PUT_LINE(V_MSG);
	  RETURN;
	  /*if other exception then log exception*/
	WHEN OTHERS THEN
	  V_MSG := SQLERRM;
	  DBMS_OUTPUT.PUT_LINE(V_MSG);
	  RETURN;
	END PROC_PFSPONSORSTUDIES_REPORT;

	/******************************************************************************
	Object_name - PROC_PFSPONSORUSERS_REPORT
	Purpose - Procedure to fetch overall platform diemnsion sponsor (linked or not linked)users report as per search criteria
	*******************************************************************************/
	PROCEDURE PROC_PFSPONSORUSERS_REPORT(
		p_USERID    IN NUMBER,
		p_ORGID     IN NUMBER,
		p_ISLINKED   IN VARCHAR2,
		p_FIRSTNAME IN VARCHAR2,
		p_LASTNAME  IN VARCHAR2,
		p_EMAIL     IN VARCHAR2,
		P_OFFSET    IN NUMBER,
		P_LIMIT     IN NUMBER,
		P_ORDRBY    IN VARCHAR2,
		P_SORTBY    IN VARCHAR2,
		P_COUNT OUT NUMBER,
		p_PFSPONSORUSERSREC OUT SYS_REFCURSOR)
	  /*********************************************************************
	  /**
	  /** Procedure:   PROC_PFSPONSORUSERS_REPORT
	  /** Description: POPULATES OVERALL PLATFORM DIMENSION SPONSOR SPONSOR USER BASED ASSOCIATION CRITERIA REPORT
	  /** Author:      Cognizant
	  /** Out:
	  /** In:
	  /*********************************************************************/
	AS
	  V_MSG VARCHAR2(9999);
	  V_FINAL_QUERY VARCHAR2(9999);
	  V_QUERY_START VARCHAR2(9999);

	  V_FINAL_LINKUSR_QUERY VARCHAR2(9999);
	  V_LINKUSR_QUERY VARCHAR2(9999);
	  V_LINKSPUSR_QUERY VARCHAR2(9999);
	  V_NOTLINKUSR_QUERY VARCHAR2(9999);
	  V_QUERY_WHERE_CLAUSE VARCHAR2(9999);
	  V_LINKQUERY_WHERE_CLAUSE VARCHAR2(9999);
	  V_QUERY_ORDER_CLAUSE VARCHAR2(9999);

	  V_QUERY_END VARCHAR2(9999);
	  V_COUNT_QUERY VARCHAR2(9999);
	  V_COUNT_QUERY_START VARCHAR2(9999);
	  V_COUNT_QUERY_END VARCHAR2(9999);
	  V_ORDER VARCHAR2(9999);
	  V_ENDINDEX NUMBER;
	  V_STARTINDEX NUMBER;

	BEGIN

	  V_STARTINDEX := p_OFFSET + 1;
	  IF p_OFFSET = 0 THEN
	  V_STARTINDEX := p_OFFSET;
	  END IF;
	  V_ENDINDEX := p_LIMIT + p_OFFSET;

	  /*GET OVERALL PLATFORM DIMENSION SPONSOR USER BASED ASSOCIATION CRITERIA REPORT*/

	  V_COUNT_QUERY_START := 'SELECT count(1) FROM ( ';
	  V_QUERY_START := 'SELECT * FROM (SELECT ROWNUM RNUM , TEMP.* FROM ( ';

	  V_LINKUSR_QUERY := 'SELECT
		usrp.USERID,
		usrp.TRANSCELERATEUSERID,
		pkg_encrypt.fn_decrypt (usrp.FIRSTNAME) FIRSTNAME,
		pkg_encrypt.fn_decrypt (usrp.LASTNAME) LASTNAME,
		pkg_encrypt.fn_decrypt (usrp.FIRSTNAME) || '''' || pkg_encrypt.fn_decrypt (usrp.LASTNAME) USERNAME,
		pkg_encrypt.fn_decrypt (usrcon.PHONE1) PHONE1,
		pkg_encrypt.fn_decrypt (usrcon.PHONE1EXT) PHONE1EXT,
		pkg_encrypt.fn_decrypt (usrcon.PHONE2) PHONE2,
		pkg_encrypt.fn_decrypt (usrcon.PHONE2EXT) PHONE2EXT,
		pkg_encrypt.fn_decrypt (usrcon.EMAIL) EMAIL,
		usrp.actualtranscelerateuserid
	  FROM TBL_USERROLEMAP usrrm
	  JOIN TBL_USERPROFILES usrp
	  ON usrrm.USERID = usrp.USERID
	  JOIN TBL_CONTACT usrcon
	  ON usrp.CONTACTID = usrcon.CONTACTID
	  JOIN TBL_STUDY std
	  ON usrrm.STUDYID = std.STUDYID
	  JOIN TBL_PROGRAM prg
	  ON std.PROGID = prg.PROGID
	  JOIN TBL_ORGANIZATION org
	  ON prg.ORGID = org.ORGID
	  WHERE (usrrm.EFFECTIVEENDDATE IS NULL OR TO_DATE(usrrm.EFFECTIVEENDDATE,''dd-mon-yy HH24:MI:SS'') >= TO_DATE

	(sysdate,''dd-mon-yy HH24:MI:SS'')) AND std.ISACTIVE = ''Y'' ';

	  V_LINKSPUSR_QUERY := 'SELECT
		usrp.USERID,
		  usrp.TRANSCELERATEUSERID,
		  pkg_encrypt.fn_decrypt (usrp.FIRSTNAME) FIRSTNAME,
		  pkg_encrypt.fn_decrypt (usrp.LASTNAME) LASTNAME,
		  pkg_encrypt.fn_decrypt (usrp.FIRSTNAME) || '''' || pkg_encrypt.fn_decrypt (usrp.LASTNAME) USERNAME,
		  pkg_encrypt.fn_decrypt (usrcon.PHONE1) PHONE1,
		  pkg_encrypt.fn_decrypt (usrcon.PHONE1EXT) PHONE1EXT,
		  pkg_encrypt.fn_decrypt (usrcon.PHONE2) PHONE2,
		  pkg_encrypt.fn_decrypt (usrcon.PHONE2EXT) PHONE2EXT,
		  pkg_encrypt.fn_decrypt (usrcon.EMAIL) EMAIL,
		  usrp.actualtranscelerateuserid
	  FROM TBL_USERROLEMAP usrrm
		JOIN TBL_USERPROFILES usrp
		ON usrrm.USERID = usrp.USERID
		JOIN TBL_CONTACT usrcon
		ON usrp.CONTACTID = usrcon.CONTACTID
	  JOIN TBL_ROLES rol
		ON usrrm.ROLEID      = rol.ROLEID
	  WHERE usrrm.STUDYID IS NULL
		AND rol.ROLETYPEID  =3
	';

	  V_NOTLINKUSR_QUERY := 'SELECT DISTINCT
		usrp.USERID,
		usrp.TRANSCELERATEUSERID,
		pkg_encrypt.fn_decrypt (usrp.FIRSTNAME) FIRSTNAME,
		pkg_encrypt.fn_decrypt (usrp.LASTNAME) LASTNAME,
		pkg_encrypt.fn_decrypt (usrp.FIRSTNAME) || '''' || pkg_encrypt.fn_decrypt (usrp.LASTNAME) USERNAME,
		pkg_encrypt.fn_decrypt (usrcon.PHONE1) PHONE1,
		pkg_encrypt.fn_decrypt (usrcon.PHONE1EXT) PHONE1EXT,
		pkg_encrypt.fn_decrypt (usrcon.PHONE2) PHONE2,
		pkg_encrypt.fn_decrypt  (usrcon.PHONE2EXT) PHONE2EXT,
		pkg_encrypt.fn_decrypt  (usrcon.EMAIL) EMAIL,
		usrp.actualtranscelerateuserid
	  FROM TBL_USERPROFILES usrp
	  JOIN TBL_CONTACT usrcon
	  ON usrp.CONTACTID           = usrcon.CONTACTID
	  WHERE LOWER(usrp.ISSPONSOR) = LOWER(''N'')
	  AND LOWER(usrp.ISACTIVE)    = LOWER(''Y'')
	  AND USERID NOT IN
	  (SELECT DISTINCT SITESTAFFUSERID
	  FROM TBL_ORGSITESTAFFMAP orgsite
	  WHERE orgsite.ORGID IS NOT NULL
	  ) ';

	  IF p_ORGID IS NOT NULL AND p_ISLINKED = 'Y' THEN
	  V_QUERY_WHERE_CLAUSE := V_QUERY_WHERE_CLAUSE || ' AND org.ORGID  = ' || TO_CHAR(p_ORGID);
	  V_LINKQUERY_WHERE_CLAUSE := V_LINKQUERY_WHERE_CLAUSE || ' AND usrp.ORGID  = ' || TO_CHAR(p_ORGID);
	  END IF;

	  IF p_FIRSTNAME IS NOT NULL THEN
		V_QUERY_WHERE_CLAUSE := V_QUERY_WHERE_CLAUSE || ' AND LOWER(pkg_encrypt.fn_decrypt (usrp.FIRSTNAME)) LIKE LOWER(''%' || (TRIM(p_FIRSTNAME)) 

	||'%'')';
	  V_LINKQUERY_WHERE_CLAUSE := V_LINKQUERY_WHERE_CLAUSE || ' AND LOWER(pkg_encrypt.fn_decrypt (usrp.FIRSTNAME)) LIKE LOWER(''%' || (TRIM

	(p_FIRSTNAME)) ||'%'')';
	  END IF;
	  IF p_LASTNAME IS NOT NULL THEN
		V_QUERY_WHERE_CLAUSE := V_QUERY_WHERE_CLAUSE || ' AND LOWER(pkg_encrypt.fn_decrypt (usrp.LASTNAME)) LIKE LOWER(''%' || (TRIM(p_LASTNAME)) 

	||'%'')';
	  V_LINKQUERY_WHERE_CLAUSE := V_LINKQUERY_WHERE_CLAUSE || ' AND LOWER(pkg_encrypt.fn_decrypt (usrp.LASTNAME)) LIKE LOWER(''%' || (TRIM

	(p_LASTNAME)) ||'%'')';
	  END IF;
	  IF p_EMAIL IS NOT NULL THEN
		V_QUERY_WHERE_CLAUSE := V_QUERY_WHERE_CLAUSE || ' AND LOWER(pkg_encrypt.fn_decrypt (usrcon.EMAIL)) LIKE LOWER(''%' || (TRIM(p_EMAIL)) ||'%'')';
	  V_LINKQUERY_WHERE_CLAUSE := V_LINKQUERY_WHERE_CLAUSE || ' AND LOWER(pkg_encrypt.fn_decrypt (usrcon.EMAIL)) LIKE LOWER(''%' || (TRIM

	(p_EMAIL)) ||'%'')';
	  END IF;

	  IF p_SORTBY = 'USERNAME' THEN
		V_ORDER := 'trim(lower(USERNAME))';
	  ELSIF p_SORTBY = 'FIRSTNAME' THEN
		V_ORDER     := 'trim(lower(FIRSTNAME))';
	  ELSIF p_SORTBY = 'LASTNAME' THEN
		V_ORDER     := 'trim(lower(LASTNAME))';
	  ELSIF p_SORTBY = 'EMAIL' THEN
		V_ORDER     := 'trim(lower(EMAIL))';
	  ELSIF p_SORTBY = 'PHONE' THEN
		V_ORDER     := 'trim(lower(PHONE1))';
	  ELSIF p_SORTBY = 'TRANSCELERATEUSERID' THEN
		V_ORDER     := 'trim(lower(TRANSCELERATEUSERID))';
	  ELSE
		V_ORDER := 'trim(lower(LASTNAME)),trim(lower(FIRSTNAME))';
	  END IF;

	  IF p_SORTBY IS NOT NULL THEN
		V_QUERY_ORDER_CLAUSE   := V_QUERY_ORDER_CLAUSE || ' ORDER BY ' || TO_CHAR(V_ORDER);
	  ELSE
		V_QUERY_ORDER_CLAUSE := V_QUERY_ORDER_CLAUSE || ' ORDER BY ' || TO_CHAR(V_ORDER);
	  END IF;

	  IF p_ORDRBY IS NOT NULL THEN
		V_QUERY_ORDER_CLAUSE := V_QUERY_ORDER_CLAUSE || ' ' || p_ORDRBY;
	  ELSE
		 V_QUERY_ORDER_CLAUSE := V_QUERY_ORDER_CLAUSE || ' ASC ';
	  END IF;

	  V_COUNT_QUERY_END := ' )';
	  V_QUERY_END := ') TEMP WHERE ROWNUM <= ' || TO_CHAR(V_ENDINDEX) ||' ) WHERE RNUM >= '|| TO_CHAR(V_STARTINDEX);

	  IF p_ISLINKED = 'Y' THEN

	  V_FINAL_LINKUSR_QUERY := 'SELECT DISTINCT *  FROM (' || V_LINKUSR_QUERY || V_QUERY_WHERE_CLAUSE || ' UNION ALL ' || 

	V_LINKSPUSR_QUERY || V_LINKQUERY_WHERE_CLAUSE || ') ' || V_QUERY_ORDER_CLAUSE;

		V_FINAL_QUERY := V_QUERY_START || V_FINAL_LINKUSR_QUERY || V_QUERY_END;
	  V_COUNT_QUERY := V_COUNT_QUERY_START || V_FINAL_LINKUSR_QUERY || V_COUNT_QUERY_END;
	  ELSE
		V_FINAL_QUERY := V_QUERY_START || V_NOTLINKUSR_QUERY || V_QUERY_WHERE_CLAUSE || V_QUERY_ORDER_CLAUSE || V_QUERY_END;
	  V_COUNT_QUERY := V_COUNT_QUERY_START || V_NOTLINKUSR_QUERY || V_QUERY_WHERE_CLAUSE || V_COUNT_QUERY_END;
	  END IF;

	  -- DBMS_OUTPUT.PUT_LINE(V_FINAL_QUERY);
	  -- DBMS_OUTPUT.PUT_LINE(V_COUNT_QUERY);

	  EXECUTE IMMEDIATE V_COUNT_QUERY INTO p_COUNT;

	  OPEN p_PFSPONSORUSERSREC FOR V_FINAL_QUERY;

	EXCEPTION
	  /*when no data found then log exception*/
	WHEN NO_DATA_FOUND THEN
	  V_MSG := 'NO DATA FOUND';
	  DBMS_OUTPUT.PUT_LINE(V_MSG);
	  RETURN;
	  /*if Primary key violation then log exception*/
	WHEN DUP_VAL_ON_INDEX THEN
	  V_MSG := SQLERRM;
	  DBMS_OUTPUT.PUT_LINE(V_MSG);
	  RETURN;
	  /*if other exception then log exception*/
	WHEN OTHERS THEN
	  V_MSG := SQLERRM;
	  DBMS_OUTPUT.PUT_LINE(V_MSG);
	  RETURN;
	END PROC_PFSPONSORUSERS_REPORT;

	PROCEDURE SP_TASK_LIST_REPORT
	  (
		P_LOGINUSER       IN VARCHAR2,
		P_STUDYID         IN NUM_ARRAY,
		P_TRANSCELERATEID IN VARCHAR2,
		P_FIRSTNAME       IN VARCHAR2,
		P_LASTNAME        IN VARCHAR2,
		P_STUDYSITEID     IN NUM_ARRAY,
		P_COUNTRYCODE     IN VARCHAR2,
		P_TASKTYPE        IN VARCHAR2,
		P_TASKSTATUS      IN VARCHAR2,
		P_FROMDATE          IN DATE,
		P_USERID          IN NUMBER,
		P_OFFSET          IN NUMBER,
		P_LIMIT           IN NUMBER,
		P_ORDRBY          IN VARCHAR2,
		P_SORTBY          IN VARCHAR2,
		P_TASK_LIST OUT SYS_REFCURSOR,
		P_COUNT OUT NUMBER
	  )
	AS
	  V_COUNTRY_SQL_TABLE VARCHAR2
	  (
		9999 BYTE
	  )
	  ;
	  V_STATIC_SELECT_PART       VARCHAR2(32767);
	  V_DYNAMIC_TABLES_PART      VARCHAR2(32767);
	  V_DYNMC_WHERE_CLAUSE       VARCHAR2(32767);
	  V_FINAL_SQL                VARCHAR2(32767);
	  V_PAGINATION_SELECT_CLAUSE VARCHAR2(32767);
	  V_PAGINATION_ROWNUM_CLAUSE VARCHAR2(32767);
	  STUDY_IDS_STR              VARCHAR2(32767);
	  SITE_IDS_STR               VARCHAR2(32767);
	  TASKTYPE_STR               VARCHAR2(32767);
	  V_ORDER                   VARCHAR2(500);
	  V_ORGID                   NUMBER;
	  V_START_RECORD             NUMBER;
	  V_END_RECORD               NUMBER;
	  P_ENDDATE               DATE;
	  V_FROMDATE                   VARCHAR2(50);
	  V_ENDDATE                   VARCHAR2(50);
	  V_STATIC_COUNT_PART        VARCHAR2(32767);
	  --V_ARRAY apex_application_global.vc_arr2;
	  V_ROLE_COUNT NUMBER;
	  V_USERID     NUMBER;
	BEGIN
	dbms_output.enable(1000000);
	 V_ROLE_COUNT  := 0;

	IF P_TASKTYPE IS NOT NULL THEN
	   TASKTYPE_STR :=  '''' || replace(P_TASKTYPE,',',''',''') || '''';  
	  --Commented Code to remove reference for Apex 
	  /*V_ARRAY := apex_util.string_to_table(P_TASKTYPE, ',');

	  FOR i IN 1..V_ARRAY.count
	  LOOP
		dbms_output.put_line(V_ARRAY(i));
		  IF i             = 1 THEN
			TASKTYPE_STR := '''' || V_ARRAY(i) || '''';
		  ELSE
			TASKTYPE_STR := TASKTYPE_STR || ',' || '''' || V_ARRAY(i) || '''';
		  END IF;
	  END LOOP;*/
	END IF;

	IF P_LOGINUSER IS NOT NULL THEN
	  SELECT ORGID INTO V_ORGID FROM TBL_USERPROFILES WHERE UPPER(transcelerateuserid)=UPPER(P_LOGINUSER);
	  SELECT USERID INTO V_USERID FROM TBL_USERPROFILES WHERE UPPER(transcelerateuserid)=UPPER(P_LOGINUSER);
	  
	  SELECT COUNT(1) INTO V_ROLE_COUNT 
	  FROM TBL_USERROLEMAP usrrole
		LEFT JOIN TBL_ROLES tblroles
		ON usrrole.ROLEID = tblroles.ROLEID
		JOIN TBL_USERPROFILES userprofile
		ON userprofile.USERID = usrrole.USERID
		WHERE tblroles.ROLETYPEID=1
		AND usrrole.EFFECTIVESTARTDATE           <= SYSDATE
		AND (usrrole.EFFECTIVEENDDATE            >= SYSDATE
		OR usrrole.EFFECTIVEENDDATE              IS NULL)
		AND UPPER(userprofile.TRANSCELERATEUSERID)=UPPER(P_LOGINUSER);
	END IF;

	IF P_STUDYID         IS NOT NULL AND P_STUDYID.count >0 THEN
		FOR i IN 1..P_STUDYID.count
		LOOP
		  EXIT
		WHEN P_STUDYID(i) = -1;
		  IF i             = 1 THEN
			STUDY_IDS_STR := P_STUDYID(i);
		  ELSE
			STUDY_IDS_STR := STUDY_IDS_STR || ',' || P_STUDYID(i);
		  END IF;
		END LOOP;
	  END IF;

	  IF P_STUDYSITEID         IS NOT NULL AND P_STUDYSITEID.count >0 THEN
		FOR i IN 1..P_STUDYSITEID.count
		LOOP
		  EXIT
		WHEN P_STUDYSITEID(i) = -1;
		  IF i             = 1 THEN
			SITE_IDS_STR := P_STUDYSITEID(i);
		  ELSE
			SITE_IDS_STR := SITE_IDS_STR || ',' || P_STUDYSITEID(i);
		  END IF;
		END LOOP;
	  END IF;

	  V_PAGINATION_SELECT_CLAUSE := 'SELECT * FROM ( SELECT rownum as rowno, TBL.* FROM (';
	  V_STATIC_SELECT_PART       := 'select tbt.taskid, tbt.userid, tbt.tasktypecode,
	tbt.description, (
	  CASE
		WHEN lower(tbt.CATEGORYCODE) = lower(''site_access_request'')
		  
	   OR lower(tbt.CATEGORYCODE)   = lower(''site_user_registered_site'') 
	   
		 
	  THEN ''Access Modification Tasks''
	  WHEN lower(tbt.CATEGORYCODE) = lower(''adhoc_task'')
		OR lower(tbt.CATEGORYCODE) = lower(''sponsor_report_export'')
		THEN ''Ad-hoc Tasks''
	  WHEN lower(tbt.CATEGORYCODE) = lower(''document_assignment'')
			OR lower(tbt.CATEGORYCODE)   = lower(''site_document_assignment'')
		THEN ''Document Exchange Tasks''
	  WHEN lower(tbt.CATEGORYCODE) = lower(''facility_complete'')
		OR lower(tbt.CATEGORYCODE)   = lower(''facility_create'')
		OR lower(tbt.CATEGORYCODE)   = lower(''facility_update'')
		OR lower(tbt.CATEGORYCODE)   = lower(''additional_facility_create'')
	  OR lower(tbt.CATEGORYCODE)   = lower(''facility_association_request'')
		OR lower(tbt.CATEGORYCODE)   = lower(''facility_association_complete'')
		OR lower(tbt.CATEGORYCODE)   = lower(''sponsor_bulk_facility_profile_export'')
		THEN ''Facility Profile Management Tasks''
		WHEN lower(tbt.CATEGORYCODE) = lower(''survey_delegate'')
		OR lower(tbt.CATEGORYCODE)   = lower(''survey_received'')
		OR lower(tbt.CATEGORYCODE)   = lower(''survey_ask_question'')
		THEN ''Site Feasibility Survey Management Tasks''
	  WHEN lower(tbt.CATEGORYCODE)   = lower(''study_closure_request'')
	  OR lower(tbt.CATEGORYCODE)   = lower(''study_site_closure_request'')
	  THEN ''Study Closure Tasks''
	  WHEN lower(tbt.CATEGORYCODE)   = lower(''study_association_request'')
	  OR lower(tbt.CATEGORYCODE) = lower(''site_contact_update'')
	  OR lower(tbt.CATEGORYCODE)   = lower(''facility_association_request'')
	  OR lower(tbt.CATEGORYCODE)   = lower(''study_enablement_alert'')
	  OR lower(tbt.CATEGORYCODE)   = lower(''study_site_participation'')
		OR lower(tbt.CATEGORYCODE)   = lower(''pre_study_invitation'')
	  OR lower(tbt.CATEGORYCODE)   = lower(''study_site_facility_update'')
	  OR lower(tbt.CATEGORYCODE)   = lower(''sponsor_profile_role_update'')
	  OR lower(tbt.CATEGORYCODE)   = lower(''sponsor_profile_role_update'')
		  OR lower(tbt.CATEGORYCODE)   = lower(''associate_facility_PiList'')
		THEN ''Study Enablement Tasks''
	 WHEN lower(tbt.CATEGORYCODE)=''1'' THEN
		''Platform Tasks''
	  WHEN lower(tbt.CATEGORYCODE) = lower(''gcp_training_credit_requested'')
		OR lower(tbt.CATEGORYCODE)   = lower(''training_course_assign'')  
		THEN ''Training Tasks''
	  WHEN lower(tbt.CATEGORYCODE) = lower(''user_activation_request'')
	  OR lower(tbt.CATEGORYCODE)   = lower(''user_deactivation_request'')
	  THEN ''User Deactivation Tasks''
	  WHEN lower(tbt.CATEGORYCODE) = lower(''user_profile_complete'')
		OR lower(tbt.CATEGORYCODE)   = lower(''user_profile_cv_not_updated'')
		OR lower(tbt.CATEGORYCODE)   = lower(''generate_user_profile_cv'')
	  OR lower(tbt.CATEGORYCODE)   = lower(''user_profile_delegate'')
		OR lower(tbt.CATEGORYCODE)   = lower(''user_profile_send_approval'')
			OR lower(tbt.CATEGORYCODE)   = lower(''associate_facility_request'')  
	  THEN ''User Profile Management Tasks''
	  ELSE tbt.CATEGORYCODE
	  END ) CATEGORYCODE,
	tbt.STARTDATE, tbt.DUEDATE, 
	tbt.ASSIGNTO,
	(SELECT up.actualtranscelerateuserid 
	FROM tbl_userprofiles up
	WHERE up.transcelerateuserid = tbt.ASSIGNTO) actualtranscelerateuserid,
	tbt.STUDYID,
	tbt.SITEID, INITCAP(tbt.STATUSCODE) STATUSCODE, tbt.COMPLETIONDATE,
	pkg_encrypt.fn_decrypt (tup.firstname) firstname , pkg_encrypt.fn_decrypt (tup.lastname) lastname, STUDY.STUDYNAME,SITE.SITENAME  ';
	  V_STATIC_COUNT_PART        := 'select count(*) ';
	  IF P_COUNTRYCODE           IS NOT NULL AND (STUDY_IDS_STR IS NOT NULL OR SITE_IDS_STR IS NOT NULL )THEN
		V_COUNTRY_SQL_TABLE      := ', (select tsi.siteid SITEID,
	tsi.studyid STUDYID
	from tbl_site tsi,
	tbl_contact tc,
	tbl_study tst   , TBL_COUNTRIES CNTRY
	where tsi.CONTACTID = tc.CONTACTID
	and tsi.STUDYID = tst.STUDYID
	AND tc.COUNTRYCD    =CNTRY.COUNTRYCD
	AND CNTRY.COUNTRYID=''' || P_COUNTRYCODE || '''';
		IF STUDY_IDS_STR             IS NOT NULL THEN
		  V_COUNTRY_SQL_TABLE    := V_COUNTRY_SQL_TABLE || ' AND tsi.STUDYID IN(' || STUDY_IDS_STR || ')';
		END IF;
		IF SITE_IDS_STR      IS NOT NULL THEN
		  V_COUNTRY_SQL_TABLE := V_COUNTRY_SQL_TABLE || ' AND tsi.SITEID IN(' || SITE_IDS_STR || ')';
		END IF;
		V_COUNTRY_SQL_TABLE := V_COUNTRY_SQL_TABLE || ') CSS ';
	  ELSIF P_COUNTRYCODE IS NOT NULL THEN
		V_COUNTRY_SQL_TABLE := ' ,TBL_CONTACT CON ,TBL_COUNTRIES CNTRY ';
	  END IF;
	  V_DYNAMIC_TABLES_PART  := 'from tbl_task tbt, tbl_userprofiles tup ,TBL_STUDY STUDY, TBL_SITE SITE ' || 

	V_COUNTRY_SQL_TABLE;

	 IF P_LOGINUSER         IS NOT NULL AND V_ROLE_COUNT > 0 THEN
	  V_DYNMC_WHERE_CLAUSE   := 'where tbt.userid = tup.userid AND tbt.STUDYID=STUDY.STUDYID(+) AND TBT.SITEID=SITE.SITEID(+)
	AND ((STUDY.ISACTIVE=''Y'' and STUDY.STUDYID  in (SELECT STUDYID FROM TBL_USERROLEMAP WHERE USERID = '||V_USERID||')))
	AND (SITE.ISACTIVE=''Y'' or  tbt.siteid is null) AND tup.ISACTIVE=''Y''
	AND ISDELETED = '|| '''N''';
	 ELSE
	 V_DYNMC_WHERE_CLAUSE   := 'where tbt.userid = tup.userid AND tbt.STUDYID=STUDY.STUDYID(+) AND TBT.SITEID=SITE.SITEID(+) 
	AND (STUDY.ISACTIVE=''Y'' or tbt.STUDYID is null)   AND (SITE.ISACTIVE=''Y'' or  tbt.siteid is null) AND tup.ISACTIVE=''Y'' 
	AND ISDELETED = '|| '''N''';
	 END IF;

	  IF P_LOGINUSER IS NOT NULL THEN
		V_DYNMC_WHERE_CLAUSE   := V_DYNMC_WHERE_CLAUSE || ' AND ASSIGNTO in ( SELECT  transcelerateuserid
	  FROM tbl_userProfiles
	  WHERE orgid ='|| V_ORGID || ' union
	SELECT  userprof.transcelerateuserid
	  FROM TBL_ORGSITESTAFFMAP sitestaff join tbl_userProfiles userprof on userprof.USERID=sitestaff.SITESTAFFUSERID
	  WHERE sitestaff.orgid = '|| V_ORGID ||')' ;
	  END IF;
	  IF P_TRANSCELERATEID   IS NOT NULL THEN
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND LOWER(ASSIGNTO) LIKE LOWER(''%' || LOWER(TRIM(P_TRANSCELERATEID)) 

	||'%'')';
	  END IF;
	   IF P_USERID   IS NOT NULL THEN
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND tbt.USERID =' || TO_CHAR(P_USERID) ;
	  END IF;
	  IF P_FIRSTNAME         IS NOT NULL THEN
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND LOWER(pkg_encrypt.fn_decrypt (tup.FIRSTNAME)) LIKE LOWER(''%' || LOWER(TRIM(P_FIRSTNAME)) 

	||'%'')';
	  END IF;
	  IF P_LASTNAME          IS NOT NULL THEN
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND LOWER(pkg_encrypt.fn_decrypt (tup.LASTNAME)) LIKE LOWER(''%' || LOWER(TRIM(P_LASTNAME)) 

	||'%'')';
	  END IF;
	  IF P_TASKTYPE          IS NOT NULL THEN
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND LOWER(tbt.CATEGORYCODE) IN (' || LOWER(TASKTYPE_STR) || ')';
	  END IF;

	 IF P_FROMDATE IS NOT NULL THEN
	  V_FROMDATE := TO_CHAR(P_FROMDATE,'dd-mon-yy HH24:MI:SS');
	  P_ENDDATE := P_FROMDATE + 1;
	  V_ENDDATE := TO_CHAR(P_ENDDATE,'dd-mon-yy HH24:MI:SS');
	  END IF;

	  IF P_TASKSTATUS        IS NOT NULL AND UPPER(P_TASKSTATUS) = 'DUETODAY'  AND P_FROMDATE IS NOT NULL THEN
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND tbt.DUEDATE >=   TO_DATE(''' || V_FROMDATE || ''',''dd-Mon-yy 

	hh24:mi:ss'')  AND tbt.DUEDATE < TO_DATE(''' || V_ENDDATE || ''',''dd-Mon-yy hh24:mi:ss'')';
	  ELSIF P_TASKSTATUS        IS NOT NULL AND UPPER(P_TASKSTATUS) = 'DUELATER' AND P_FROMDATE IS NOT NULL THEN
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND  tbt.DUEDATE > TO_DATE(''' || V_ENDDATE || ''',''dd-Mon-yy 

	hh24:mi:ss'')';
	  ELSIF P_TASKSTATUS        IS NOT NULL AND UPPER(P_TASKSTATUS) = 'OVERDUE' AND P_FROMDATE IS NOT NULL THEN
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND  tbt.DUEDATE < TO_DATE(''' || V_FROMDATE || ''',''dd-Mon-yy 

	hh24:mi:ss'')';
	  ELSIF P_TASKSTATUS        IS NOT NULL THEN
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND LOWER(tbt.STATUSCODE)= LOWER(''' || P_TASKSTATUS || ''')' ;
	  END IF;
	  IF P_COUNTRYCODE       IS NOT NULL AND (STUDY_IDS_STR IS NOT NULL OR SITE_IDS_STR IS NOT NULL )THEN
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND CSS.SITEID = TBT.SITEID AND TBT.STUDYID = CSS.STUDYID';
	  ELSIF P_COUNTRYCODE       IS NOT NULL THEN
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND tup.CONTACTID = CON.CONTACTID AND CNTRY.COUNTRYCD = CON.COUNTRYCD 

	AND CNTRY.COUNTRYID = ''' || P_COUNTRYCODE || '''';
	  END IF;
	  IF STUDY_IDS_STR           IS NOT NULL THEN
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND TBT.STUDYID  IN(' || STUDY_IDS_STR || ')';
	  END IF;
	  IF SITE_IDS_STR       IS NOT NULL THEN
		V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND TBT.SITEID IN(' || SITE_IDS_STR || ')';
	  END IF;
	  V_FINAL_SQL         := V_STATIC_SELECT_PART || V_DYNAMIC_TABLES_PART || V_DYNMC_WHERE_CLAUSE;
	  V_STATIC_COUNT_PART := V_STATIC_COUNT_PART || V_DYNAMIC_TABLES_PART || V_DYNMC_WHERE_CLAUSE;

	   IF P_SORTBY = 'TASKTYPECODE' THEN
		V_ORDER := 'trim(lower(tbt.tasktypecode))';
	  ELSIF P_SORTBY = 'DESCRIPTION' THEN
		V_ORDER     := 'trim(lower(tbt.description))';
	  ELSIF P_SORTBY = 'CATEGORYCODE' THEN
		V_ORDER     := 'trim(lower(CATEGORYCODE))';
	  ELSIF P_SORTBY = 'STATUSCODE' THEN
		V_ORDER     := 'trim(lower(tbt.STATUSCODE))';
	  ELSIF P_SORTBY = 'TASKID' THEN
		V_ORDER     := 'tbt.taskid';
	  ELSIF P_SORTBY = 'STARTDATE' THEN
		V_ORDER     := 'tbt.STARTDATE';
	  ELSIF P_SORTBY = 'DUEDATE' THEN
		V_ORDER     := 'tbt.DUEDATE';
	  ELSIF P_SORTBY = 'ASSIGNTO' THEN
		V_ORDER     := 'trim(lower(tbt.ASSIGNTO))';
	  ELSIF P_SORTBY = 'STUDYID' THEN
		V_ORDER     := 'STUDY.STUDYNAME';
	  ELSIF P_SORTBY = 'SITEID' THEN
		V_ORDER     := 'SITE.SITENAME';
	  ELSIF P_SORTBY = 'COMPLETIONDATE' THEN
		V_ORDER     := 'tbt.COMPLETIONDATE';
	  ELSIF P_SORTBY = 'FIRSTNAME' THEN
		V_ORDER     := 'trim(lower(firstname))';
	   ELSE
		V_ORDER := 'STUDY.STUDYID,tbt.taskid';
	 END IF;
	--INSERT INTO temp_table VALUES ('adf'||V_FINAL_SQL); commit;--I_COUNT
	--Changed by Krishnaraya R1.1 - Recommended default sorting values-Reports- Defect ID :131

	  IF P_SORTBY IS NOT NULL THEN
			V_FINAL_SQL       := V_FINAL_SQL || ' ORDER BY ' || TO_CHAR(V_ORDER);
			IF P_ORDRBY IS NOT NULL THEN
			   V_FINAL_SQL       := V_FINAL_SQL || ' ' || P_ORDRBY;
			END IF;   
		ELSE
			V_FINAL_SQL       := V_FINAL_SQL || ' ORDER BY ' || TO_CHAR(V_ORDER);
			IF P_ORDRBY IS NOT NULL THEN
			   V_FINAL_SQL       := V_FINAL_SQL || ' ' || P_ORDRBY;
			END IF; 
		END IF;

	   /*IF P_SORTBY         IS NOT NULL THEN
		V_FINAL_SQL       := V_FINAL_SQL || ' ORDER BY ' || P_ORDRBY || ',' || TO_CHAR(V_ORDER);
	  
	  ELSE
		V_FINAL_SQL       := V_FINAL_SQL || ' ORDER BY ' || TO_CHAR(V_ORDER);
	  END IF;*/
	  V_START_RECORD             := P_OFFSET;
	  V_END_RECORD               := V_START_RECORD + P_LIMIT - 1;
	  V_PAGINATION_ROWNUM_CLAUSE := ' ) TBL ) OUTERQUERY  WHERE OUTERQUERY.rowno >= ' || V_START_RECORD || ' AND 

	OUTERQUERY.rowno <= ' || V_END_RECORD;
	  V_FINAL_SQL                := V_PAGINATION_SELECT_CLAUSE || V_FINAL_SQL || V_PAGINATION_ROWNUM_CLAUSE;
	 --DBMS_OUTPUT.PUT_LINE(V_FINAL_SQL);
	  --DBMS_OUTPUT.PUT_LINE(V_STATIC_COUNT_PART);

	  OPEN P_TASK_LIST FOR V_FINAL_SQL;
	  EXECUTE IMMEDIATE V_STATIC_COUNT_PART INTO P_COUNT;
	END SP_TASK_LIST_REPORT;

PROCEDURE POT_INV_REG_SURVEY_STATUS(
      I_LOGGEDINUSERID    IN NUMBER,
      I_FIRSTNAME         IN VARCHAR2,
      I_LASTNAME          IN VARCHAR2,
      I_COUNTRYID         IN NUM_ARRAY,
      I_DEPARTMENTNAME    IN VARCHAR2,
      I_SURVEYID          IN NUM_ARRAY,
      I_FACILITYNAME      IN VARCHAR2,
      I_STUDYIDS          IN NUM_ARRAY,
      I_OFFSET            IN NUMBER,
      I_LIMIT             IN NUMBER,
      I_ORDRBY            IN VARCHAR2,
      I_SORTBY            IN VARCHAR2,
      I_COUNT OUT NUMBER,
      POTINVREGSURVEYSTATUS OUT SYS_REFCURSOR)
    AS
    SQL_PAGINATION_PART    VARCHAR2(32767);
    SQL_FROM_1_PART        VARCHAR2(32767);
    SQL_WHERE_1_PART       VARCHAR2(32767);
    SQL_FROM_2_PART        VARCHAR2(32767);
    SQL_WHERE_2_PART       VARCHAR2(32767);
    SQL_DYNMC_WHERE_PART   VARCHAR2(32767);
    SQL_DYNMC_SORTING_PART VARCHAR2(32767);
    PAG_END_ROW            NUMBER;
    SQL_MAIN_QUERY         VARCHAR2(32767);
    V_COUNT_QUERY          VARCHAR2(32767);
    STUDY_IDS_STR          VARCHAR2(32767);
    SITE_IDS_STR           VARCHAR2(32767);
    TEMP_SORTBY            VARCHAR2(32767);
    TEMP_ORDRBY            VARCHAR2(32767);
    V_ROLE_COUNT            NUMBER;
    V_SPONSORORGANIZAIONID  NUMBER ;
    V_FACILITYNAME          VARCHAR2(32767);
    V_COUNT                 NUMBER;
    SURVEYID_IDS_STR        VARCHAR2(32767);
    COUNTRY_IDS_STR         VARCHAR2(32767);

    BEGIN
    --dbms_output.enable(1000000);
    TEMP_ORDRBY := '';
    V_ROLE_COUNT := 0;

IF I_SORTBY = 'COUNTRYNAME' THEN
      TEMP_SORTBY    := 'UPPER(TRIM(COUNTRYNAME))';
    ELSIF I_SORTBY = 'LASTNAME' THEN
      TEMP_SORTBY    := 'UPPER(TRIM(LASTNAME))';
    ELSIF I_SORTBY    = 'FIRSTNAME' THEN
      TEMP_SORTBY    := 'UPPER(TRIM(FIRSTNAME))';
    ELSIF I_SORTBY = 'EMAIL' THEN
      TEMP_SORTBY    := 'UPPER(TRIM(EMAIL))';
    ELSIF I_SORTBY = 'PHONE1' THEN
      TEMP_SORTBY    := 'UPPER(TRIM(PHONE1))';
    ELSIF I_SORTBY = 'FACILITYNAME' THEN
      TEMP_SORTBY    := 'UPPER(TRIM(FACILITYNAME))';
    ELSIF I_SORTBY = 'REGISTRATIONSTATUS' THEN
      TEMP_SORTBY    := 'UPPER(TRIM(REGISTRATIONSTATUS))';
    ELSIF I_SORTBY = 'TRANSCELERATEUSERID' THEN
      TEMP_SORTBY    := 'UPPER(TRIM(TRANSCELERATEUSERID))';
    ELSIF I_SORTBY = 'SUVSTATUS' THEN
      TEMP_SORTBY    := 'UPPER(TRIM(SUVSTATUS))';
     ELSIF I_SORTBY = 'POISTATUS' THEN
      TEMP_SORTBY    := 'UPPER(TRIM(POISTATUS))';
    ELSIF I_SORTBY = 'SURVEYCD' THEN
      TEMP_SORTBY    := 'UPPER(TRIM(SURVEYCD))';
    ELSIF I_SORTBY = 'DEPARTMENTNAME' THEN
      TEMP_SORTBY    := 'UPPER(TRIM(DEPARTMENTNAME))';
    ELSIF I_SORTBY = 'REFCODE' THEN
      TEMP_SORTBY    := 'UPPER(TRIM(REFCODE))';
    ELSIF I_SORTBY = 'PITITLENAMES' THEN
      TEMP_SORTBY    := 'UPPER(TRIM(PITITLENAMES))';
    ELSIF I_SORTBY = 'SITENAME' THEN
      TEMP_SORTBY    := 'UPPER(TRIM(SITENAME))';
    ELSIF I_SORTBY = 'STUDYNAME' THEN
      TEMP_SORTBY    := 'UPPER(TRIM(STUDYNAME))';
    ELSIF I_SORTBY = 'SURVEYSENTDATE' THEN
      TEMP_SORTBY    := 'SURVEYSENTDATE';
    ELSIF I_SORTBY = 'SURVEYSENTDT' THEN
      TEMP_SORTBY    := 'SURVEYSENTDATE';
    ELSIF I_SORTBY = 'RESPONSERECEIVEDDATE' THEN
      TEMP_SORTBY    := 'RESPONSERECEIVEDDATE';
    ELSIF I_SORTBY = 'ACTIVATIONSTARTDT' THEN
      TEMP_SORTBY    := 'ACTIVATIONSTARTDT';
     ELSIF I_SORTBY = 'PRIMARY_FAC_COUNTRY' THEN
      TEMP_SORTBY    := 'PRIMARY_FAC_COUNTRY' ;
       ELSIF I_SORTBY = 'RECIPIENT_STATUS' THEN
      TEMP_SORTBY    := 'RECIPIENT_STATUS' ;
      ELSIF I_SORTBY = 'SURVEY_RECIPIENT_NAME' THEN
      TEMP_SORTBY    := 'SURVEY_RECIPIENT_NAME';
          ELSIF I_SORTBY = 'POT_INV_NAME' THEN
      TEMP_SORTBY    := 'POT_INV_NAME';
          ELSIF I_SORTBY = 'REASON' THEN
      TEMP_SORTBY    := 'REASON';
          ELSIF I_SORTBY = 'SURVEY_FACILITYNAME' THEN
      TEMP_SORTBY    := 'SURVEY_FACILITYNAME';
          ELSIF I_SORTBY = 'SURVEY_DEPARTMENTNAME' THEN
      TEMP_SORTBY    := 'SURVEY_DEPARTMENTNAME';
          ELSIF I_SORTBY = 'SURVEYDUEDATE' THEN
      TEMP_SORTBY    := 'SURVEYDUEDATE';
          ELSIF I_SORTBY = 'REFERENCECODE' THEN
      TEMP_SORTBY    := 'REFERENCECODE';
          ELSIF I_SORTBY = 'SIP_PIIUSER_ID' THEN
      TEMP_SORTBY    := 'SIP_PIIUSER_ID';

    ELSIF I_SORTBY = 'SURVEYID' THEN
      TEMP_SORTBY    := 'SURVEYID';
   ELSE
		  TEMP_SORTBY := 'STUDYNAME,POT_INV_NAME,PRIMARY_FAC_COUNTRY,POISTATUS,SURVEYCD ';
		END IF;


    SQL_FROM_1_PART :=
    'SELECT UP.USERID,
    PE.TRANSCELERATEUSERID,
    pkg_encrypt.fn_decrypt (UP.FIRSTNAME)  FIRSTNAME,
    pkg_encrypt.fn_decrypt (UP.LASTNAME) LASTNAME,
    pkg_encrypt.fn_decrypt (UP.LASTNAME) ||'', ''||pkg_encrypt.fn_decrypt (UP.FIRSTNAME)||'' ''||  pkg_encrypt.fn_decrypt (UP.MIDDLENAME) POT_INV_NAME,
    pkg_encrypt.fn_decrypt (CNT.EMAIL) EMAIL,
    pkg_encrypt.fn_decrypt (CNT.PHONE1) PHONE1,
    CONTRY.COUNTRYNAME COUNTRYNAME,
     FACCOUNTRY.COUNTRYNAME PRIMARY_FAC_COUNTRY,

  PEFM.REASON ,

    ''Yes'' REGISTRATIONSTATUS,
    (select case
           when tr.rolename = ''Investigator'' then
            pkg_encrypt.fn_decrypt(SVU.lastname) || '','' ||
            pkg_encrypt.fn_decrypt(SVU.firstname)||'' ''||pkg_encrypt.fn_decrypt(up.middlename)
           else
            null
           end SURVEY_INVESTIGATOR
        from tbl_userrolemap urm,tbl_roles tr
       where urm.userid = SVUM.Surveyuserid
           and UP.Userid  =urm.userid
         and urm.roleid = tr.roleid) SURVEY_INVESTIGATOR,
    SVMTDT.METADATANAME SURVEYSENT_STATUS,  nvl((
    CASE
    WHEN (select ISDEPARTMENT from tbl_facilities where facilityid=PEFM.facilityID)= ''Y''
     THEN (select DEPARTMENTNAME from tbl_facilities where FACILITYID=PEFM.facilityid )
    ELSE (select facilityname from tbl_facilities where facilityid=PEFM.facilityid )
    END ),(select facilityname from tbl_facilities where facilityid=PEFM.facilityid )) FACILITY_DEPT_NAME,
  -- PEFM.FACILITYID,

  (
    CASE
    WHEN (select ISDEPARTMENT from tbl_facilities where facilityid=PEFM.facilityID) = ''Y''
    THEN    (select FACILITYFORDEPT from tbl_facilities where FACILITYID=PEFM.facilityid )
    ELSE NULL
    END ) departmentid,

    SMPT.Departmentname survey_departmentname,

     (
    CASE
    WHEN (select ISDEPARTMENT from tbl_facilities where facilityid=PEFM.facilityID)= ''Y''
     THEN (select DEPARTMENTNAME from tbl_facilities where FACILITYID=PEFM.facilityid )
    ELSE null
    END ) departmentname,


/*    (
    CASE
    WHEN (select ISDEPARTMENT from tbl_facilities where facilityid=PEFM.facilityID) = ''Y''
    THEN FAC.facilityfordept
    ELSE FAC.facilityid
    END ) facilityid,*/
	NULL facilityid,
   /* (CASE WHEN FAC.ISDEPARTMENT=''N''
    THEN FAC.facilityname
    ELSE FAC.departmentname
      END ) facilityname,*/
    (select facilityname from tbl_facilities where facilityid=PEFM.facilityid ) facilityname,
     SMPT.Facilityname survey_facilityname,
    --FAC.facilityname facilityname,


  -- FAC.FACILITYNAME FACILITYNAME,
    CD.CODEVALUE POISTATUS,
    PET.TITLENAME PITITLENAMES,
    PEFM.ZSCORE REFCODE,
  -- NULL DEPARTMENTNAME,
    NULL PLTFMINVITATIONDT,
    NULL PISTATUSMODDT,
    NULL SELECTIONCONFMDT,
    UP.CREATEDDT PLTFMREGISTRATIONDT,
    UP.FIRST_LOGIN_DATE PLTFMACCESSDT,
    UP.ACTIVATIONSTARTDT,
    STDY.STUDYID,
    STDY.STUDYNAME STUDYNAME,
   PEFM.PRESELECTSITENAME SITENAME,
    SVUM.BELONGTO SURVEYID,
    CASE
    WHEN SVUM.BELONGTO IS NOT NULL THEN
       SV.SURVEYCD
    ELSE
      NULL
    END SURVEYCD ,
    CASE
    WHEN SVUM.BELONGTO IS NOT NULL THEN
       SV.SURVEYTITLE
    ELSE
      NULL
    END SURVEYTITLE,
    (CASE
    WHEN lower(SVMTDT.METADATANAME) = lower(''Draft'')
    THEN ''Not Sent''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Survey Sent'')
    THEN ''Not Started''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Response Received'')
    THEN ''Response Submitted''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Survey Refused'')
    THEN ''Declined''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Not Submitted Facility Disas'')
    THEN ''Not Submitted, Facility Disas''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Survey In-Progress'')
    THEN ''In-Progress''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Survey Delegated'')
    THEN ''Delegated In-Progress''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Survey Abandoned'')
    THEN ''Abandoned''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Submitted Facility Disas'')
    THEN ''Submitted, Facility Disas''
    ELSE SVMTDT.METADATANAME
    END ) SUVSTATUS,
    (SELECT SMD.METADATANAME FROM TBL_SURVEYMETADATA SMD WHERE  SMD.SURVEYMETADATAID= SVUM.SURVEYSTATUS) RECIPIENT_STATUS,
     (select pkg_encrypt.fn_decrypt (UP.LASTNAME) ||'', ''||pkg_encrypt.fn_decrypt (UP.FIRSTNAME)||'' ''||  pkg_encrypt.fn_decrypt(UP.MIDDLENAME) from tbl_userprofiles UP where up.transcelerateuserid= SVUM.tranecelerateid) SURVEY_RECIPIENT_NAME,
  -- FRS requirement 5.2.27.6
     SVUM.SURVEYSENTDATE SURVEYSENTDATE,
     SVUM.SUBMITTEDDATE RESPONSERECEIVEDDATE,
     (SELECT PKG_ENCRYPT.FN_DECRYPT(CNT.EMAIL)  FROM TBL_CONTACT CNT,TBL_USERPROFILES UP
         WHERE UP.TRANSCELERATEUSERID=PE.TRANSCELERATEUSERID
         AND UP.CONTACTID=CNT.CONTACTID ) POT_INV_EMAIL,
    (SELECT PKG_ENCRYPT.FN_DECRYPT(CNT.PHONE1)  FROM TBL_CONTACT CNT,TBL_USERPROFILES UP
         WHERE UP.TRANSCELERATEUSERID=PE.TRANSCELERATEUSERID
         AND UP.CONTACTID=CNT.CONTACTID ) POT_INV_PHONE,

    PE.TRANSCELERATEUSERID SIP_PIIUSER_ID,
    SVUM.SURVEYDUEDATE,
    SVUM.REFERENCECODE,

     --FAC.ISDEPARTMENT
     (select ISDEPARTMENT from tbl_facilities where facilityid=PEFM.facilityID) ISDEPARTMENT
  FROM TBL_POTENTIALINVESTIGATOR PE
  LEFT JOIN TBL_USERPROFILES UP
  ON PE.TRANSCELERATEUSERID = UP.transcelerateuserid
  LEFT JOIN TBL_CONTACT CNT
  ON UP.CONTACTID = CNT.CONTACTID
  LEFT JOIN TBL_COUNTRIES CONTRY
  ON CNT.COUNTRYCD = CONTRY.COUNTRYCD
  JOIN TBL_POTENTIALINVFACMAP PEFM
  ON PE.POTENTIALINVUSERID = PEFM.POTENTIALINVUSERID
  JOIN TBL_CODE CD
  ON PEFM.STATUSCD = CD.CODENAME
  JOIN TBL_POTENTIALINVTITLES PET
  ON PE.TITLEID = PET.TITLEID
  JOIN TBL_STUDY STDY
  ON PET.STUDYID = STDY.STUDYID
 JOIN TBL_FACILITIES FAC
      ON FAC.FACILITYID = PEFM.FACILITYID
      JOIN TBL_CONTACT FACCON
      ON FAC.CONTACTID=FACCON.CONTACTID
      JOIN TBL_COUNTRIES FACCOUNTRY
      ON FACCON.COUNTRYCD=FACCOUNTRY.COUNTRYCD
  LEFT JOIN TBL_SURVEYSIPASSOCIATION SVSA
  ON SVSA.Studyid=STDY.Studyid
  LEFT JOIN TBL_SURVEY SV
  ON SVSA.Belongto=SV.SURVEYID
  LEFT JOIN TBL_SURVEYUSER SVU
  ON UP.TRANSCELERATEUSERID = SVU.TRANECELERATEID
   LEFT JOIN TBL_SURVEYUSERMAP SVUM
  ON (SVU.TRANECELERATEID = SVUM.TRANECELERATEID AND SVSA.BELONGTO = SVUM.BELONGTO)
  AND SVUM.BELONGTO = SV.SURVEYID
  LEFT JOIN TBL_SURVEYMETADATA SVMTDT
  ON SVUM.SURVEYSTATUS = SVMTDT.SURVEYMETADATAID 
  LEFT JOIN TBL_SURVEYFACILITYMAP SMPT
  ON SMPT.FACILITYID=FAC.Facilityid';

  SQL_WHERE_1_PART := SQL_WHERE_1_PART || ' WHERE PE.ISACTIVE = ''Y'' AND (STDY.ISACTIVE IS NULL OR STDY.ISACTIVE = ''Y'') /*AND (SIT.ISACTIVE IS NULL

  OR SIT.ISACTIVE = ''Y'')*/ AND PE.TRANSCELERATEUSERID IS NOT NULL
  AND (SVUM.ISTEMPLATE     = ''0''
  OR SVUM.ISTEMPLATE      IS NULL) ';

     IF (I_LOGGEDINUSERID       IS NOT NULL AND I_LOGGEDINUSERID > 0) THEN
      SELECT COUNT(*) INTO V_ROLE_COUNT
      FROM TBL_USERROLEMAP usrrole
      LEFT JOIN TBL_ROLES tblroles
      ON usrrole.ROLEID        = tblroles.ROLEID
      WHERE tblroles.ROLETYPEID in (2,3)
      AND usrrole.EFFECTIVESTARTDATE    <= SYSDATE
      AND (usrrole.EFFECTIVEENDDATE >= SYSDATE
      OR usrrole.EFFECTIVEENDDATE   IS NULL) AND usrrole.USERID=I_LOGGEDINUSERID;

    select too.orgid into V_SPONSORORGANIZAIONID from Tbl_userprofiles too where too.userid = I_LOGGEDINUSERID and too.issponsor = 'Y';

      IF (V_ROLE_COUNT >0) THEN
       SQL_WHERE_1_PART := SQL_WHERE_1_PART || ' AND STDY.STUDYID in (select STUDYID from TBL_STUDY where PROGID

      in (
          select PROGID from TBL_PROGRAM where ORGID = (select ORGID from TBL_USERPROFILES where USERID = '
            || TO_CHAR(I_LOGGEDINUSERID) || '))) ';

       ELSE
         SQL_WHERE_1_PART := SQL_WHERE_1_PART || ' AND STDY.STUDYID in (SELECT STUDYID FROM TBL_USERROLEMAP WHERE USERID = '|| TO_CHAR(I_LOGGEDINUSERID) || ')';
            END IF;
  END IF;

    SQL_FROM_2_PART :=
    'SELECT null USERID,
    PE.TRANSCELERATEUSERID,
    pkg_encrypt.fn_decrypt (PE.FIRSTNAME)  FIRSTNAME,
    pkg_encrypt.fn_decrypt (PE.LASTNAME) LASTNAME,
    pkg_encrypt.fn_decrypt (PE.LASTNAME) ||'',''||pkg_encrypt.fn_decrypt (PE.FIRSTNAME)||'' ''||  pkg_encrypt.fn_decrypt (MIDDLENAME) POT_INV_NAME,
    pkg_encrypt.fn_decrypt (CNT.EMAIL) EMAIL,
    pkg_encrypt.fn_decrypt (CNT.PHONE1) PHONE1,
    CONTRY.COUNTRYNAME COUNTRYNAME,
   FACCOUNTRY.COUNTRYNAME PRIMARY_FAC_COUNTRY,
    PEFM.REASON ,
    ''No'' REGISTRATIONSTATUS,
    (select case
           when tr.rolename = ''Investigator'' then
            pkg_encrypt.fn_decrypt(SVU.lastname) || '','' ||
            pkg_encrypt.fn_decrypt(SVU.firstname)||'' ''||pkg_encrypt.fn_decrypt(middlename)--
           else
            null
           end SURVEY_INVESTIGATOR
        from tbl_userrolemap urm,tbl_roles tr
       where urm.userid = SVUM.SURVEYUSERID
          -- and UP.Userid  =urm.userid
         and urm.roleid = tr.roleid) SURVEY_INVESTIGATOR,
    SVMTDT.METADATANAME SURVEYSENT_STATUS, nvl((
    CASE
    WHEN (select ISDEPARTMENT from tbl_facilities where facilityid=PEFM.facilityID)= ''Y''
     THEN (select DEPARTMENTNAME from tbl_facilities where FACILITYID=PEFM.facilityid )
    ELSE (select facilityname from tbl_facilities where facilityid=PEFM.facilityid )
    END ),(select facilityname from tbl_facilities where facilityid=PEFM.facilityid )) FACILITY_DEPT_NAME,
  -- PEFM.FACILITYID,

  (
    CASE
    WHEN (select ISDEPARTMENT from tbl_facilities where facilityid=PEFM.facilityID) = ''Y''
    THEN    (select FACILITYFORDEPT from tbl_facilities where FACILITYID=PEFM.facilityid )
    ELSE NULL
    END ) departmentid,

     (
    CASE
    WHEN (select ISDEPARTMENT from tbl_facilities where facilityid=PEFM.facilityID)= ''Y''
     THEN (select DEPARTMENTNAME from tbl_facilities where FACILITYID=PEFM.facilityid )
    ELSE null
    END ) departmentname,
     /*(select DEPARTMENTNAME from TBL_SURVEYFACILITYMAP where SURVEYUSERID=SVU.Surveyuserid  and surveyid=SV.Surveyid)*/
     SMPT.Departmentname survey_departmentname,

/*    (
    CASE
    WHEN (select ISDEPARTMENT from tbl_facilities where facilityid=PEFM.facilityID) = ''Y''
    THEN FAC.facilityfordept
    ELSE FAC.facilityid
    END ) facilityid,*/
	NULL facilityid,
  /*(CASE WHEN FAC.ISDEPARTMENT=''N''
    THEN FAC.facilityname
    ELSE FAC.departmentname
      END ) facilityname,*/

    (select facilityname from tbl_facilities where facilityid=PEFM.facilityid ) facilityname,
   /*(select facilityname from TBL_SURVEYFACILITYMAP where SURVEYUSERID=SVU.Surveyuserid  and surveyid=SV.Surveyid)*/ 
   SMPT.Facilityname survey_facilityname,

   --FAC.facilityname facilityname,


  -- FAC.FACILITYNAME FACILITYNAME,
    CD.CODEVALUE POISTATUS,
    PET.TITLENAME PITITLENAMES,
    PEFM.ZSCORE REFCODE,
  --  NULL DEPARTMENTNAME,
    NULL PLTFMINVITATIONDT,
    NULL PISTATUSMODDT,
    NULL SELECTIONCONFMDT,
    NULL PLTFMREGISTRATIONDT,
    NULL PLTFMACCESSDT,
    NULL ACTIVATIONSTARTDT,
    STDY.STUDYID,
    STDY.STUDYNAME STUDYNAME,

    NULL SITENAME,
    SVUM.BELONGTO SURVEYID,
    CASE
    WHEN SVUM.BELONGTO IS NOT NULL THEN
       SV.SURVEYCD
    ELSE
      NULL
    END SURVEYCD ,
    CASE
    WHEN SVUM.BELONGTO IS NOT NULL THEN
       SV.SURVEYTITLE
    ELSE
      NULL
    END SURVEYTITLE,
    (CASE
    WHEN lower(SVMTDT.METADATANAME) = lower(''Draft'')
    THEN ''Not Sent''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Survey Sent'')
    THEN ''Not Started''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Response Received'')
    THEN ''Response Submitted''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Survey Refused'')
    THEN ''Declined''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Not Submitted Facility Disas'')
    THEN ''Not Submitted, Facility Disas''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Survey In-Progress'')
    THEN ''In-Progress''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Survey Delegated'')
    THEN ''Delegated In-Progress''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Survey Abandoned'')
    THEN ''Abandoned''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Submitted Facility Disas'')
    THEN ''Submitted, Facility Disas''
    ELSE SVMTDT.METADATANAME
    END ) SUVSTATUS,
    (SELECT SMD.METADATANAME FROM TBL_SURVEYMETADATA SMD WHERE  SMD.SURVEYMETADATAID= SVUM.SURVEYSTATUS) RECIPIENT_STATUS,
(select pkg_encrypt.fn_decrypt (UP.LASTNAME) ||'', ''||pkg_encrypt.fn_decrypt (UP.FIRSTNAME)||'' ''||  pkg_encrypt.fn_decrypt(UP.MIDDLENAME) from tbl_userprofiles UP where up.transcelerateuserid= SVUM.tranecelerateid) SURVEY_RECIPIENT_NAME,
  -- FRS requirement 5.2.27.6
     SVUM.SURVEYSENTDATE SURVEYSENTDATE,
     SVUM.SUBMITTEDDATE RESPONSERECEIVEDDATE,
     (SELECT PKG_ENCRYPT.FN_DECRYPT(CNT.EMAIL)  FROM TBL_CONTACT CNT,TBL_USERPROFILES UP
         WHERE UP.TRANSCELERATEUSERID=PE.TRANSCELERATEUSERID
         AND UP.CONTACTID=CNT.CONTACTID ) POT_INV_EMAIL,
       (SELECT PKG_ENCRYPT.FN_DECRYPT(CNT.PHONE1)  FROM TBL_CONTACT CNT,TBL_USERPROFILES UP
         WHERE UP.TRANSCELERATEUSERID=PE.TRANSCELERATEUSERID
         AND UP.CONTACTID=CNT.CONTACTID ) POT_INV_PHONE,
          PE.TRANSCELERATEUSERID SIP_PIIUSER_ID,
        SVUM.SURVEYDUEDATE,
        SVUM.REFERENCECODE,
     (select ISDEPARTMENT from tbl_facilities where facilityid=PEFM.facilityID) ISDEPARTMENT
  FROM TBL_POTENTIALINVESTIGATOR PE
  LEFT JOIN TBL_CONTACT CNT
  ON PE.CONTACTID = CNT.CONTACTID
  LEFT JOIN TBL_COUNTRIES CONTRY
  ON CNT.COUNTRYCD = CONTRY.COUNTRYCD
  JOIN TBL_POTENTIALINVFACMAP PEFM
  ON PE.POTENTIALINVUSERID = PEFM.POTENTIALINVUSERID
  JOIN TBL_CODE CD
  ON PEFM.STATUSCD = CD.CODENAME
  JOIN TBL_POTENTIALINVTITLES PET
  ON PE.TITLEID = PET.TITLEID
  JOIN TBL_STUDY STDY
  ON PET.STUDYID = STDY.STUDYID

  ---UAT ISSUE 194 START--
      JOIN TBL_FACILITIES FAC
      ON FAC.FACILITYID = PEFM.FACILITYID
      JOIN TBL_CONTACT FACCON
      ON FAC.CONTACTID=FACCON.CONTACTID
      JOIN TBL_COUNTRIES FACCOUNTRY
      ON FACCON.COUNTRYCD=FACCOUNTRY.COUNTRYCD

  ---UAT ISSUE 194 END--

  LEFT JOIN TBL_SURVEYSIPASSOCIATION SVSA
  ON SVSA.Studyid=STDY.Studyid
  LEFT JOIN TBL_SURVEY SV
  ON SVSA.Belongto=SV.SURVEYID
  LEFT JOIN TBL_SURVEYUSER SVU
  ON (PE.TRANSCELERATEUSERID = SVU.TRANECELERATEID)
  --ON LOWER(CNT.EMAIL) = LOWER(SVU.EMAIL)
  LEFT JOIN TBL_SURVEYUSERMAP SVUM
  ON (SVU.TRANECELERATEID = SVUM.TRANECELERATEID AND SVSA.BELONGTO = SVUM.BELONGTO)
  LEFT JOIN TBL_SURVEYMETADATA SVMTDT
  ON SVUM.SURVEYSTATUS = SVMTDT.SURVEYMETADATAID 
  LEFT JOIN TBL_SURVEYFACILITYMAP SMPT
  ON SMPT.FACILITYID=FAC.Facilityid';

  SQL_WHERE_2_PART := SQL_WHERE_2_PART || ' WHERE PE.ISACTIVE = ''Y'' AND (STDY.ISACTIVE IS NULL OR STDY.ISACTIVE = ''Y'') AND PE.TRANSCELERATEUSERID
  IS NULL
  AND (SVUM.ISTEMPLATE     = ''0''
  OR SVUM.ISTEMPLATE      IS NULL) ';

  IF (I_LOGGEDINUSERID       IS NOT NULL AND I_LOGGEDINUSERID > 0 ) THEN

      IF (V_ROLE_COUNT > 0) THEN
       SQL_WHERE_2_PART := SQL_WHERE_2_PART || ' AND STDY.STUDYID in (select STUDYID from TBL_STUDY where PROGID
        in (
        select PROGID from TBL_PROGRAM where ORGID = (select ORGID from TBL_USERPROFILES where USERID = '
          || TO_CHAR(I_LOGGEDINUSERID) || '))) ';

      ELSE
       SQL_WHERE_2_PART := SQL_WHERE_2_PART || ' AND STDY.STUDYID in (SELECT STUDYID FROM TBL_USERROLEMAP WHERE USERID ='|| TO_CHAR(I_LOGGEDINUSERID) || ')';
      END IF;
  END IF;

    SQL_DYNMC_WHERE_PART   := '';
    IF I_FIRSTNAME         IS NOT NULL THEN
      SQL_WHERE_1_PART := SQL_WHERE_1_PART || ' AND LOWER(pkg_encrypt.fn_decrypt (UP.FIRSTNAME)) LIKE LOWER(''%' || I_FIRSTNAME || '%'')';
      SQL_WHERE_2_PART := SQL_WHERE_2_PART || ' AND LOWER(pkg_encrypt.fn_decrypt (PE.FIRSTNAME)) LIKE LOWER(''%' || I_FIRSTNAME || '%'')';
    END IF;
    IF I_LASTNAME          IS NOT NULL THEN
      SQL_WHERE_1_PART := SQL_WHERE_1_PART || ' AND LOWER(pkg_encrypt.fn_decrypt (UP.LASTNAME)) LIKE LOWER(''%' || I_LASTNAME || '%'')';
      SQL_WHERE_2_PART := SQL_WHERE_2_PART || ' AND LOWER(pkg_encrypt.fn_decrypt (PE.LASTNAME)) LIKE LOWER(''%' || I_LASTNAME || '%'')';
    END IF;

    IF I_FACILITYNAME      IS NOT NULL  THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND LOWER((select facilityname from tbl_facilities where facilityid=PEFM.facilityid )) LIKE LOWER(''%' || Replace(I_FACILITYNAME,'''','''''') ||

  '%'')';

    END IF;

    IF I_STUDYIDS IS NOT NULL AND I_STUDYIDS.count >0 THEN
      FOR i IN 1..I_STUDYIDS.count
      LOOP
      EXIT
      WHEN I_STUDYIDS(i) = -1;
      IF i             = 1 THEN
        STUDY_IDS_STR := I_STUDYIDS(i);
      ELSE
        STUDY_IDS_STR := STUDY_IDS_STR || ',' || I_STUDYIDS(i);
      END IF;
      END LOOP;
    END IF;
    IF STUDY_IDS_STR       IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND STDY.STUDYID  IN(' || STUDY_IDS_STR || ')';
    END IF;

       IF I_COUNTRYID IS NOT NULL AND I_COUNTRYID.COUNT>0 THEN
      FOR I IN 1..I_COUNTRYID.COUNT
      LOOP
      EXIT WHEN I_COUNTRYID(I)= -1 ;
      IF  I=1 THEN
        COUNTRY_IDS_STR:=I_COUNTRYID(I);
        ELSE
         COUNTRY_IDS_STR:= COUNTRY_IDS_STR||','||I_COUNTRYID(I);
         END IF;
       END LOOP;
       END IF;
     IF  COUNTRY_IDS_STR IS NOT NULL THEN
       SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND FACCOUNTRY.COUNTRYID IN ('||COUNTRY_IDS_STR||')';
     END IF;

     IF I_DEPARTMENTNAME IS NOT NULL THEN
     SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND LOWER(
    CASE
    WHEN (select ISDEPARTMENT from tbl_facilities where facilityid=PEFM.facilityID)= ''Y''
     THEN (select DEPARTMENTNAME from tbl_facilities where FACILITYID=PEFM.facilityid )
    ELSE null
    END ) LIKE LOWER(''%' || Replace(I_DEPARTMENTNAME,'''','''''') ||

  '%'')';

     END IF;

     IF I_SURVEYID IS NOT NULL AND I_SURVEYID.COUNT>0 THEN
      FOR I IN 1..I_SURVEYID.COUNT
      LOOP
      EXIT WHEN I_SURVEYID(I)= -1 ;
      IF  I=1 THEN
        SURVEYID_IDS_STR:=I_SURVEYID(I);
        ELSE
         SURVEYID_IDS_STR:= SURVEYID_IDS_STR||','||I_SURVEYID(I);
         END IF;
       END LOOP;
       END IF;
     IF  SURVEYID_IDS_STR IS NOT NULL THEN
       SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND SVUM.BELONGTO in (select belongto from tbl_surveyusermap where belongto in (select surveyid from tbl_survey where SURVEYID  in (' || SURVEYID_IDS_STR || ')))';
     END IF;

    IF I_ORDRBY             IS NOT NULL THEN
      TEMP_ORDRBY := ' ' || I_ORDRBY;
    END IF;

    IF TEMP_SORTBY              IS NOT NULL AND (TEMP_SORTBY = 'SURVEYID' OR TEMP_SORTBY = 'STUDYID') THEN
      SQL_DYNMC_SORTING_PART := SQL_DYNMC_SORTING_PART || ' ORDER BY ' || TEMP_SORTBY || TEMP_ORDRBY;
    ELSIF TEMP_SORTBY              IS NOT NULL AND (TEMP_SORTBY <> 'SURVEYID' OR TEMP_SORTBY <> 'STUDYID') THEN
      SQL_DYNMC_SORTING_PART := SQL_DYNMC_SORTING_PART || ' ORDER BY ' || TEMP_SORTBY || TEMP_ORDRBY || ', SURVEYID,STUDYID ';
    ELSE
      SQL_DYNMC_SORTING_PART := SQL_DYNMC_SORTING_PART || ' ORDER BY ' || TEMP_SORTBY || TEMP_ORDRBY;
    END IF;


    SQL_MAIN_QUERY := '(' || SQL_FROM_1_PART || SQL_WHERE_1_PART || SQL_DYNMC_WHERE_PART || ') union (' || SQL_FROM_2_PART || SQL_WHERE_2_PART || SQL_DYNMC_WHERE_PART || ')';

    --dbms_output.put_line('FINAL SQL IS ------------>>>>'||SQL_MAIN_QUERY) ;

    V_COUNT_QUERY  := 'select count(1) from ((' || SQL_MAIN_QUERY || '))';

    --dbms_output.put_line('COUNT SQL IS ------------>>>>'||V_COUNT_QUERY) ;
    --dbms_output.put_line(V_COUNT_QUERY);
   -- insert into temp_table values(V_COUNT_QUERY);
   -- commit;

    EXECUTE IMMEDIATE V_COUNT_QUERY INTO I_COUNT;
    PAG_END_ROW         := I_OFFSET + I_LIMIT - 1;
    SQL_PAGINATION_PART := 'SELECT * FROM (SELECT ROWNUM RNUM , TEMP.* FROM (SELECT * FROM (' || SQL_MAIN_QUERY ;
    SQL_PAGINATION_PART := SQL_PAGINATION_PART || ')' || SQL_DYNMC_SORTING_PART || ' ) TEMP  WHERE ROWNUM <= ' || TO_CHAR(PAG_END_ROW) || ' ) WHERE RNUM >='|| TO_CHAR(I_OFFSET) ;
     --dbms_output.put_line(SQL_PAGINATION_PART);

      --insert into temp_table values(SQL_PAGINATION_PART);
      --commit;
     OPEN POTINVREGSURVEYSTATUS FOR SQL_PAGINATION_PART;
    END POT_INV_REG_SURVEY_STATUS;
  --/******************************************************************************
  --Object_name - PROC_USERSNOTACCPTTCNP_REPORT
  --Purpose - Procedure to fetch overall platform dimension sponsor users who did not accepte TERMS and CONDITION and POLICY report as per search criteria
  --*******************************************************************************/
  PROCEDURE PROC_USERSNOTACCPTTCNP_REPORT(
     p_USERID    IN NUMBER,
      p_ORGID     IN NUMBER,
      p_FIRSTNAME IN VARCHAR2,
      p_LASTNAME  IN VARCHAR2,
      p_EMAIL     IN VARCHAR2,
      P_OFFSET    IN NUMBER,
      P_LIMIT     IN NUMBER,
      P_ORDRBY    IN VARCHAR2,
      P_SORTBY    IN VARCHAR2,
      P_COUNT OUT NUMBER,
      p_USERSNOTACCPTTCNPREC OUT SYS_REFCURSOR)
   -- /*********************************************************************
    --/**
    --/** Procedure:   PROC_USERSNOTACCPTTCNP_REPORT
    --/** Description: POPULATES OVERALL PLATFORM DIMENSION SPONSOR USERS WHO DID NOT ACCEPT TERMS and CONDITION AND POLICY REPORT
    --/** Author:      Cognizant
    --/** Out:
    --/** In:
    --/*********************************************************************/
  AS
    V_MSG VARCHAR2(500);
    V_FINAL_QUERY VARCHAR2(9999);
    V_QUERY_START VARCHAR2(500);
    V_QUERY VARCHAR2(9999);
    V_ORDERBY_QUERY VARCHAR2(9999);
    V_QUERY_END VARCHAR2(500);

    V_COMMON_QUERY VARCHAR2(9999);
    V_SITUSR_QUERY VARCHAR2(9999);
    V_SPONSORUSR_QUERY VARCHAR2(9999);

    V_COUNT_QUERY VARCHAR2(9999);
    V_COUNT_QUERY_START VARCHAR2(500);
    V_COUNT_QUERY_END VARCHAR2(500);
    V_ORDER VARCHAR2(500);
    V_ENDINDEX           NUMBER;
    V_STARTINDEX         NUMBER;

  BEGIN

    V_STARTINDEX := p_OFFSET + 1;
    IF p_OFFSET = 0 THEN
     V_STARTINDEX := p_OFFSET;
    END IF;
    V_ENDINDEX := p_LIMIT + p_OFFSET;

    --GET OVERALL PLATFORM DIMENSION SPONSOR USERS WHO DID NOT ACCEPT TERM and CONDITION AND POLICY REPORT

    V_COUNT_QUERY_START := 'SELECT count(1) FROM ( ';
    V_COUNT_QUERY_END := ' )';

    V_QUERY_START := 'SELECT * FROM ( ';
    V_QUERY_END := ' WHERE ROWNUM <= ' || TO_CHAR(V_ENDINDEX) || ' ) WHERE RNUM >= '|| TO_CHAR(V_STARTINDEX);

    V_COMMON_QUERY := 'SELECT DISTINCT
    usrp.USERID,
    usrp.TRANSCELERATEUSERID,
    usrp.ACTUALTRANSCELERATEUSERID,
    pkg_encrypt.fn_decrypt (usrp.FIRSTNAME) FIRSTNAME,
    pkg_encrypt.fn_decrypt (usrp.LASTNAME) LASTNAME,
    pkg_encrypt.fn_decrypt (usrp.FIRSTNAME) || '''' || pkg_encrypt.fn_decrypt (usrp.LASTNAME) USERNAME,
    pkg_encrypt.fn_decrypt (usrcon.PHONE1) PHONE1,
    pkg_encrypt.fn_decrypt (usrcon.PHONE1EXT) PHONE1EXT,
    pkg_encrypt.fn_decrypt (usrcon.PHONE2) PHONE2,
    pkg_encrypt.fn_decrypt (usrcon.PHONE2EXT) PHONE2EXT,
    pkg_encrypt.fn_decrypt (usrcon.EMAIL) EMAIL,
    al.IS_TERMS_ACCEPTED,
    al.IS_POLICY_ACCEPTED
  FROM TBL_AUTO_LOGIN al,
    TBL_USERPROFILES usrp,
    TBL_CONTACT usrcon
  WHERE ( al.TRANSCELERATE_ID = usrp.TRANSCELERATEUSERID
  OR al.TRANSCELERATE_ID      = (REGEXP_SUBSTR(usrp.TRANSCELERATEUSERID,''[^@]+'',1,1))
  OR usrp.TRANSCELERATEUSERID      = (REGEXP_SUBSTR(al.TRANSCELERATE_ID,''[^@]+'',1,1)))
  AND ( al.IS_TERMS_ACCEPTED IS NULL
  OR al.IS_TERMS_ACCEPTED     = ''N''
  OR al.IS_POLICY_ACCEPTED   IS NULL
  OR al.IS_POLICY_ACCEPTED    = ''N'' )
  AND usrp.CONTACTID        = usrcon.CONTACTID';

    V_SITUSR_QUERY := V_COMMON_QUERY || ' AND usrp.ISSPONSOR =''N'' AND usrp.ISACTIVE =''Y'' ';
    V_SPONSORUSR_QUERY := V_COMMON_QUERY || ' AND usrp.ISSPONSOR =''Y'' AND usrp.ISACTIVE =''Y'' ';

    IF p_ORGID IS NOT NULL THEN
     V_SITUSR_QUERY := V_SITUSR_QUERY || ' AND usrp.USERID IN (SELECT DISTINCT SITESTAFFUSERID FROM TBL_ORGSITESTAFFMAP 

  orgSit WHERE orgSit.ORGID = ' || TO_CHAR(p_ORGID) || ')';
     V_SPONSORUSR_QUERY := V_SPONSORUSR_QUERY || ' AND usrp.ORGID = ' || TO_CHAR(p_ORGID);
    END IF;

    IF p_FIRSTNAME IS NOT NULL THEN
    V_SITUSR_QUERY := V_SITUSR_QUERY || ' AND LOWER(usrp.FIRSTNAME) LIKE LOWER(''%' || (TRIM(p_FIRSTNAME)) ||'%'')';
    V_SPONSORUSR_QUERY := V_SPONSORUSR_QUERY || ' AND LOWER(usrp.FIRSTNAME) LIKE LOWER(''%' || (TRIM(p_FIRSTNAME)) 

  ||'%'')';
    END IF;

    IF p_LASTNAME IS NOT NULL THEN
    V_SITUSR_QUERY := V_SITUSR_QUERY || ' AND LOWER(usrp.LASTNAME) LIKE LOWER(''%' || (TRIM(p_LASTNAME)) ||'%'')';
    V_SPONSORUSR_QUERY := V_SPONSORUSR_QUERY || ' AND LOWER(usrp.LASTNAME) LIKE LOWER(''%' || (TRIM(p_LASTNAME)) 

  ||'%'')';
    END IF;

    IF p_EMAIL IS NOT NULL THEN
    V_SITUSR_QUERY := V_SITUSR_QUERY || ' AND LOWER(usrcon.EMAIL) LIKE LOWER(''%' || (TRIM(p_EMAIL)) ||'%'')';
    V_SPONSORUSR_QUERY := V_SPONSORUSR_QUERY || ' AND LOWER(usrcon.EMAIL) LIKE LOWER(''%' || (TRIM(p_EMAIL)) ||'%'')';
    END IF;

    V_ORDERBY_QUERY := 'SELECT * FROM (' || V_SITUSR_QUERY || ' UNION ALL ' || V_SPONSORUSR_QUERY || ' ) OPRES ' ;

    IF p_SORTBY = 'USERNAME' THEN
    V_ORDER := 'trim(lower(OPRES.USERNAME))';
    ELSIF p_SORTBY = 'FIRSTNAME' THEN
    V_ORDER := 'trim(lower(OPRES.FIRSTNAME))';
    ELSIF p_SORTBY = 'LASTNAME' THEN
    V_ORDER := 'trim(lower(OPRES.LASTNAME))';
    ELSIF p_SORTBY = 'EMAIL' THEN
    V_ORDER := 'trim(lower(OPRES.EMAIL))';
    ELSIF p_SORTBY = 'PHONE' THEN
    V_ORDER := 'trim(lower(OPRES.PHONE1))';
    ELSIF p_SORTBY = 'TRANSCELERATEUSERID' THEN
    V_ORDER := 'trim(lower(OPRES.TRANSCELERATEUSERID))';
    ELSE
    V_ORDER := 'trim(lower(OPRES.LASTNAME)),trim(lower(OPRES.FIRSTNAME))';
    END IF;

    IF p_SORTBY IS NOT NULL THEN
    V_ORDERBY_QUERY := V_ORDERBY_QUERY || ' ORDER BY ' || TO_CHAR(V_ORDER);
    ELSE
    V_ORDERBY_QUERY := V_ORDERBY_QUERY || ' ORDER BY ' || TO_CHAR(V_ORDER);
    END IF;

    IF p_ORDRBY IS NOT NULL THEN
    V_ORDERBY_QUERY := V_ORDERBY_QUERY || ' ' || p_ORDRBY;
    ELSE
    V_ORDERBY_QUERY := V_ORDERBY_QUERY || ' ASC ';
    END IF;

    V_QUERY := 'SELECT ROWNUM RNUM , TEMP.* FROM ( ' || V_ORDERBY_QUERY || ' ) TEMP ' ;

    V_COUNT_QUERY := V_COUNT_QUERY_START || V_QUERY || V_COUNT_QUERY_END;
   --  DBMS_OUTPUT.PUT_LINE(V_COUNT_QUERY);

    V_FINAL_QUERY := V_QUERY_START || V_QUERY || V_QUERY_END;
    -- DBMS_OUTPUT.PUT_LINE(V_FINAL_QUERY);

    EXECUTE IMMEDIATE V_COUNT_QUERY INTO p_COUNT;

    OPEN p_USERSNOTACCPTTCNPREC FOR V_FINAL_QUERY;

  EXCEPTION
    /*when no data found then log exception*/
  WHEN NO_DATA_FOUND THEN
    V_MSG := 'NO DATA FOUND';
    DBMS_OUTPUT.PUT_LINE(V_MSG);
    RETURN;
    /*if Primary key violation then log exception*/
  WHEN DUP_VAL_ON_INDEX THEN
    V_MSG := SQLERRM;
    DBMS_OUTPUT.PUT_LINE(V_MSG);
    RETURN;
    /*if other exception then log exception*/
  WHEN OTHERS THEN
    V_MSG := SQLERRM;
    DBMS_OUTPUT.PUT_LINE(V_MSG);
    RETURN;
  END PROC_USERSNOTACCPTTCNP_REPORT;
  -- PROCEDURE FOR USER INVITATION AND REGISTRATION REPORT - START
  PROCEDURE PROC_USER_INV_REGI_REPORT(
    V_USERID  IN TBL_USERPROFILES.USERID%TYPE,
    V_FROMDT  IN DATE,
    V_TODT    IN DATE,
    V_MIN     IN NUMBER,
    V_MAX     IN NUMBER,
    V_ORDERBY IN VARCHAR2,
    V_SORTBY  IN VARCHAR2,
    V_POTINV_REG_RES OUT SYS_REFCURSOR,
    O_COUNT OUT NUMBER )
  AS
    V_SQL_SELECT_CLAUSE        VARCHAR2(9999 BYTE);
    V_SQL_ROWNUM_CLAUSE        VARCHAR2(9999 BYTE);
    V_DYNMC_WHERE_CLAUSE       VARCHAR2(9999 BYTE);
    V_ORDERBY_CLAUSE           VARCHAR2(9999 BYTE);
    V_SORTBY_CLAUSE            VARCHAR2(9999 BYTE);
    V_SORTBY_DEFAULT           VARCHAR2(9999 BYTE);
    V_PAGINATION_CLAUSE        VARCHAR2(9999 BYTE);
    V_FINAL_QUERY              VARCHAR2(9999 BYTE);
    STC_COUNTSQL_PART          VARCHAR2(9999 BYTE);
    DYNMC_COUNTSQL_CLAUSE_PART VARCHAR2(9999 BYTE);
    COUNT_QUERY                VARCHAR2(9999 BYTE);
    V_YES                      CHAR(1 BYTE);
    V_NO                       CHAR(1 BYTE);
    PAG_END_ROW          NUMBER;
  BEGIN
    V_YES               := 'Y';
    V_NO                := 'N';
    V_SQL_ROWNUM_CLAUSE := 'SELECT * FROM (SELECT ROWNUM RNUM ,TEMP.*  FROM ';
    --V_SQL_SELECT_CLAUSE    := 'SELECT * FROM (SELECT ROWNUM RNUM ,TEMP.*  FROM (SELECT DISTINCT (PI.FIRSTNAME ' || '|| ' || ''' ''' || ' || PI.LASTNAME) AS USERNAME,';
    V_DYNMC_WHERE_CLAUSE   := V_DYNMC_WHERE_CLAUSE || ' AND PI.ISACTIVE = '''|| V_YES || '''' || ' AND USR.ISACTIVE = '''|| 

  V_YES || '''';
    V_ORDERBY_CLAUSE       := ' ';
    V_SORTBY_CLAUSE        := ' ' ;
    V_SORTBY_DEFAULT       := 'USERNAME';
    PAG_END_ROW   := V_MIN + V_MAX - 1;
    V_PAGINATION_CLAUSE    := ')  TEMP  WHERE ROWNUM <= ' || TO_CHAR(PAG_END_ROW) ||' ) WHERE RNUM >='|| TO_CHAR(V_MIN);
    IF V_FROMDT            IS NOT NULL AND V_TODT IS NOT NULL THEN
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND PI.INVITATIONSENDDT BETWEEN TO_DATE(''' || V_FROMDT || ''',''dd-Mon-yy hh24:mi:ss'') AND TO_DATE(''' ||V_TODT||''',''dd-Mon-yy hh24:mi:ss'')';
    END IF;
    IF V_SORTBY       IS NOT NULL THEN
    V_SORTBY_CLAUSE := V_SORTBY_CLAUSE || ' ORDER BY ' || V_SORTBY;
    ELSE
    V_SORTBY_CLAUSE := V_SORTBY_CLAUSE || ' ORDER BY ' || V_SORTBY_DEFAULT;
    END IF;
    IF V_ORDERBY       IS NOT NULL THEN
    V_ORDERBY_CLAUSE := ' ' || V_ORDERBY;
    END IF;
    V_SQL_SELECT_CLAUSE := ' (SELECT DISTINCT (pkg_encrypt.fn_decrypt (PI.FIRSTNAME) ' || '|| ' || ''' ''' ||
    ' || pkg_encrypt.fn_decrypt (PI.LASTNAME)) AS USERNAME,
  pkg_encrypt.fn_decrypt (CON.EMAIL) EMAIL,
  pkg_encrypt.fn_decrypt (CON.PHONE1) PHONE1,
  PI.INVITATIONSENDDT,
  USR.ACTIVATIONSTARTDT,
  PI.TRANSCELERATEUSERID
  FROM TBL_POTENTIALINVESTIGATOR PI
  LEFT JOIN TBL_POTENTIALINVTITLES PIT
  ON PI.TITLEID = PIT.TITLEID
  LEFT JOIN TBL_STUDY ST
  ON PIT.STUDYID = ST.STUDYID
  LEFT JOIN TBL_SITE SITE
  ON ST.STUDYID = SITE.STUDYID
  LEFT JOIN TBL_USERPROFILES USR
  ON PI.TRANSCELERATEUSERID     = USR.TRANSCELERATEUSERID
  LEFT JOIN TBL_CONTACT CON
  ON USR.CONTACTID = CON.CONTACTID
  WHERE PI.TRANSCELERATEUSERID IS NOT NULL
  AND PI.TITLEID               IN
  (SELECT TITLEID
  FROM TBL_POTENTIALINVTITLES INPOTTITLE
  WHERE INPOTTITLE.STUDYID IN (
  (SELECT ISTD.STUDYID
  FROM TBL_STUDY ISTD,
  TBL_PROGRAM IPRG,
  TBL_ORGANIZATION IORG
  WHERE ISTD.PROGID = IPRG.PROGID
  AND IPRG.ORGID    = IORG.ORGID
  AND IORG.ORGID    =
  (SELECT TBL_USERPROFILES.ORGID
  FROM TBL_USERPROFILES
  WHERE TBL_USERPROFILES.USERID = ''' || V_USERID || '''))))';
    -- static count query
    COUNT_QUERY := 'SELECT COUNT(*) FROM ' || V_SQL_SELECT_CLAUSE || V_DYNMC_WHERE_CLAUSE|| ')';
    -- dbms_output.put_line(COUNT_QUERY);
    EXECUTE IMMEDIATE COUNT_QUERY INTO O_COUNT;
    V_FINAL_QUERY := V_SQL_ROWNUM_CLAUSE || V_SQL_SELECT_CLAUSE || V_DYNMC_WHERE_CLAUSE || V_SORTBY_CLAUSE || 

  V_ORDERBY_CLAUSE|| V_PAGINATION_CLAUSE;
    -- dbms_output.put_line(V_FINAL_QUERY);
    OPEN V_POTINV_REG_RES FOR V_FINAL_QUERY;
  END PROC_USER_INV_REGI_REPORT;
  -- PROCEDURE FOR USER INVITATION AND REGISTRATION REPORT - END

  -- PROCEDURE FOR STUDY ALERTS AND NOTIFICATIONS REPORT - START
  PROCEDURE PROC_STUDY_ALRTS_NTFS(
      V_ROLEID     IN NUMBER,
      V_SPONOSORID IN NUMBER,
      V_STUDYID    IN VARCHAR2,
      V_FROMDT     IN DATE,
      V_TODT       IN DATE,
      V_LEVEL      IN VARCHAR2,
      I_OFFSET     IN NUMBER,
      I_LIMIT      IN NUMBER,
      V_ORDERBY    IN VARCHAR2,
      V_SORTBY     IN VARCHAR2,
      V_STUDY_ALRTS_NTFS OUT SYS_REFCURSOR,
      O_COUNT OUT NUMBER )
  AS
    V_SQL_SELECT_QUERY        VARCHAR2(9999 BYTE);
    V_SQL_ALERT_CLAUSE        VARCHAR2(9999 BYTE);
    V_SQL_NOTIF_CLAUSE        VARCHAR2(9999 BYTE);
    V_SQL_WHERE_CLAUSE        VARCHAR2(9999 BYTE);
    V_SQL_PLATFORM_QUERY      VARCHAR2(9999 BYTE);
    V_FROM_LIST               VARCHAR2(9999 BYTE);
    V_SQL_ROWNUM_CLAUSE        VARCHAR2(9999 BYTE);
    V_DYNMC_WHERE_CLAUSE       VARCHAR2(9999 BYTE);
    V_ORDERBY_CLAUSE           VARCHAR2(9999 BYTE);
    V_SORTBY_CLAUSE            VARCHAR2(9999 BYTE);
    V_SORTBY_DEFAULT           VARCHAR2(9999 BYTE);
    V_PAGINATION_CLAUSE        VARCHAR2(9999 BYTE);
    V_FINAL_QUERY              VARCHAR2(9999 BYTE);
    STC_COUNTSQL_PART          VARCHAR2(9999 BYTE);
    DYNMC_COUNTSQL_CLAUSE_PART VARCHAR2(9999 BYTE);
    COUNT_QUERY                VARCHAR2(9999 BYTE);
    V_YES                      CHAR(1 BYTE);
    V_NO                       CHAR(1 BYTE);
    V_IS_STUDY                 CHAR(1 BYTE);
    V_STARTINDEX                NUMBER;
    V_ENDINDEX                NUMBER;
    V_SORTBY_VAR                  VARCHAR2(100 BYTE);
   BEGIN
    V_YES               := 'Y';
    V_NO                := 'N';
    V_SORTBY_DEFAULT    := 'T1.ORGNAME';
    V_IS_STUDY          := 'Y';
    V_STARTINDEX := I_OFFSET;
    V_ENDINDEX := I_LIMIT + I_OFFSET;
    V_FROM_LIST := ' TBL_ALERTSANDNOTIFICATIONS al, TBL_PROGRAM prog, TBL_ORGANIZATION org, TBL_STUDY std,TBL_ALERTNOTIFSTUDYSITEMAP alMap';
    V_SQL_WHERE_CLAUSE:= ' WHERE alMap.STUDYID= std.STUDYID AND std.PROGID  = prog.PROGID AND prog.ORGID  = org.ORGID AND alMap.ALERTNOTIFID = al.ALERTNOTIFICATIONID AND al.ISACTIVE = '''|| V_YES ||''' AND ISALERT  = ''';
    V_SQL_ROWNUM_CLAUSE := 'SELECT * FROM (SELECT ROWNUM RNUM ,TEMP.*  FROM (';
    V_ORDERBY_CLAUSE       := ' ';
    V_SORTBY_CLAUSE        := ' ' ;

   IF V_FROMDT IS NOT NULL THEN
     V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND TO_DATE(AL.SENTDT,''dd-mon-yy HH24:MI:SS'') >= TO_DATE(''' || 

  V_FROMDT|| ''',''dd-mon-yy HH24:MI:SS'')' ;
   END IF;
   IF V_TODT IS NOT NULL THEN
     V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND TO_DATE(AL.SENTDT,''dd-mon-yy HH24:MI:SS'') <= TO_DATE(''' || 

  V_TODT|| ''',''dd-mon-yy HH24:MI:SS'')' ;
   END IF;
   IF V_SPONOSORID IS NOT NULL AND V_SPONOSORID > 0 THEN
   V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND org.ORGID = '|| V_SPONOSORID;
   END IF;
   IF V_SPONOSORID IS NOT NULL AND V_SPONOSORID < 0 THEN
    V_IS_STUDY := 'N';
    V_FROM_LIST :=' TBL_ALERTSANDNOTIFICATIONS al ';
   END IF;
   IF V_STUDYID IS NOT NULL THEN
   V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND alMap.STUDYID in ('|| V_STUDYID ||')';
   END IF;
   IF V_LEVEL IS NOT NULL THEN
     IF V_LEVEL like 'Sponsor' THEN
     V_FROM_LIST :=  V_FROM_LIST || ', TBL_USERPROFILES up';
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND up.ISSPONSOR = '''|| V_YES ||''' AND up.userid = al.userid';
    END IF;
    IF V_LEVEL like 'Site' THEN
    V_FROM_LIST :=  V_FROM_LIST || ', TBL_USERPROFILES up';
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND up.ISSPONSOR = '''|| V_NO ||''' AND up.userid = al.userid';
    END IF;
    END IF;

    V_SQL_ALERT_CLAUSE    := 'SELECT alMap.studyid, std.STUDYNAME, org.ORGNAME, org.ORGID, COUNT(1) AS alert FROM'|| 

  V_FROM_LIST || V_SQL_WHERE_CLAUSE;
    V_SQL_NOTIF_CLAUSE    := 'SELECT alMap.studyid, std.STUDYNAME, org.ORGNAME, org.ORGID, COUNT(1) AS Notification FROM'|| 

  V_FROM_LIST || V_SQL_WHERE_CLAUSE;

  IF V_SORTBY       IS NOT NULL THEN
    IF V_SORTBY like 'NOTIFICATION' THEN
    V_SORTBY_VAR := 'T2.'||V_SORTBY;
    ElSE
    V_SORTBY_VAR := 'T1.'||V_SORTBY;
    END IF;
     V_SORTBY_CLAUSE := V_SORTBY_CLAUSE || ' ORDER BY ' || V_SORTBY_VAR;
   ELSE
     V_SORTBY_CLAUSE := V_SORTBY_CLAUSE || ' ORDER BY ' || V_SORTBY_DEFAULT;
   END IF;
   IF V_ORDERBY       IS NOT NULL THEN
    IF V_ORDERBY like 'asc' THEN
    V_ORDERBY_CLAUSE := ' ' || V_ORDERBY || ' NULLS FIRST';
    ELSE
    V_ORDERBY_CLAUSE := ' ' || V_ORDERBY || ' NULLS LAST';
    END IF;
   END IF;

   IF V_IS_STUDY = 'N' THEN
    V_SQL_SELECT_QUERY :='
    SELECT -1 AS STUDYID,
    NULL AS STUDYNAME,
    ''Platform'' AS ORGNAME,
    -1 AS ORGID,
    COUNT( CASE WHEN (al.ISALERT = ''Y'')  THEN ''Alert'' END) AS Alert,
    COUNT( CASE WHEN (al.ISALERT = ''N'')  THEN ''Alert'' END) AS Notification from ' || V_FROM_LIST || ' WHERE 

  al.ISFORPLATFORM = ''Y'' '|| V_DYNMC_WHERE_CLAUSE;
    V_SORTBY_CLAUSE := '';
    V_ORDERBY_CLAUSE :='';
   ELSE
    V_SQL_SELECT_QUERY := '
    SELECT nvl(T1.studyid,T2.studyid) AS STUDYID,
    nvl(T1.STUDYNAME, T2.STUDYNAME) AS STUDYNAME,
    nvl(T1.ORGNAME,T2.ORGNAME)AS ORGNAME,
    nvl(T1.ORGID,T2.ORGID) AS ORGID,
    nvl(T1.ALERT, 0) as ALERT,
    nvl (T2.Notification, 0) as NOTIFICATION
  FROM
    ('|| V_SQL_ALERT_CLAUSE || V_YES || ''''|| V_DYNMC_WHERE_CLAUSE || ' GROUP BY alMap.studyid, std.STUDYNAME, al.ISALERT, org.ORGNAME, org.ORGID) T1 FULL JOIN
    ('|| V_SQL_NOTIF_CLAUSE || V_NO || ''''|| V_DYNMC_WHERE_CLAUSE || ' GROUP BY alMap.studyid, std.STUDYNAME, al.ISALERT, org.ORGNAME, org.ORGID) T2 ON T1.STUDYID = T2.STUDYID ';
  END IF;
    -- static count query

    V_FINAL_QUERY :=  V_SQL_SELECT_QUERY || V_SORTBY_CLAUSE || V_ORDERBY_CLAUSE;

    COUNT_QUERY := 'SELECT COUNT(*) FROM (' || V_FINAL_QUERY||')';
    -- dbms_output.put_line(COUNT_QUERY);
    EXECUTE IMMEDIATE COUNT_QUERY INTO O_COUNT;

    V_FINAL_QUERY := V_SQL_ROWNUM_CLAUSE || V_FINAL_QUERY || ') TEMP  WHERE ROWNUM <= ' || TO_CHAR(V_ENDINDEX) ||' ) WHERE 

  RNUM >='|| TO_CHAR(V_STARTINDEX);
   -- dbms_output.put_line(V_FINAL_QUERY);

    OPEN V_STUDY_ALRTS_NTFS FOR V_FINAL_QUERY;
  END PROC_STUDY_ALRTS_NTFS;
  -- PROCEDURE FOR STUDY ALERTS AND NOTIFICATIONS REPORT - END

  -- Package Body for Site User Role Summary Report
  PROCEDURE PROC_SITEUSRROLSUMRY_REPORT(
    p_userid          IN NUMBER,
    p_studyids         IN NUM_ARRAY,
    p_siteids          IN NUM_ARRAY,
    p_countryid       IN VARCHAR2,
    p_firstname       IN VARCHAR2,
    p_lastname        IN VARCHAR2,
    p_institutionname IN VARCHAR2,
    p_fromdate        IN DATE,
    p_todate          IN DATE,
    p_offset          IN NUMBER,
    p_limit           IN NUMBER,
    p_orderby         IN VARCHAR2,
    p_sortby          IN VARCHAR2,
    p_siteusrrolsumry OUT SYS_REFCURSOR,
    p_count OUT NUMBER)
  /*********************************************************************
  /**
  /** Procedure:   PROC_SITEUSRROLSUMRY_REPORT
  /** Description: Populates Site User Role Summary Report
  /** Author:      Cognizant
  /** Out:
  /** In:
  /*********************************************************************/
AS
  V_MSG               VARCHAR2(500);
  V_QUERY             VARCHAR2(9999);
  V_QUERY_WHERECLAUSE VARCHAR2(9999);
  V_COUNT_START       VARCHAR2(9999 BYTE);
  V_FULL_START        VARCHAR2(9999 BYTE);
  V_ORDER             VARCHAR2(9999);
  V_ENDINDEX          NUMBER;
  V_STARTINDEX        NUMBER;
  STUDY_IDS_STR       VARCHAR2(9999 BYTE);
  SITE_IDS_STR        VARCHAR2(9999 BYTE);
  V_FROMDATE      VARCHAR2(20);
  V_TODATE        VARCHAR2(20);
  V_SPONSORCNT  NUMBER;
  V_ROLE_COUNT            NUMBER;

BEGIN
  V_ROLE_COUNT := 0;
  select count(1) INTO V_SPONSORCNT from TBL_USERPROFILES where ISSPONSOR = 'Y' and USERID = TO_CHAR(p_userid);

  -- DBMS_OUTPUT.PUT_LINE(V_SPONSORCNT);

  V_STARTINDEX   := p_OFFSET + 1;
  IF p_OFFSET     = 0 THEN
    V_STARTINDEX := p_OFFSET;
  END IF;
  V_ENDINDEX := p_LIMIT + p_OFFSET;
  /*Get Site User Role Summary Report*/
  V_COUNT_START       := 'SELECT COUNT(1) FROM (';
  V_FULL_START        := 'SELECT * FROM (SELECT ROWNUM RNUM , TEMP.* FROM ( ';
  V_QUERY             := 'SELECT /*+index(sit TBL_SITE_INDX)*/ DISTINCT usrp.USERID,
usrp.TRANSCELERATEUSERID,
pkg_encrypt.fn_decrypt (usrp.FIRSTNAME) FIRSTNAME ,
pkg_encrypt.fn_decrypt (usrp.LASTNAME) LASTNAME  ,
pkg_encrypt.fn_decrypt (usrp.FIRSTNAME) || '' '' || pkg_encrypt.fn_decrypt (usrp.LASTNAME) USERNAME,
urm.ROLEID,
rols.ROLENAME,
usrcon.CONTACTID,
pkg_encrypt.fn_decrypt (usrcon.EMAIL) EMAIL,
pkg_encrypt.fn_decrypt (usrcon.PHONE1) PHONE1,
pkg_encrypt.fn_decrypt (usrcon.PHONE1EXT) PHONE1EXT,
urm.STUDYID,
sty.STUDYNAME,
urm.SITEID,
sit.SITENAME,
sit.PRINCIPALFACILITYID,
sit.INSTITUTIONNAME,
org.ORGNAME,
urm.EFFECTIVESTARTDATE STARTDATE,
urm.EFFECTIVEENDDATE ENDDATE,
conu.COUNTRYCD COUNTRYCD,
conu.COUNTRYNAME COUNTRYNAME,
sit.INSTITUTIONNAME DEPARTMENTNAME
FROM TBL_USERROLEMAP urm,
TBL_USERPROFILES usrp,
TBL_STUDY sty,
TBL_SITE sit,
TBL_ROLES rols,
TBL_CONTACT usrcon,
TBL_CONTACT sitcon,
TBL_COUNTRIES conu,
TBL_COUNTRIES sitconu,
TBL_PROGRAM prg,
TBL_ORGANIZATION org,
Tbl_OrgSiteStaffMap sitUsrOrg
';
  V_QUERY_WHERECLAUSE := ' WHERE
org.ORGID = prg.ORGID
AND prg.PROGID       = sty.PROGID
AND
sty.STUDYID      = urm.STUDYID
AND sit.SITEID       = urm.SITEID
AND conu.COUNTRYCD   = usrcon.COUNTRYCD
AND org.ORGID        = sitUsrOrg.ORGID
AND sitUsrOrg.SITESTAFFUSERID = usrp.USERID
AND usrp.USERID      = urm.USERID
AND rols.ROLEID      = urm.ROLEID
AND usrcon.CONTACTID = usrp.CONTACTID
AND sitconu.COUNTRYCD = sitcon.COUNTRYCD
AND sitcon.CONTACTID  = sit.CONTACTID
AND usrp.ISACTIVE = ''Y''
AND sty.ISACTIVE = ''Y''
AND sit.ISACTIVE = ''Y''
';
IF V_SPONSORCNT > 0 AND p_userid IS NOT NULL THEN
SELECT COUNT(*) INTO V_ROLE_COUNT
      FROM TBL_USERROLEMAP usrrole
      LEFT JOIN TBL_ROLES tblroles
      ON usrrole.ROLEID        = tblroles.ROLEID
      WHERE tblroles.ROLETYPEID in (2,3)
      AND usrrole.EFFECTIVESTARTDATE    <= SYSDATE
      AND (usrrole.EFFECTIVEENDDATE >= SYSDATE
      OR usrrole.EFFECTIVEENDDATE   IS NULL) AND usrrole.USERID=p_userid;
      END IF;

      IF V_SPONSORCNT > 0 AND p_userid IS NOT NULL AND V_ROLE_COUNT > 0 THEN
      V_QUERY_WHERECLAUSE := V_QUERY_WHERECLAUSE || ' AND sitUsrOrg.ORGID = (SELECT inusrp.ORGID FROM TBL_USERPROFILES

    inusrp WHERE inusrp.USERID = ' || TO_CHAR(p_userid) || ' ) ';
  

    ELSIF V_SPONSORCNT > 0 AND p_userid IS NOT NULL THEN
    V_QUERY_WHERECLAUSE := V_QUERY_WHERECLAUSE || ' AND sitUsrOrg.ORGID = (SELECT inusrp.ORGID FROM TBL_USERPROFILES

    inusrp WHERE inusrp.USERID = ' || TO_CHAR(p_userid) || ' ) AND exists (SELECT 1 FROM TBL_USERROLEMAP tu WHERE tu.STUDYID = urm.STUDYID and tu.USERID ='|| TO_CHAR(p_userid) || ')';

      END IF;

  IF p_studyids  IS NOT NULL AND p_studyids.count >0 THEN
    FOR i IN 1..p_studyids.count
    LOOP
      EXIT
    WHEN p_studyids(i) = -1;
      IF i             = 1 THEN
        STUDY_IDS_STR := p_studyids(i);
      ELSE
        STUDY_IDS_STR := STUDY_IDS_STR || ',' || p_studyids(i);
      END IF;
    END LOOP;
  END IF;
  IF STUDY_IDS_STR IS NOT NULL THEN
    V_QUERY_WHERECLAUSE := V_QUERY_WHERECLAUSE || ' AND urm.STUDYID IN( ' || STUDY_IDS_STR || ')';
  END IF;
  IF p_siteids IS NOT NULL AND p_siteids.count >0 THEN
    FOR i IN 1..p_siteids.count
    LOOP
      EXIT
    WHEN p_siteids(i) = -1;
      IF i            = 1 THEN
        SITE_IDS_STR := p_siteids(i);
      ELSE
        SITE_IDS_STR := SITE_IDS_STR || ',' || p_siteids(i);
      END IF;
    END LOOP;
  END IF;
  IF SITE_IDS_STR IS NOT NULL THEN
    V_QUERY_WHERECLAUSE := V_QUERY_WHERECLAUSE || ' AND urm.SITEID IN(' || SITE_IDS_STR || ')';
  END IF;
  IF p_countryid IS NOT NULL THEN
  --  V_QUERY_WHERECLAUSE := V_QUERY_WHERECLAUSE || ' AND usrcon.COUNTRYCD = (select inconu.COUNTRYCD from TBL_COUNTRIES inconu where inconu.COUNTRYID = ' || TO_CHAR(p_countryid) || ' )';
  IF (SITE_IDS_STR IS NOT NULL OR STUDY_IDS_STR IS NOT NULL) THEN
    V_QUERY_WHERECLAUSE := V_QUERY_WHERECLAUSE || '  AND sitconu.COUNTRYID = ' || TO_CHAR(p_countryid);
  ELSE
    V_QUERY_WHERECLAUSE := V_QUERY_WHERECLAUSE || '  AND conu.COUNTRYID = ' || TO_CHAR(p_countryid);
  END IF;
  END IF;


  --IF p_userid           IS NOT NULL THEN
  --  V_QUERY_WHERECLAUSE := V_QUERY_WHERECLAUSE || ' AND org.ORGID = (SELECT inusrp.ORGID FROM TBL_USERPROFILES inusrp WHERE inusrp.USERID = ' || TO_CHAR(p_userid) || ' )';
  --END IF;
  IF p_firstname        IS NOT NULL THEN
    V_QUERY_WHERECLAUSE := V_QUERY_WHERECLAUSE || ' AND LOWER(pkg_encrypt.fn_decrypt (usrp.FIRSTNAME)) LIKE LOWER(''%' || TO_CHAR(p_firstname) || '%'' )';
  END IF;
  IF p_lastname         IS NOT NULL THEN
    V_QUERY_WHERECLAUSE := V_QUERY_WHERECLAUSE || ' AND LOWER(pkg_encrypt.fn_decrypt (usrp.LASTNAME)) LIKE LOWER(''%' || TO_CHAR(p_lastname) || '%'' )';
  END IF;
  IF p_institutionname  IS NOT NULL THEN
    V_QUERY_WHERECLAUSE := V_QUERY_WHERECLAUSE || ' AND LOWER(sit.INSTITUTIONNAME) LIKE LOWER(''%' || TO_CHAR(Replace(p_institutionname,'''','''''')) || '%'' )';
  END IF;
  IF p_fromdate IS NOT NULL THEN
    V_FROMDATE := TO_CHAR(p_fromdate,'dd-mon-yy HH24:MI:SS');
  V_QUERY_WHERECLAUSE := V_QUERY_WHERECLAUSE || ' AND urm.EFFECTIVESTARTDATE >= TO_DATE('''|| V_FROMDATE || ''', ''dd-mon-yy HH24:MI:SS'')';--TO_DATE(''' || p_fromdate|| ''',''dd-Mon-yy'')' ;
  END IF;
  IF p_todate IS NOT NULL THEN
    V_TODATE := TO_CHAR(p_todate,'dd-mon-yy HH24:MI:SS');
  V_QUERY_WHERECLAUSE := V_QUERY_WHERECLAUSE || ' AND urm.EFFECTIVESTARTDATE <= TO_DATE('''|| V_TODATE || ''', ''dd-mon-yy HH24:MI:SS'')';--TO_DATE(''' || p_todate|| ''',''dd-Mon-yy'')' ;
  END IF;

IF p_sortby = 'COUNTRYNAME' THEN
    V_ORDER     := 'trim(lower(COUNTRYNAME))';
  ELSIF p_sortby = 'LASTNAME' THEN
    V_ORDER     := 'trim(lower(pkg_encrypt.fn_decrypt (usrp.LASTNAME)))';
  ELSIF p_sortby    = 'USERNAME' THEN
    V_ORDER     := 'trim(lower(USERNAME))';
  ELSIF p_sortby = 'FIRSTNAME' THEN
    V_ORDER     := 'trim(lower(pkg_encrypt.fn_decrypt (usrp.FIRSTNAME)))';
  ELSIF p_sortby = 'USERID' THEN
    V_ORDER     := 'usrp.USERID';
  ELSIF p_sortby = 'TRANSCELERATEUSERID' THEN
    V_ORDER     := 'trim(lower(usrp.TRANSCELERATEUSERID))';
  ELSIF p_sortby = 'EMAIL' THEN
    V_ORDER     := 'trim(lower(pkg_encrypt.fn_decrypt (usrcon.EMAIL)))';
  ELSIF p_sortby = 'PHONE' THEN
    V_ORDER     := 'trim(lower(pkg_encrypt.fn_decrypt (usrcon.PHONE1)))';
  ELSIF p_sortby = 'ROLENAME' THEN
    V_ORDER     := 'trim(lower(rols.ROLENAME))';
  ELSIF p_sortby = 'STARTDATE' THEN
    V_ORDER     := 'STARTDATE';
  ELSIF p_sortby = 'ENDDATE' THEN
    V_ORDER     := 'ENDDATE';
  ELSIF p_sortby = 'STUDYID' THEN
    V_ORDER     := 'urm.STUDYID';
  ELSIF p_sortby = 'STUDYNAME' THEN
    V_ORDER     := 'trim(lower(sty.STUDYNAME))';
  ELSIF p_sortby = 'DEPARTMENTNAME' THEN
    V_ORDER     := 'trim(lower(DEPARTMENTNAME))';
  ELSIF p_sortby = 'SITEID' THEN
    V_ORDER     := 'urm.SITEID';
  ELSIF p_sortby = 'SITENAME' THEN
    V_ORDER     := 'trim(lower(sit.SITENAME))';
  ELSIF p_sortby = 'FACILITY' THEN
    V_ORDER     := 'trim(lower(INSTITUTIONNAME))';
  ELSE
    V_ORDER := 'COUNTRYNAME,trim(lower(pkg_encrypt.fn_decrypt (usrp.LASTNAME)))';
  END IF;

     IF p_sortby         IS NOT NULL THEN
    V_FULL_START  := V_FULL_START || V_QUERY || V_QUERY_WHERECLAUSE || ' ORDER BY ' || V_ORDER||' '||p_orderby ||') TEMP
   WHERE ROWNUM <= ' || TO_CHAR(V_ENDINDEX) ||' ) WHERE RNUM >='|| TO_CHAR(V_STARTINDEX) ;
    ELSE
       V_FULL_START  := V_FULL_START || V_QUERY || V_QUERY_WHERECLAUSE || ' ORDER BY ' || V_ORDER||' '||p_orderby ||') TEMP
       WHERE ROWNUM <= ' || TO_CHAR(V_ENDINDEX) ||' ) WHERE RNUM >='|| TO_CHAR(V_STARTINDEX) ;
  END IF;



  V_COUNT_START := V_COUNT_START || V_QUERY || V_QUERY_WHERECLAUSE || ' ORDER BY ' || V_ORDER||' '||p_orderby ||' )';
  --DBMS_OUTPUT.PUT_LINE(V_FULL_START);
  OPEN p_siteusrrolsumry FOR V_FULL_START;
  EXECUTE IMMEDIATE V_COUNT_START INTO p_count;
 -- DBMS_OUTPUT.PUT_LINE(p_count);
EXCEPTION
  /*when no data found then log exception*/
WHEN NO_DATA_FOUND THEN
  V_MSG := 'NO DATA FOUND';
  DBMS_OUTPUT.PUT_LINE(V_MSG);
  RETURN;
  /*if Primary key violation then log exception*/
WHEN DUP_VAL_ON_INDEX THEN
  V_MSG := SQLERRM;
  DBMS_OUTPUT.PUT_LINE(V_MSG);
  RETURN;
  /*if other exception then log exception*/
WHEN OTHERS THEN
  V_MSG := SQLERRM;
  DBMS_OUTPUT.PUT_LINE(V_MSG);
  RETURN;
END PROC_SITEUSRROLSUMRY_REPORT;

  PROCEDURE PROC_STUDY_ALRTS_NTFS_SUB(
    V_SPONOSORID  IN TBL_ORGANIZATION.ORGID%TYPE,
    I_STUDYID     IN VARCHAR2,
    I_TRANSUSERID IN VARCHAR2,
    I_ISSPONSOR   IN VARCHAR2,
    I_ISALERT     IN VARCHAR2,
    V_FROMDT      IN DATE,
    V_TODT        IN DATE,
    P_OFFSET      IN NUMBER,
    P_LIMIT       IN NUMBER,
    P_ORDERBY     IN VARCHAR2,
    P_SORTBY      IN VARCHAR2,
    STUDY_ALRTS_NTFS_SUB OUT SYS_REFCURSOR,
    P_COUNT OUT NUMBER )
  AS
    V_ISSPONSOR            VARCHAR2(10 BYTE);
    V_STATIC_SQL_PART      VARCHAR2(9999 BYTE);
    V_STATIC_SQL_PART_PLTF VARCHAR2(9999 BYTE);
    V_DYNMC_WHERE_CLAUSE   VARCHAR2(9999 BYTE);
    V_STATIC_SQL_PARTROW   VARCHAR2(9999 BYTE);
    V_COUNT_QUERY          VARCHAR2(9999 BYTE);
    V_FINAL_QUERY          VARCHAR2(9999 BYTE);
    V_MSG                  VARCHAR2(500);
    STUDY_IDS_STR          VARCHAR2(9999 BYTE);
    PAG_END_ROW            NUMBER;
    V_ENDINDEX             NUMBER;
    V_STARTINDEX           NUMBER;
    V_YES                  CHAR(1 BYTE);
  BEGIN
    V_YES          := 'Y';
    V_STARTINDEX   := p_OFFSET + 1;
    IF p_OFFSET     = 0 THEN
    V_STARTINDEX := p_OFFSET;
    END IF;
    IF P_OFFSET     = 1 THEN
    V_STARTINDEX := P_OFFSET;
    END IF;
    V_ENDINDEX             := p_LIMIT + p_OFFSET;
    V_STATIC_SQL_PARTROW   := 'SELECT * FROM (SELECT ROWNUM RNUM ,TEMP.*  FROM';
    V_STATIC_SQL_PART      := ' (SELECT  distinct pkg_encrypt.fn_decrypt (u.FIRSTNAME) FIRSTNAME,
  pkg_encrypt.fn_decrypt (u.LASTNAME) LASTNAME,
  pkg_encrypt.fn_decrypt (cont.EMAIL) EMAIL,
  alnt.TYPEDESC,
  aln.TEMPLATEID,
  pkg_encrypt.fn_decrypt (aln.TITLEJSON) TITLEJSON,
  pkg_encrypt.fn_decrypt (aln.MSGJSON) MSGJSON,
  aln.SENTDT,
  contr.COUNTRYNAME,
  aln.ALERTNOTIFICATIONID,
  alnmap.STUDYID,
  alnmap.SITEID,
  study.STUDYNAME,
  site.SITENAME,
  u.TRANSCELERATEUSERID
  FROM TBL_ALERTSANDNOTIFICATIONS aln,
  TBL_ALERTNOTIFSTUDYSITEMAP alnmap,
  TBL_ALERTANDNOTIFICATIONTYPE alnt,
  TBL_USERPROFILES u,
  TBL_CONTACT cont,
  TBL_COUNTRIES contr,
  TBL_STUDY study,
  TBL_SITE site
  WHERE aln.userid= u.userid
  AND aln.ALERTNOTIFICATIONID=alnmap.ALERTNOTIFID
  AND u.contactid = cont.contactid
  AND aln.ALERTNOTIFICATIONTYPEID=alnt.ALERTNOTIFICATIONTYPEID
  AND cont.COUNTRYCD=contr.COUNTRYCD
  AND alnmap.STUDYID= study.STUDYID
  AND alnmap.SITEID=site.SITEID
  AND aln.ISALERT = '''|| I_ISALERT ||'''';
    V_STATIC_SQL_PART_PLTF := ' (SELECT  distinct u.FIRSTNAME,
  u.LASTNAME,
  cont.EMAIL,
  alnt.TYPEDESC,
  aln.TEMPLATEID,
  aln.TITLEJSON,
  aln.MSGJSON,
  aln.SENTDT,
  contr.COUNTRYNAME,
  aln.ALERTNOTIFICATIONID,
  -1  AS STUDYID,
  -1  AS SITEID,
  null AS STUDYNAME,
  null AS SITENAME,
  u.TRANSCELERATEUSERID
  FROM TBL_ALERTSANDNOTIFICATIONS aln
  JOIN TBL_ALERTANDNOTIFICATIONTYPE alnt ON aln.ALERTNOTIFICATIONTYPEID=alnt.ALERTNOTIFICATIONTYPEID
  JOIN TBL_USERPROFILES u ON aln.userid = u.userid
  JOIN TBL_CONTACT cont ON u.contactid = cont.contactid
  JOIN TBL_COUNTRIES contr ON cont.COUNTRYCD=contr.COUNTRYCD

  WHERE aln.ISFORPLATFORM = ''Y'' AND aln.ISALERT = '''|| I_ISALERT ||'''' ;
    V_DYNMC_WHERE_CLAUSE   := '';
    IF I_STUDYID           IS NOT NULL THEN
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND alnmap.STUDYID = '|| I_STUDYID;
    END IF;
    IF I_ISSPONSOR         IS NOT NULL THEN
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND u.ISSPONSOR = '''|| I_ISSPONSOR ||'''';
    END IF;
    IF I_ISSPONSOR         IS NOT NULL THEN
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND u.ISSPONSOR = '''|| I_ISSPONSOR ||'''';
    END IF;
    IF V_FROMDT            IS NOT NULL THEN
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND TO_DATE(aln.SENTDT,''dd-mon-yy HH24:MI:SS'') >= TO_DATE(''' || V_FROMDT|| ''',''dd-mon-yy HH24:MI:SS'')' ;
    END IF;
    IF V_TODT              IS NOT NULL THEN
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND TO_DATE(aln.SENTDT,''dd-mon-yy HH24:MI:SS'') <= TO_DATE(''' || V_TODT|| ''',''dd-mon-yy HH24:MI:SS'')' ;
    END IF;
    IF P_SORTBY            IS NOT NULL THEN
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' ORDER BY ' || P_SORTBY;
    END IF;
    IF P_ORDERBY           IS NOT NULL THEN
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' ' || P_ORDERBY;
    END IF;
    IF I_STUDYID    IS NOT NULL THEN
    V_FINAL_QUERY := V_STATIC_SQL_PARTROW || V_STATIC_SQL_PART || V_DYNMC_WHERE_CLAUSE;
    ELSE
    V_FINAL_QUERY := V_STATIC_SQL_PARTROW || V_STATIC_SQL_PART_PLTF || V_DYNMC_WHERE_CLAUSE;
    END IF;
    V_FINAL_QUERY   := V_FINAL_QUERY || ') TEMP  WHERE ROWNUM <= ' || TO_CHAR(V_ENDINDEX) ||' ) WHERE RNUM >='|| TO_CHAR (V_STARTINDEX) ;
    IF I_STUDYID    IS NOT NULL THEN
    V_COUNT_QUERY := 'SELECT COUNT(*) FROM ' || V_STATIC_SQL_PART || V_DYNMC_WHERE_CLAUSE|| ')';
    ELSE
    V_COUNT_QUERY := 'SELECT COUNT(*) FROM ' || V_STATIC_SQL_PART_PLTF || V_DYNMC_WHERE_CLAUSE|| ')';
    END IF;
     dbms_output.put_line(V_COUNT_QUERY);
    EXECUTE IMMEDIATE V_COUNT_QUERY INTO P_COUNT;
   -- DBMS_OUTPUT.PUT_LINE(V_FINAL_QUERY);
    OPEN STUDY_ALRTS_NTFS_SUB FOR V_FINAL_QUERY;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    V_MSG := 'NO DATA FOUND';
    DBMS_OUTPUT.PUT_LINE(V_MSG);
    RETURN;
  END PROC_STUDY_ALRTS_NTFS_SUB;


  -- SPONSOR USER ACCESS REPORT - START
PROCEDURE PROC_SPONSOR_USR_ACCESS_REPORT(
   I_LOGGEDINUSERID IN NUMBER,
    I_FIRSTNAME      IN VARCHAR2,
    I_LASTNAME       IN VARCHAR2,
    I_TRANSUSERID    IN VARCHAR2,
    I_STUDYIDS       IN NUM_ARRAY,
    I_ROLEID         IN NUM_ARRAY,
    I_EMAIL          IN VARCHAR2,
    I_ACTSTATUS      IN VARCHAR2,
    I_COUNTRYID      IN NUM_ARRAY,
    I_ONBRDFROM_DATE   IN DATE,
    I_ONBRDTO_DATE     IN DATE,
    I_OFFSET         IN NUMBER,
    I_LIMIT          IN NUMBER,
    I_ORDRBY         IN VARCHAR2,
    I_SORTBY         IN VARCHAR2,
    I_COUNT OUT NUMBER,
    SPONSORUSERACCESSREP OUT SYS_REFCURSOR)
  AS
    STC_SQL_PART          VARCHAR2(32000 );
    STC_SQL_PART1         VARCHAR2(32000 );
    V_QUERY_FINAL         VARCHAR2(32000 );
    V_FINAL_QUERY         VARCHAR2(32000 );
    V_TEMP_ORDRBY         VARCHAR2(32000);
    DYNMC_SQL_CLAUSE_PART VARCHAR2(32000 );
    DYNMC_SQL_CLAUSE_PART1 VARCHAR2(32000 );
    PAG_END_ROW           NUMBER;
    V_COUNT_QUERY         VARCHAR2(32000 );
    STUDY_IDS_STR         VARCHAR2(32000 );
    V_ORDER               VARCHAR2(32000 );
    V_ROLETYPEID          NUMBER;
    V_ROLETYPE_QUERY      VARCHAR2(32000 );
    V_ACTFROM_DATE      VARCHAR2(20);
    V_ACTTO_DATE        VARCHAR2(20);
    V_ROLE_COUNT            NUMBER;
    ROLE_IDS_STR            VARCHAR2(32000);
    COUNTRY_IDS_STR         VARCHAR2(32000);
    V_STUDYCOUNT            NUMBER;
    STC_SQL_PART2           VARCHAR2(32000);
    L_TRANS                 VARCHAR2(32000);
    V_NOT_EXIST         VARCHAR2(32000);

  BEGIN
  dbms_output.enable(1000000);
    V_ROLE_COUNT := 0;
    IF I_LOGGEDINUSERID     IS NOT NULL THEN
    SELECT COUNT(*) INTO V_ROLE_COUNT
    FROM TBL_USERROLEMAP usrrole
    LEFT JOIN TBL_ROLES tblroles
    ON usrrole.ROLEID        = tblroles.ROLEID
    WHERE tblroles.ROLETYPEID=1
    AND usrrole.EFFECTIVESTARTDATE    <= SYSDATE
    AND (usrrole.EFFECTIVEENDDATE >= SYSDATE
    OR usrrole.EFFECTIVEENDDATE   IS NULL) AND usrrole.USERID=I_LOGGEDINUSERID;
    END IF;

    V_ROLETYPE_QUERY := 'SELECT ROLETYPEID FROM TBL_ROLETYPE WHERE lower(ROLETYPE) = lower(''Type III'')';
    EXECUTE IMMEDIATE V_ROLETYPE_QUERY INTO V_ROLETYPEID;

  SELECT UP1.TRANSCELERATEUSERID INTO L_TRANS FROM TBL_USERPROFILES UP1 WHERE UP1.USERID=I_LOGGEDINUSERID;

    SELECT  COUNT( URM.STUDYID) INTO V_STUDYCOUNT
  FROM  tbl_userrolemap URM, TBL_USERPROFILES UP, TBL_ORGANIZATION ORG,tbl_study STD ,TBL_SITE SIT
 WHERE UP.USERID = URM.USERID
   AND UP.ORGID = ORG.ORGID
   AND URM.STUDYID=STD.STUDYID
   AND STD.STUDYID=SIT.STUDYID
   AND ORG.ORGID = (SELECT ORGID FROM TBL_USERPROFILES WHERE USERID = I_LOGGEDINUSERID) ;

IF I_FIRSTNAME is not null or I_LASTNAME is not null or I_TRANSUSERID is not null THEN
     SELECT  COUNT( URM.STUDYID) INTO V_STUDYCOUNT
  FROM  tbl_userrolemap URM, TBL_USERPROFILES UP, TBL_ORGANIZATION ORG,tbl_study STD ,TBL_SITE SIT
 WHERE UP.USERID = URM.USERID
   AND UP.ORGID = ORG.ORGID
   AND URM.STUDYID=STD.STUDYID
   AND STD.STUDYID=SIT.STUDYID
   AND ORG.ORGID = (SELECT ORGID FROM TBL_USERPROFILES WHERE USERID = I_LOGGEDINUSERID) AND UP.TRANSCELERATEUSERID=L_TRANS ;
END IF;

    STC_SQL_PART := 'SELECT DISTINCT  UP.USERID,
      UP.TRANSCELERATEUSERID,
      BU.BUSINESSUNITNAME BUSINESS_UNIT,
      CASE
        WHEN CNT.Institution                     IS NULL
        AND pkg_encrypt.fn_decrypt(CNT.Address2) IS NOT NULL
        AND pkg_encrypt.fn_decrypt(CNT.Address3) IS NOT NULL
        THEN pkg_encrypt.fn_decrypt(CNT.Address1)
          || '',''
          || pkg_encrypt.fn_decrypt(CNT.Address2)
          || '',''
          || pkg_encrypt.fn_decrypt(CNT.Address3)
          || '',''
          ||cnt.city
          || '',''
          ||ST.STATENAME
          ||'',''
          ||pkg_encrypt.fn_decrypt(CNT.POSTALCODE)
          
        WHEN CNT.Institution                     IS NULL
        AND pkg_encrypt.fn_decrypt(CNT.Address2) IS NULL
        AND pkg_encrypt.fn_decrypt(CNT.Address3) IS NOT NULL
        THEN pkg_encrypt.fn_decrypt(CNT.Address1)
          || '', ''
          || pkg_encrypt.fn_decrypt(CNT.Address3)
          || '', ''
          ||cnt.city
          ||'', ''
          ||pkg_encrypt.fn_decrypt(CNT.POSTALCODE)
          || '',''
          ||ST.STATENAME
        WHEN CNT.Institution                     IS NULL
        AND pkg_encrypt.fn_decrypt(CNT.Address2) IS NOT NULL
        AND pkg_encrypt.fn_decrypt(CNT.Address3) IS NULL
        THEN pkg_encrypt.fn_decrypt(CNT.Address1)
          || '', ''
          || pkg_encrypt.fn_decrypt(CNT.Address2)
          || '', ''
          ||cnt.city
          || '',''
          ||ST.STATENAME
          ||'', ''
          ||pkg_encrypt.fn_decrypt(CNT.POSTALCODE)
          
        WHEN CNT.Institution                     IS NULL
        AND pkg_encrypt.fn_decrypt(CNT.Address2) IS NULL
        AND pkg_encrypt.fn_decrypt(CNT.Address3) IS NULL
        THEN pkg_encrypt.fn_decrypt(CNT.Address1)
          ||'', ''
          ||cnt.city
          || '',''
          ||ST.STATENAME
        WHEN CNT.Institution                     IS NOT NULL
        AND pkg_encrypt.fn_decrypt(CNT.Address2) IS NOT NULL
        AND pkg_encrypt.fn_decrypt(CNT.Address3) IS NOT NULL
        THEN CNT.Institution
          || '', ''
          ||pkg_encrypt.fn_decrypt(CNT.Address1)
          || '', ''
          || pkg_encrypt.fn_decrypt(CNT.Address2)
          || '', ''
          || pkg_encrypt.fn_decrypt(CNT.Address3)
          || '', ''
          ||cnt.city
          || '',''
          ||ST.STATENAME
          ||'', ''
          ||pkg_encrypt.fn_decrypt(CNT.POSTALCODE)
          
        WHEN CNT.Institution                     IS NOT NULL
        AND pkg_encrypt.fn_decrypt(CNT.Address2) IS NOT NULL
        AND pkg_encrypt.fn_decrypt(CNT.Address3) IS NULL
        THEN CNT.Institution
          || '', ''
          ||pkg_encrypt.fn_decrypt(CNT.Address1)
          || '', ''
          ||pkg_encrypt.fn_decrypt(CNT.Address2)
          || '', ''
          ||cnt.city
          || '',''
          ||ST.STATENAME
          ||'', ''
          ||pkg_encrypt.fn_decrypt(CNT.POSTALCODE)
          
        WHEN CNT.Institution                     IS NOT NULL
        AND pkg_encrypt.fn_decrypt(CNT.Address2) IS NULL
        AND pkg_encrypt.fn_decrypt(CNT.Address3) IS NOT NULL
        THEN CNT.Institution
          || '', ''
          ||pkg_encrypt.fn_decrypt(CNT.Address1)
          || '', ''
          || pkg_encrypt.fn_decrypt(CNT.Address3)
          || '', ''
          ||cnt.city
          || '',''
          ||ST.STATENAME
          ||'', ''
          ||pkg_encrypt.fn_decrypt(CNT.POSTALCODE)
          
        ELSE pkg_encrypt.fn_decrypt(CNT.Address1)
          || '', ''
          || pkg_encrypt.fn_decrypt(CNT.Address2)
          || '', ''
          || pkg_encrypt.fn_decrypt(CNT.Address3)
          || '', ''
          ||cnt.city
          || '',''
          ||ST.STATENAME
          ||'', ''
          ||pkg_encrypt.fn_decrypt(CNT.POSTALCODE)
          
      END ADDRESS,
      INITCAP(pkg_encrypt.fn_decrypt (UP.LASTNAME))
      || '', ''
      || INITCAP(pkg_encrypt.fn_decrypt (UP.FIRSTNAME))
      ||'' ''
      ||INITCAP(pkg_encrypt.fn_decrypt (UP.MIDDLENAME)) USERNAME,
      INITCAP(pkg_encrypt.fn_decrypt (UP.FIRSTNAME)) FIRSTNAME,
      INITCAP(pkg_encrypt.fn_decrypt (UP.LASTNAME)) LASTNAME,
      LOWER(pkg_encrypt.fn_decrypt (CNT.EMAIL)) EMAIL,
      pkg_encrypt.fn_decrypt (CNT.PHONE1) PHONE,
      pkg_encrypt.fn_decrypt (CNT.FAX) FAX,
      URM.ROLEID ROLEID,
      RLS.ROLENAME ROLENAME,
      URM.STUDYID,
      (
      CASE
        WHEN (RLS.ROLETYPEID IN (2,3))
        THEN ''All Existing '||'&'||' Future Studies''
        WHEN (RLS.ROLETYPEID =13)
        THEN ''Not Applicable''
        ELSE STDY.STUDYNAME
      END ) STUDYNAME,
      URM.SITEID,
      (
      CASE
        WHEN (RLS.ROLETYPEID IN (2,3))
        THEN ''All Existing '||'&'||' Future Study Sites''
        WHEN (RLS.ROLETYPEID =13)
        THEN ''Not Applicable''
        ELSE SITE.SITENAME
      END ) SITENAME,
      ORG.ORGID,
      ORG.ORGNAME,
      INITCAP(CONTRY.COUNTRYNAME) COUNTRYNAME,
      (
      CASE
        WHEN UP.ISACTIVE = ''N''
        THEN ''InActive''
        WHEN (UP.ISACTIVE = ''Y''
        AND (SELECT COUNT(*)
          FROM TBL_USERROLEMAP URMAP
          WHERE URMAP.USERID                                         = UP.USERID
          AND (URMAP.EFFECTIVEENDDATE                               IS NULL
          OR TO_CHAR(URMAP.EFFECTIVEENDDATE,''dd-mon-yy HH24:MI:SS'') >= TO_CHAR(SYSDATE,''dd-mon-yy HH24:MI:SS''))) = 0)
        THEN ''InActive''
        ELSE ''Active''
      END ) USERACCSTATUS,
      UP.ISSPONSOR,
      UP.ACTIVATIONSTARTDT,
      UP.ACTIVATIONENDDT,
      up.deactivationendreason DEACTIVATIONENDREASON,
      UP.ACTIVATIONSTARTDT PLTFMACCESSDT,
      URM.EFFECTIVESTARTDATE,
      URM.EFFECTIVEENDDATE,
      (
      CASE
        WHEN (URM.EFFECTIVEENDDATE                                 IS NULL
        OR TO_CHAR(URM.EFFECTIVEENDDATE,''dd-mon-yy HH24:MI:SS'')    >= TO_CHAR(SYSDATE,''dd-mon-yy HH24:MI:SS''))
        AND TO_CHAR(URM.EFFECTIVESTARTDATE,''dd-mon-yy HH24:MI:SS'') <= TO_CHAR(SYSDATE,''dd-mon-yy HH24:MI:SS'')
        THEN ''Active''
        ELSE ''InActive''
      END ) SITEACTSTATUS,
      UP.actualtranscelerateuserid,
      RTRIM((INITCAP(pkg_encrypt.fn_decrypt (PIUP.LASTNAME))
      || '', ''
      || INITCAP(pkg_encrypt.fn_decrypt (PIUP.FIRSTNAME))
      ||'' ''
      ||INITCAP(pkg_encrypt.fn_decrypt (PIUP.MIDDLENAME))),'', '') PINAME
    FROM TBL_USERPROFILES UP
    LEFT JOIN TBL_USERROLEMAP URM
    ON UP.USERID = URM.USERID
    LEFT JOIN TBL_CONTACT CNT
    ON UP.CONTACTID = CNT.CONTACTID
    LEFT JOIN TBL_STUDY STDY
    ON URM.STUDYID = STDY.STUDYID
    LEFT JOIN TBL_SITE SITE
    ON URM.SITEID = SITE.SITEID
    LEFT JOIN TBL_ROLES RLS
    ON URM.ROLEID = RLS.ROLEID
    LEFT JOIN TBL_ORGANIZATION ORG
    ON UP.ORGID = ORG.ORGID
    LEFT JOIN TBL_SPONSOR_BUSINESSUNIT BU
    ON BU.BUSINESSUNITID=UP.BUSINESSUNITID
    LEFT JOIN TBL_COUNTRIES CONTRY
    ON CNT.COUNTRYCD = CONTRY.COUNTRYCD
    LEFT JOIN TBL_USERPROFILES PIUP
    ON SITE.PIID = PIUP.USERID
	LEFT JOIN TBL_STATES ST
    ON ST.STATECD=CNT.STATE
    /*JOIN TBL_SPONSORACCESSMGT smgt
    ON smgt.userid=urm.userid
    and urm.roleid<>smgt.roleid*/';


 STC_SQL_PART1:= 'SELECT DISTINCT UP.USERID,
  UP.TRANSCELERATEUSERID,
  BU.BUSINESSUNITNAME BUSINESS_UNIT,
  CASE
    WHEN CNT.Institution                     IS NULL
    AND pkg_encrypt.fn_decrypt(CNT.Address2) IS NOT NULL
    AND pkg_encrypt.fn_decrypt(CNT.Address3) IS NOT NULL
    THEN pkg_encrypt.fn_decrypt(CNT.Address1)
      || '', ''
      || pkg_encrypt.fn_decrypt(CNT.Address2)
      || '', ''
      || pkg_encrypt.fn_decrypt(CNT.Address3)
      || '', ''
      ||cnt.city
      ||'', ''
      ||pkg_encrypt.fn_decrypt(CNT.POSTALCODE)
    WHEN CNT.Institution                     IS NULL
    AND pkg_encrypt.fn_decrypt(CNT.Address2) IS NULL
    AND pkg_encrypt.fn_decrypt(CNT.Address3) IS NOT NULL
    THEN pkg_encrypt.fn_decrypt(CNT.Address1)
      || '', ''
      || pkg_encrypt.fn_decrypt(CNT.Address3)
      || '', ''
      ||cnt.city
      ||'', ''
      ||pkg_encrypt.fn_decrypt(CNT.POSTALCODE)
    WHEN CNT.Institution                     IS NULL
    AND pkg_encrypt.fn_decrypt(CNT.Address2) IS NOT NULL
    AND pkg_encrypt.fn_decrypt(CNT.Address3) IS NULL
    THEN pkg_encrypt.fn_decrypt(CNT.Address1)
      || '', ''
      || pkg_encrypt.fn_decrypt(CNT.Address2)
      || '', ''
      ||cnt.city
      ||'', ''
      ||pkg_encrypt.fn_decrypt(CNT.POSTALCODE)
   WHEN CNT.Institution                     IS NULL
    AND pkg_encrypt.fn_decrypt(CNT.Address2) IS NULL
    AND pkg_encrypt.fn_decrypt(CNT.Address3) IS NULL
    THEN pkg_encrypt.fn_decrypt(CNT.Address1)
      ||'', ''
      ||cnt.city
    WHEN CNT.Institution                     IS NOT NULL
    AND pkg_encrypt.fn_decrypt(CNT.Address2) IS NOT NULL
    AND pkg_encrypt.fn_decrypt(CNT.Address3) IS NOT NULL
    THEN CNT.Institution
      || '', ''
      ||pkg_encrypt.fn_decrypt(CNT.Address1)
     || '', ''
      || pkg_encrypt.fn_decrypt(CNT.Address2)
      || '', ''
      || pkg_encrypt.fn_decrypt(CNT.Address3)
      || '', ''
      ||cnt.city
      ||'', ''
      ||pkg_encrypt.fn_decrypt(CNT.POSTALCODE)
    WHEN CNT.Institution                     IS NOT NULL
    AND pkg_encrypt.fn_decrypt(CNT.Address2) IS NOT NULL
    AND pkg_encrypt.fn_decrypt(CNT.Address3) IS NULL
    THEN CNT.Institution
      || '', ''
      ||pkg_encrypt.fn_decrypt(CNT.Address1)
      || '', ''
      ||pkg_encrypt.fn_decrypt(CNT.Address2)
      || '', ''
      ||cnt.city
      ||'', ''
      ||pkg_encrypt.fn_decrypt(CNT.POSTALCODE)
    WHEN CNT.Institution                     IS NOT NULL
    AND pkg_encrypt.fn_decrypt(CNT.Address2) IS NULL
    AND pkg_encrypt.fn_decrypt(CNT.Address3) IS NOT NULL
    THEN CNT.Institution
      || '', ''
      ||pkg_encrypt.fn_decrypt(CNT.Address1)
      || '', ''
      || pkg_encrypt.fn_decrypt(CNT.Address3)
      || '', ''
      ||cnt.city
      ||'', ''
      ||pkg_encrypt.fn_decrypt(CNT.POSTALCODE)
    ELSE pkg_encrypt.fn_decrypt(CNT.Address1)
      || '', ''
      || pkg_encrypt.fn_decrypt(CNT.Address2)
      || '', ''
      || pkg_encrypt.fn_decrypt(CNT.Address3)
      || '', ''
      ||cnt.city
      ||'', ''
      ||pkg_encrypt.fn_decrypt(CNT.POSTALCODE)
  END ADDRESS,
  INITCAP(pkg_encrypt.fn_decrypt (UP.LASTNAME))
  || '', ''
  || INITCAP(pkg_encrypt.fn_decrypt (UP.FIRSTNAME))
  ||'' ''
  ||INITCAP(pkg_encrypt.fn_decrypt (UP.MIDDLENAME)) USERNAME,
  INITCAP(pkg_encrypt.fn_decrypt (UP.FIRSTNAME)) FIRSTNAME,
  INITCAP(pkg_encrypt.fn_decrypt (UP.LASTNAME)) LASTNAME,
  LOWER(pkg_encrypt.fn_decrypt (CNT.EMAIL)) EMAIL,
  pkg_encrypt.fn_decrypt (CNT.PHONE1) PHONE,
  pkg_encrypt.fn_decrypt (CNT.FAX) FAX,
  URM.ROLEID ROLEID,
  RLS.ROLENAME ROLENAME,
  (CASE
    WHEN URM.STUDYID IS NOT NULL
    THEN URM.STUDYID
    ELSE NULL
  END ) STUDYID,
  (
  CASE
    WHEN (URM.ISFUTURESTUDY =''Y'')
    THEN ''All Existing '||'&'||' Future Studies''
    WHEN STDY.STUDYID IS NOT NULL
    THEN STDY.STUDYNAME
    ELSE NULL
  END ) STUDYNAME,
  NULL SITEID,
  (
  CASE
    WHEN (URM.ISFUTURESITE =''Y'')
    THEN ''All Existing '||'&'||' Future Study Sites''
    ELSE NULL
  END ) SITENAME,
 ORG.ORGID,
  ORG.ORGNAME,
  INITCAP(CONTRY.COUNTRYNAME) COUNTRYNAME,
  (
  CASE
    WHEN UP.ISACTIVE = ''N''
    THEN ''InActive''
    WHEN (UP.ISACTIVE = ''Y''
    AND (SELECT COUNT(*)
      FROM TBL_USERROLEMAP URMAP
      WHERE URMAP.USERID                                         = UP.USERID
      AND (URMAP.EFFECTIVEENDDATE                               IS NULL
      OR TO_CHAR(URMAP.EFFECTIVEENDDATE,''dd-mon-yy HH24:MI:SS'') >= TO_CHAR(SYSDATE,''dd-mon-yy HH24:MI:SS''))) = 0)
    THEN ''InActive''
    ELSE ''Active''
  END ) USERACCSTATUS,
  UP.ISSPONSOR,
  UP.ACTIVATIONSTARTDT,
  UP.ACTIVATIONENDDT,
  up.deactivationendreason DEACTIVATIONENDREASON,
  UP.ACTIVATIONSTARTDT PLTFMACCESSDT,
  URM.STARTDT,
  URM.ENDDT,
  (
  CASE
    WHEN (URM.STARTDT                                 IS NULL
    OR TO_CHAR(URM.ENDDT,''dd-mon-yy HH24:MI:SS'')    >= TO_CHAR(SYSDATE,''dd-mon-yy HH24:MI:SS''))
    AND TO_CHAR(URM.ENDDT,''dd-mon-yy HH24:MI:SS'') <= TO_CHAR(SYSDATE,''dd-mon-yy HH24:MI:SS'')
    THEN ''Active''
    ELSE ''InActive''
  END ) SITEACTSTATUS,
  UP.actualtranscelerateuserid,
  NULL PINAME
FROM TBL_USERPROFILES UP
LEFT JOIN TBL_SPONSORACCESSMGT URM
ON UP.USERID = URM.USERID
LEFT JOIN TBL_CONTACT CNT
ON UP.CONTACTID = CNT.CONTACTID
LEFT JOIN TBL_ROLES RLS
ON URM.ROLEID = RLS.ROLEID
LEFT JOIN TBL_ORGANIZATION ORG
ON UP.ORGID = ORG.ORGID
LEFT JOIN TBL_SPONSOR_BUSINESSUNIT BU
ON BU.BUSINESSUNITID=UP.BUSINESSUNITID
LEFT JOIN TBL_STUDY STDY
ON STDY.STUDYID=URM.STUDYID
LEFT JOIN TBL_COUNTRIES CONTRY
ON CNT.COUNTRYCD = CONTRY.COUNTRYCD';


  STC_SQL_PART2:='SELECT NULL USERID,
    fso.TRANSCELERATEUSERID TRANSCELERATEUSERID,
    BU.BUSINESSUNITNAME BUSINESS_UNIT,
     CASE
         WHEN pkg_encrypt.fn_decrypt(fso.Address2) IS NOT NULL
        AND pkg_encrypt.fn_decrypt(fso.Address3) IS NOT NULL
		AND pkg_encrypt.fn_decrypt(fso.POSTALCODE)IS NOT NULL
        THEN pkg_encrypt.fn_decrypt(fso.Address1)
          || '',''
          || pkg_encrypt.fn_decrypt(fso.Address2)
          || '',''
          || pkg_encrypt.fn_decrypt(fso.Address3)
          || '',''
          ||fso.city
          ||'',''
          ||pkg_encrypt.fn_decrypt(fso.POSTALCODE)
        WHEN pkg_encrypt.fn_decrypt(fso.Address2) IS NULL
        AND pkg_encrypt.fn_decrypt(fso.Address3) IS NOT NULL
		AND pkg_encrypt.fn_decrypt(fso.POSTALCODE)IS NOT NULL
        THEN pkg_encrypt.fn_decrypt(fso.Address1)
          || '', ''
          || pkg_encrypt.fn_decrypt(fso.Address3)
          || '', ''
          ||fso.city
          ||'', ''
          ||pkg_encrypt.fn_decrypt(fso.POSTALCODE)
        WHEN pkg_encrypt.fn_decrypt(fso.Address2) IS NOT NULL
        AND pkg_encrypt.fn_decrypt(fso.Address3) IS NULL
		AND pkg_encrypt.fn_decrypt(fso.POSTALCODE)IS NOT NULL
        THEN pkg_encrypt.fn_decrypt(fso.Address1)
          || '', ''
          || pkg_encrypt.fn_decrypt(fso.Address2)
          || '', ''
          ||fso.city
          ||'', ''
          ||pkg_encrypt.fn_decrypt(fso.POSTALCODE)
        WHEN pkg_encrypt.fn_decrypt(fso.Address2) IS NULL
        AND pkg_encrypt.fn_decrypt(fso.Address3) IS NULL
		AND pkg_encrypt.fn_decrypt(fso.POSTALCODE)IS NOT NULL
        THEN pkg_encrypt.fn_decrypt(fso.Address1)
          ||'', ''
          ||fso.city
		  ||'', ''
          ||pkg_encrypt.fn_decrypt(fso.POSTALCODE)
        WHEN pkg_encrypt.fn_decrypt(fso.Address2) IS NOT NULL
        AND pkg_encrypt.fn_decrypt(fso.Address3) IS NOT NULL
		AND pkg_encrypt.fn_decrypt(fso.POSTALCODE)IS NULL
        THEN
          pkg_encrypt.fn_decrypt(fso.Address1)
          || '', ''
          || pkg_encrypt.fn_decrypt(fso.Address2)
          || '', ''
          || pkg_encrypt.fn_decrypt(fso.Address3)
          || '', ''
          ||fso.city

        WHEN pkg_encrypt.fn_decrypt(fso.Address2) IS NOT NULL
        AND pkg_encrypt.fn_decrypt(fso.Address3) IS NULL
		AND pkg_encrypt.fn_decrypt(fso.POSTALCODE)IS NULL
        THEN pkg_encrypt.fn_decrypt(fso.Address1)
          || '', ''
          ||pkg_encrypt.fn_decrypt(fso.Address2)
          || '', ''
          ||fso.city
        WHEN pkg_encrypt.fn_decrypt(fso.Address2) IS NULL
        AND pkg_encrypt.fn_decrypt(fso.Address3) IS NOT NULL
		AND pkg_encrypt.fn_decrypt(fso.POSTALCODE)IS NULL
        THEN pkg_encrypt.fn_decrypt(fso.Address1)
          || '', ''
          || pkg_encrypt.fn_decrypt(fso.Address3)
          || '', ''
          ||fso.city
        ELSE pkg_encrypt.fn_decrypt(fso.Address1)
          || '', ''
          || pkg_encrypt.fn_decrypt(fso.Address2)
          || '', ''
          || pkg_encrypt.fn_decrypt(fso.Address3)
          || '', ''
          ||fso.city
          ||'', ''
          ||pkg_encrypt.fn_decrypt(fso.POSTALCODE)
      END ADDRESS,
    INITCAP(pkg_encrypt.fn_decrypt (fso.LASTNAME))
    || '', ''
    || INITCAP(pkg_encrypt.fn_decrypt (fso.FIRSTNAME))
    ||'' ''
    ||INITCAP(pkg_encrypt.fn_decrypt (fso.MIDDLENAME)) USERNAME,
    INITCAP(pkg_encrypt.fn_decrypt(fso.FIRSTNAME)) FIRSTNAME,
    INITCAP(pkg_encrypt.fn_decrypt (fso.LASTNAME)) LASTNAME,
    LOWER(pkg_encrypt.fn_decrypt (fso.EMAIL)) EMAIL,
    pkg_encrypt.fn_decrypt (fso.PHONE1) PHONE,
    NULL FAX,
    null ROLEID,--fso.ROLEID,
    RLS.ROLENAME ROLENAME,
    0 STUDYID,
    ''Not Applicable'' STUDYNAME,
    0 SITEID,
    ''Not Applicable'' SITENAME,
    org.ORGID,
    ORG.ORGNAME,
    INITCAP(country.COUNTRYNAME) COUNTRYNAME,
    ''FUTURE ACTIVATION'' USERACCSTATUS,
    ''Y'' ISSPONSOR,
    fso.ACTIVATIONSTARTDT,
    NULL ACTIVATIONENDDT,
    NULL DEACTIVATIONENDREASON,
    fso.ACTIVATIONSTARTDT PLTFMACCESSDT,
    fso.ACTIVATIONSTARTDT EFFECTIVESTARTDATE,
    NULL EFFECTIVEENDDATE,
    ''InActive'' SITEACTSTATUS,
    actualtranscelerateuserid,
    NULL AS PINAME
  FROM TBL_FUTURESPONSORONBOARDING fso
  LEFT JOIN TBL_COUNTRIES country
  ON fso.countryid=country.countryid
  LEFT JOIN tbl_roles rls
  ON fso.roleid =rls.roleid
  LEFT JOIN TBL_ORGANIZATION org
  ON fso.ORGID         =org.ORGID
  LEFT JOIN TBL_SPONSOR_BUSINESSUNIT BU
  ON BU.BUSINESSUNITID=fso.BUSINESSUNITID
  WHERE fso.ISPROCESSED=''N''';



    IF I_STUDYIDS IS NOT NULL AND I_STUDYIDS.count >0 THEN
    FOR i IN 1..I_STUDYIDS.count
    LOOP
      EXIT
    WHEN I_STUDYIDS(i) = -1;
      IF i             = 1 THEN
      STUDY_IDS_STR := I_STUDYIDS(i);
      ELSE
      STUDY_IDS_STR := STUDY_IDS_STR || ',' || I_STUDYIDS(i);
      END IF;
    END LOOP;
    END IF;
    IF STUDY_IDS_STR IS NOT NULL AND I_COUNTRYID IS NOT NULL THEN
    STC_SQL_PART   := STC_SQL_PART|| ' LEFT JOIN TBL_SITE SITE
  ON URM.STUDYID = SITE.STUDYID
  LEFT JOIN TBL_CONTACT SITECNT
  ON SITE.CONTACTID = SITECNT.CONTACTID
  LEFT JOIN TBL_COUNTRIES SITECNTRY
  ON SITECNT.COUNTRYCD = SITECNTRY.COUNTRYCD ';
    END IF;
    DYNMC_SQL_CLAUSE_PART   := ' WHERE (RLS.ROLETYPEID NOT IN (2,3) OR (RLS.ROLETYPEID IN (2,3) AND URM.STUDYID IS NULL)) AND UP.ISSPONSOR = ''Y''' ;
    IF I_LOGGEDINUSERID     IS NOT NULL AND V_ROLE_COUNT > 0 THEN
    DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND STDY.STUDYID in (SELECT STUDYID FROM TBL_USERROLEMAP WHERE USERID = '|| TO_CHAR(I_LOGGEDINUSERID) || ') AND ORG.ORGID = (select ORGID from TBL_USERPROFILES where USERID = ' || TO_CHAR(I_LOGGEDINUSERID) || ')';
    DYNMC_SQL_CLAUSE_PART1 := DYNMC_SQL_CLAUSE_PART1 || '  AND ORG.ORGID = (select ORGID from TBL_USERPROFILES where USERID = ' || TO_CHAR(I_LOGGEDINUSERID) || ')';
    ELSIF I_LOGGEDINUSERID     IS NOT NULL THEN
    DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND ORG.ORGID = (select ORGID from TBL_USERPROFILES where USERID = ' || TO_CHAR(I_LOGGEDINUSERID) || ')';
    DYNMC_SQL_CLAUSE_PART1 := DYNMC_SQL_CLAUSE_PART1 || ' AND ORG.ORGID = (select ORGID from TBL_USERPROFILES where USERID = ' || TO_CHAR(I_LOGGEDINUSERID) || ')';
    END IF;
    IF I_FIRSTNAME          IS NOT NULL THEN
    DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || '  AND ( LOWER(pkg_encrypt.fn_decrypt (UP.FIRSTNAME)) LIKE LOWER(''%' || REPLACE(I_FIRSTNAME,'''','''''') || '%'') OR UP.USERID IN (SELECT DLOG.AFFECTORID FROM TBL_USERDEACTIVATIONLOG DLOG WHERE DLOG.AFFECTORID= '|| I_LOGGEDINUSERID||'))';
    DYNMC_SQL_CLAUSE_PART1 := DYNMC_SQL_CLAUSE_PART1 || ' AND LOWER(pkg_encrypt.fn_decrypt (fso.FIRSTNAME)) LIKE LOWER(''%' || REPLACE(I_FIRSTNAME,'''','''''') || '%'')';
    END IF;
    IF I_LASTNAME           IS NOT NULL THEN
    DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND LOWER(pkg_encrypt.fn_decrypt (UP.LASTNAME)) LIKE LOWER(''%' || REPLACE(I_LASTNAME,'''','''''') || '%'')';
     DYNMC_SQL_CLAUSE_PART1 := DYNMC_SQL_CLAUSE_PART1 || ' AND LOWER(pkg_encrypt.fn_decrypt (fso.LASTNAME)) LIKE LOWER(''%' || REPLACE(I_LASTNAME,'''','''''') || '%'')';
    END IF;
    IF I_TRANSUSERID        IS NOT NULL THEN
    DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND LOWER(UP.TRANSCELERATEUSERID) LIKE  LOWER(''%' || REPLACE(I_TRANSUSERID,'''','''''') || '%'')';
    DYNMC_SQL_CLAUSE_PART1 := DYNMC_SQL_CLAUSE_PART1 || ' AND LOWER(fso.TRANSCELERATEUSERID) LIKE  LOWER(''%' || REPLACE(I_TRANSUSERID,'''','''''') || '%'')';
    END IF;
    IF I_EMAIL              IS NOT NULL THEN
    DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND LOWER(pkg_encrypt.fn_decrypt (CNT.EMAIL)) LIKE LOWER(''%' || I_EMAIL || '%'')';
    DYNMC_SQL_CLAUSE_PART1 := DYNMC_SQL_CLAUSE_PART1 || ' AND LOWER(pkg_encrypt.fn_decrypt (fso.EMAIL)) LIKE LOWER(''%' || I_EMAIL || '%'')';
    END IF;
    IF UPPER(I_ACTSTATUS)    = 'Y' THEN
    DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UP.ISACTIVE =''Y''';
    DYNMC_SQL_CLAUSE_PART1 := DYNMC_SQL_CLAUSE_PART1 || ' AND fso.ISACTIVE =''Y''';
    END IF;
    IF UPPER(I_ACTSTATUS)    = 'N' THEN
    DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UP.ISACTIVE =''N''';
    DYNMC_SQL_CLAUSE_PART1 := DYNMC_SQL_CLAUSE_PART1 || ' AND fso.ISACTIVE =''N''';
    END IF;
     IF UPPER(I_ACTSTATUS)    = 'Both' THEN
    DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UP.ISACTIVE IN (''N'',''Y'')';
    DYNMC_SQL_CLAUSE_PART1 := DYNMC_SQL_CLAUSE_PART1 || ' AND fso.ISACTIVE IN (''N'',''Y'')';
    END IF;

    IF I_ONBRDFROM_DATE       IS NOT NULL THEN
    V_ACTFROM_DATE := TO_CHAR(I_ONBRDFROM_DATE,'dd-mon-yy HH24:MI:SS');
    DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UP.ACTIVATIONSTARTDT   >= TO_DATE('''||V_ACTFROM_DATE||''',''dd-mon-yy HH24:MI:SS'')';--TO_DATE('''|| I_ACTFROM_DATE || ''', ''dd-mon-yy HH24:MI:SS'')';--TO_CHAR(TO_DATE('''|| I_ACTFROM_DATE || '''),''MM/DD/YYYY'')';
    DYNMC_SQL_CLAUSE_PART1 := DYNMC_SQL_CLAUSE_PART1 || ' AND fso.ACTIVATIONSTARTDT   >= TO_DATE('''||V_ACTFROM_DATE||''',''dd-mon-yy HH24:MI:SS'')';--TO_DATE('''|| I_ACTFROM_DATE || ''', ''dd-mon-yy HH24:MI:SS'')';--TO_CHAR(TO_DATE('''|| I_ACTFROM_DATE || '''),''MM/DD/YYYY'')';
    END IF;
    IF I_ONBRDTO_DATE         IS NOT NULL THEN
    V_ACTTO_DATE := TO_CHAR(I_ONBRDTO_DATE,'dd-mon-yy HH24:MI:SS');
    DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND UP.ACTIVATIONSTARTDT   <= TO_DATE('''||V_ACTTO_DATE||''',''dd-mon-yy HH24:MI:SS'')';--TO_DATE('''|| I_ACTTO_DATE || ''', ''dd-mon-yy HH24:MI:SS'')';--TO_CHAR(TO_DATE('''|| I_ACTTO_DATE || '''),''MM/DD/YYYY'')';
    DYNMC_SQL_CLAUSE_PART1 := DYNMC_SQL_CLAUSE_PART1 || ' AND fso.ACTIVATIONSTARTDT   <= TO_DATE('''||V_ACTTO_DATE||''',''dd-mon-yy HH24:MI:SS'')';--TO_DATE('''|| I_ACTTO_DATE || ''', ''dd-mon-yy HH24:MI:SS'')';--TO_CHAR(TO_DATE('''|| I_ACTTO_DATE || '''),''MM/DD/YYYY'')';
    END IF;
    IF STUDY_IDS_STR        IS NOT NULL THEN
    DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND (URM.STUDYID is null or URM.STUDYID  IN(' || STUDY_IDS_STR || '))';
    END IF;


     IF I_ROLEID IS NOT NULL AND I_ROLEID.count >0 THEN
    FOR i IN 1..I_ROLEID.count
    LOOP
      EXIT
    WHEN I_ROLEID(i) = -1;
      IF i             = 1 THEN
      ROLE_IDS_STR := I_ROLEID(i);
      ELSE
      ROLE_IDS_STR := ROLE_IDS_STR || ',' || I_ROLEID(i);
      END IF;
    END LOOP;
    END IF;
    IF ROLE_IDS_STR IS NOT NULL  THEN
    DYNMC_SQL_CLAUSE_PART   := DYNMC_SQL_CLAUSE_PART || ' AND URM.ROLEID IN (' || ROLE_IDS_STR ||')';
    DYNMC_SQL_CLAUSE_PART1   := DYNMC_SQL_CLAUSE_PART1 || ' AND fso.ROLEID IN (' || ROLE_IDS_STR ||')';
    END IF;

    /*IF STUDY_IDS_STR        IS NOT NULL THEN
     IF I_COUNTRYID IS NOT NULL AND I_COUNTRYID.count >0 THEN
    FOR i IN 1..I_COUNTRYID.count
    LOOP
      EXIT
    WHEN I_COUNTRYID(i) = -1;
      IF i             = 1 THEN
      COUNTRY_IDS_STR := I_COUNTRYID(i);
      ELSE
      COUNTRY_IDS_STR := ROLE_IDS_STR || ',' || I_COUNTRYID(i);
      END IF;
    END LOOP;
    END IF;
    IF COUNTRY_IDS_STR IS NOT NULL THEN

     DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND SITECNTRY.COUNTRYID  IN ('||COUNTRY_IDS_STR||')';
  END IF;*/
    IF I_COUNTRYID IS NOT NULL AND I_COUNTRYID.count >0 THEN
    FOR i IN 1..I_COUNTRYID.count
    LOOP
      EXIT
    WHEN I_COUNTRYID(i) = -1;
      IF i             = 1 THEN
      COUNTRY_IDS_STR := I_COUNTRYID(i);
      ELSE
      COUNTRY_IDS_STR := COUNTRY_IDS_STR || ',' || I_COUNTRYID(i);
      END IF;
    END LOOP;
    END IF;
     IF COUNTRY_IDS_STR IS NOT NULL THEN
    DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND CONTRY.COUNTRYID   IN ('||COUNTRY_IDS_STR||')';
  --  DYNMC_SQL_CLAUSE_PART1 := DYNMC_SQL_CLAUSE_PART1 || ' AND CONTRY.COUNTRYID   IN ('||COUNTRY_IDS_STR||')';
    END IF;
--   END IF;
    IF
    I_COUNTRYID IS NOT NULL AND I_COUNTRYID.count >0 THEN
    FOR i IN 1..I_COUNTRYID.count
    LOOP
      EXIT
    WHEN I_COUNTRYID(i) = -1;
      IF i             = 1 THEN
      COUNTRY_IDS_STR := I_COUNTRYID(i);
      ELSE
      COUNTRY_IDS_STR := COUNTRY_IDS_STR || ',' || I_COUNTRYID(i);
      END IF;
    END LOOP;
    END IF;
    IF COUNTRY_IDS_STR IS NOT NULL THEN
    DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND CONTRY.COUNTRYID   IN ('||COUNTRY_IDS_STR||')';
    DYNMC_SQL_CLAUSE_PART1 := DYNMC_SQL_CLAUSE_PART1 || ' AND country.COUNTRYID   IN ('||COUNTRY_IDS_STR||')';
    END IF;

    V_TEMP_ORDRBY := '';
   IF I_SORTBY    = 'FIRSTNAME' THEN
    V_ORDER     := 'trim(lower(FIRSTNAME))';
    ELSIF I_SORTBY = 'LASTNAME' THEN
    V_ORDER     := 'trim(lower(LASTNAME))';
    ELSIF I_SORTBY = 'COUNTRYNAME' THEN
    V_ORDER     := 'trim(lower(COUNTRYNAME))';
    ELSIF I_SORTBY = 'ACTIVATIONSTARTDT' THEN
    V_ORDER     := 'ACTIVATIONSTARTDT';
    ELSIF I_SORTBY = 'ROLENAME' THEN
    V_ORDER     := 'trim(lower(ROLENAME))';
    ELSIF I_SORTBY = 'STUDYNAME' THEN
    V_ORDER     := 'trim(lower(STUDYNAME))';
    ELSIF I_SORTBY = 'TRANSCELERATEUSERID' THEN
    V_ORDER     := 'trim(lower(TRANSCELERATEUSERID))';
    ELSIF I_SORTBY = 'USERACCSTATUS' THEN
    V_ORDER     := 'trim(lower(USERACCSTATUS))';
    ELSIF I_SORTBY = 'EFFECTIVESTARTDATE' THEN
     -- V_ORDER     := 'trim(lower(EFFECTIVESTARTDATE))';
     V_ORDER     := 'EFFECTIVESTARTDATE';
    ELSIF I_SORTBY = 'EFFECTIVEENDDATE' THEN
    --V_ORDER     := 'trim(lower(EFFECTIVEENDDATE))';
    V_ORDER     := 'EFFECTIVEENDDATE';
    ELSIF I_SORTBY = 'PLTFMACCESSDT' THEN
    --V_ORDER     := 'trim(lower(PLTFMACCESSDT))';--SITENAME
    V_ORDER     := 'PLTFMACCESSDT';--SITENAME
    ELSIF I_SORTBY = 'SITENAME' THEN
    V_ORDER     := 'trim(lower(SITENAME))';--SITENAME ACTIVATIONENDDT
    ELSIF I_SORTBY = 'ACTIVATIONENDDT' THEN
    --V_ORDER     := 'trim(lower(ACTIVATIONENDDT))';--SITENAME ACTIVATIONENDDT
    V_ORDER     := 'ACTIVATIONENDDT';--SITENAME ACTIVATIONENDDT, ORGNAME
     ELSIF I_SORTBY = 'ORGNAME' THEN
    --V_ORDER     := 'trim(lower(ACTIVATIONENDDT))';--SITENAME ACTIVATIONENDDT
    V_ORDER     := 'ORGNAME';--SITENAME ACTIVATIONENDDT,
    ELSIF I_SORTBY = 'PINAME' THEN
    V_ORDER := 'trim(lower(PINAME))';
    ELSIF I_SORTBY= 'DEACTIVATIONENDREASON' THEN
    V_ORDER := 'trim(lower(DEACTIVATIONENDREASON))';
    ELSE
     V_ORDER     := 'COUNTRYNAME';
    END IF;
   /* IF V_ORDER              IS NOT NULL THEN
    DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' ORDER BY ' || V_ORDER;
    DYNMC_SQL_CLAUSE_PART1 := DYNMC_SQL_CLAUSE_PART1 || ' ORDER BY ' || V_ORDER;
    ELSIF I_SORTBY          IS NOT NULL THEN
    DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' ORDER BY ' || I_SORTBY;
    DYNMC_SQL_CLAUSE_PART1 := DYNMC_SQL_CLAUSE_PART1 || ' ORDER BY ' || I_SORTBY;
    ELSE
    DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' ORDER BY ' || V_ORDER;
    DYNMC_SQL_CLAUSE_PART1 := DYNMC_SQL_CLAUSE_PART1 || ' ORDER BY ' || V_ORDER;
    END IF;
    IF I_ORDRBY             IS NOT NULL THEN
    DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' ' || I_ORDRBY;
    DYNMC_SQL_CLAUSE_PART1 := DYNMC_SQL_CLAUSE_PART1 ||  ' ' || I_ORDRBY;
    END IF;*/
    V_NOT_EXIST :=' AND NOT EXISTS (SELECT 1 FROM TBL_SPONSORACCESSMGT smgt WHERE smgt.userid = urm.userid AND smgt.roleid = urm.roleid)';
    V_QUERY_FINAL := '((' || STC_SQL_PART ||DYNMC_SQL_CLAUSE_PART|| V_NOT_EXIST ||') UNION ALL (' || STC_SQL_PART1 ||DYNMC_SQL_CLAUSE_PART || '))UNION ALL ('||STC_SQL_PART2 ||DYNMC_SQL_CLAUSE_PART1 ||')';
    V_TEMP_ORDRBY := ' ORDER BY ' || V_ORDER || ' ' || I_ORDRBY;
    V_COUNT_QUERY := 'select count(1) from   (' || V_QUERY_FINAL  || ')';

     dbms_output.put_line(V_COUNT_QUERY);
    -- insert into temp_table values(V_COUNT_QUERY);
     --commit;
    EXECUTE IMMEDIATE V_COUNT_QUERY INTO I_COUNT;
    --V_QUERY_FINAL         := 'SELECT * FROM (SELECT ROWNUM RNUM , TEMP.* FROM (' || V_QUERY_FINAL ;
    PAG_END_ROW           := I_OFFSET + I_LIMIT - 1;
    V_FINAL_QUERY := 'SELECT * FROM (SELECT ROWNUM RNUM , TEMP.* FROM (' || V_QUERY_FINAL ||' )TEMP  '|| V_TEMP_ORDRBY ||' ) WHERE ROWNUM <= ' || TO_CHAR(PAG_END_ROW) || 'AND RNUM >='|| TO_CHAR(I_OFFSET)||'';
    dbms_output.put_line(V_FINAL_QUERY);
    --DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' ) TEMP  WHERE ROWNUM <= ' || TO_CHAR(PAG_END_ROW) ||' ) WHERE RNUM >='|| TO_CHAR(I_OFFSET) ;
    -- dbms_output.put_line(STC_SQL_PART);
    -- dbms_output.put_line(DYNMC_SQL_CLAUSE_PART);
     --insert into temp_table values(STC_SQL_PART || DYNMC_SQL_CLAUSE_PART);
     -- commit;
    OPEN SPONSORUSERACCESSREP FOR V_FINAL_QUERY ;
  END PROC_SPONSOR_USR_ACCESS_REPORT;
  -- SPONSOR USER ACCESS REPORT - END

PROCEDURE SURVEY_RECIPIENT_REG_STATUS(
      I_LOGGEDINUSERID    IN NUMBER,
      I_FIRSTNAME         IN VARCHAR2,
      I_LASTNAME          IN VARCHAR2,
      I_EMAIL             IN VARCHAR2,
      I_COUNTRYID         IN NUM_ARRAY,
      I_STATEID           IN NUM_ARRAY,
      I_SURVEYID          IN NUM_ARRAY,
      I_FACILITYNAME      IN VARCHAR2,
      I_STUDYIDS          IN NUM_ARRAY,
      I_OFFSET            IN NUMBER,
      I_LIMIT             IN NUMBER,
      I_ORDRBY            IN VARCHAR2,
      I_SORTBY            IN VARCHAR2,
      I_COUNT OUT NUMBER,
      SURVEYREGSTATUS OUT SYS_REFCURSOR)
    AS
    SQL_PAGINATION_PART    VARCHAR2(32000 );
    SQL_SELECT_PART        VARCHAR2(32000 );
    SQL_DYNMC_WHERE_PART   VARCHAR2(32000 );
    SQL_DYNMC_SORTING_PART VARCHAR2(32000 );
    PAG_END_ROW            NUMBER;
    SQL_MAIN_QUERY         VARCHAR2(32000 );
    V_COUNT_QUERY          VARCHAR2(32000 );
    STUDY_IDS_STR          VARCHAR2(32000 );
    SITE_IDS_STR           VARCHAR2(32000 );
    V_ORGID                NUMBER;
    TEMP_SORTBY            VARCHAR2(32000 );
    TEMP_ORDRBY            VARCHAR2(32000 );
    COUNTRY_IDS_STR        VARCHAR2(32000);
    V_ROLE_COUNT            NUMBER;
    STATE_IDS_STR           VARCHAR2(32000);
    SURVEYID_IDS_STR        VARCHAR2(32000);



    BEGIN
    TEMP_ORDRBY := '';
    V_ROLE_COUNT := 0;

    IF (I_LOGGEDINUSERID       IS NOT NULL AND I_LOGGEDINUSERID > 0) THEN
      SELECT ORGID
      INTO V_ORGID
      FROM TBL_USERPROFILES
      WHERE USERID = I_LOGGEDINUSERID;

      SELECT COUNT(*) INTO V_ROLE_COUNT
      FROM TBL_USERROLEMAP usrrole
      LEFT JOIN TBL_ROLES tblroles
      ON usrrole.ROLEID        = tblroles.ROLEID
      WHERE tblroles.ROLETYPEID=1
      AND usrrole.EFFECTIVESTARTDATE    <= SYSDATE
      AND (usrrole.EFFECTIVEENDDATE >= SYSDATE
      OR usrrole.EFFECTIVEENDDATE   IS NULL) AND usrrole.USERID=I_LOGGEDINUSERID;

    END IF;

  IF I_SORTBY = 'COUNTRYNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(COUNTRYNAME))';
    ELSIF I_SORTBY = 'LASTNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(LASTNAME))';
    ELSIF I_SORTBY    = 'FIRSTNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(FIRSTNAME))';
    ELSIF I_SORTBY = 'EMAIL' THEN
      TEMP_SORTBY := 'UPPER(TRIM(EMAIL))';
    ELSIF I_SORTBY = 'PHONE1' THEN
      TEMP_SORTBY := 'UPPER(TRIM(PHONE1))';
    ELSIF I_SORTBY = 'FACILITYNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(FACILITYNAME))';
    ELSIF I_SORTBY = 'REGISTRATIONSTATUS' THEN
      TEMP_SORTBY := 'UPPER(TRIM(REGISTRATIONSTATUS))';
    ELSIF I_SORTBY = 'SURVEYCD' THEN
      TEMP_SORTBY := 'UPPER(TRIM(SURVEYCD))';
    ELSIF I_SORTBY = 'SURVEYTITLE' THEN
      TEMP_SORTBY := 'UPPER(TRIM(SURVEYTITLE))';
    ELSIF I_SORTBY = 'SUVSTATUS' THEN
      TEMP_SORTBY := 'UPPER(TRIM(SUVSTATUS))';
    ELSIF I_SORTBY = 'DEPARTMENTNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(DEPARTMENTNAME))';    
     ELSIF I_SORTBY = 'RECIPIENTNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(RECIPIENTNAME))';   
     ELSIF I_SORTBY = 'STUDYNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(STUDYNAME))';
     ELSIF I_SORTBY = 'DELEGATION_STATUS' THEN
      TEMP_SORTBY := 'UPPER(TRIM(SVMTDT.METADATANAME))';  
    ELSIF I_SORTBY = 'TRANSCELERATEUSERID' THEN
      TEMP_SORTBY := 'UPPER(TRIM(TRANSCELERATEUSERID))';
     ELSIF I_SORTBY ='USER_STATUS' THEN
      TEMP_SORTBY := 'UPPER(TRIM(USER_STATUS))';
    ELSE
     TEMP_SORTBY := 'SV.SURVEYCD desc,COUNTRYNAME,FACILITYNAME,DEPARTMENTNAME,RECIPIENTNAME';
    END IF;

    SQL_SELECT_PART := 'SELECT DISTINCT
  SVU.SURVEYUSERID,
  UP.USERID,
  SVU.TRANECELERATEID TRANSCELERATEUSERID,
  UP.ACTUALTRANSCELERATEUSERID,
    (
    CASE
    WHEN UP.USERID IS NULL
    THEN pkg_encrypt.fn_decrypt (SVU.FIRSTNAME)
    ELSE pkg_encrypt.fn_decrypt (UP.FIRSTNAME)
    END ) FIRSTNAME,
    (
    CASE
    WHEN UP.USERID IS NULL
    THEN pkg_encrypt.fn_decrypt (SVU.LASTNAME)
    ELSE pkg_encrypt.fn_decrypt (UP.LASTNAME)
    END ) LASTNAME,
    (
    CASE
    WHEN UP.USERID IS NULL
    THEN pkg_encrypt.fn_decrypt (SVU.EMAIL)
    ELSE pkg_encrypt.fn_decrypt (CNT.EMAIL)
    END ) EMAIL,
    (
    CASE
    WHEN UP.USERID IS NULL
    THEN pkg_encrypt.fn_decrypt (SVU.PHONE)
    ELSE pkg_encrypt.fn_decrypt (CNT.PHONE1)
    END ) PHONE1,
    (
    CASE
    WHEN CONTRY.COUNTRYNAME IS NULL
    THEN SVU.COUNTRY
    ELSE CONTRY.COUNTRYNAME
    END ) COUNTRYNAME,
    STES.STATEID,
    STES.STATENAME,
    (
    CASE
    WHEN SVU.TRANECELERATEID IS NULL
    THEN ''No''
    ELSE ''Yes''
    END ) REGISTRATIONSTATUS,
    SFM.FACILITYID,
    FAC.FACILITYNAME FACILITYNAME,
    SV.SURVEYID,
    SV.SURVEYCD,
    SV.SURVEYTITLE SURVEYTITLE,
    (CASE
    WHEN lower(SVMTDT.METADATANAME) = lower(''Draft'')
    THEN ''Not Sent''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Survey Sent'')
    THEN ''Not Started''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Response Received'')
    THEN ''Completed''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Survey Refused'')
    THEN ''Declined''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Not Submitted Facility Disas'')
    THEN ''Not Submitted, Facility Disas''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Survey In-Progress'')
    THEN ''In-Progress''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Survey Delegated'')
    THEN ''Delegated In-Progress''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Survey Abandoned'')
    THEN ''Expired''
    WHEN lower(SVMTDT.METADATANAME) = lower(''Submitted Facility Disas'')
    THEN ''Submitted, Facility Disas''
    ELSE SVMTDT.METADATANAME
    END ) SUVSTATUS,
    (SELECT STD.STUDYNAME FROM TBL_STUDY STD WHERE STD.STUDYID=SIP.STUDYID) STUDYNAME,
     SVMTDT.METADATANAME DELEGATION_STATUS,
     SIP.STUDYID STUDYID,
     (CASE WHEN UP.TRANSCELERATEUSERID IS NOT NULL THEN ''Yes'' ELSE ''No'' END ) ISREGISTERED,
     (CASE WHEN UP.ACTIVATIONENDDT IS NULL THEN ''Active'' ELSE ''Inactive'' END) USER_STATUS,
    (CASE WHEN FAC.ISDEPARTMENT=''Y'' THEN FAC.FACILITYNAME ELSE SFM.Departmentname END ) DEPARTMENTNAME,
    pkg_encrypt.fn_decrypt(SVU.LASTNAME) ||'', ''||pkg_encrypt.fn_decrypt(SVU.FIRSTNAME)||'' ''||pkg_encrypt.fn_decrypt(UP.MIDDLENAME) RECIPIENTNAME
  FROM TBL_SURVEYUSER SVU
  --LEFT JOIN TBL_FACILITIES FAC
  --ON SVU.FACILITYID = FAC.FACILITYID
  LEFT JOIN TBL_USERPROFILES UP
  ON SVU.TRANECELERATEID = UP.TRANSCELERATEUSERID
  LEFT JOIN TBL_USERROLEMAP USERROLE
  ON USERROLE.Userid=UP.Userid
  LEFT JOIN TBL_SURVEYUSERMAP SVUM
  ON SVU.SURVEYUSERID = SVUM.SURVEYUSERID
  JOIN TBL_SURVEYMETADATA SVMTDT
  ON SVUM.SURVEYSTATUS = SVMTDT.SURVEYMETADATAID
  JOIN TCSIP_CPORTAL.TBL_SURVEY SV
  ON SVUM.BELONGTO           = SV.SURVEYID

  JOIN TCSIP_CPORTAL.TBL_SURVEYSIPASSOCIATION SIP
  ON SIP.Belongto=SV.SURVEYID
  AND SIP.Sponsororganizaionid =(select orgid from tbl_userprofiles  where userid='|| I_LOGGEDINUSERID||' )
  /*AND SIP.Sponsororganizaionid = ( case when up.issponsor=''Y'' then
  UP.Orgid else (SELECT distinct ORG.ORGID
  FROM TBL_STUDY STD,
  TBL_PROGRAM PRG,
  TBL_ORGANIZATION ORG
  WHERE SIP.Studyid=std.studyid
  AND STD.PROGID = PRG.PROGID
  AND PRG.ORGID    = ORG.ORGID
  ) end)*/

  LEFT JOIN TBL_SURVEYFACILITYMAP SFM
  ON (SVU.SURVEYUSERID = SFM.SURVEYUSERID AND SV.SURVEYID = SFM.SURVEYID)
  LEFT JOIN TBL_FACILITIES FAC
  ON (SFM.FACILITYID = FAC.FACILITYID)
  LEFT JOIN TBL_CONTACT CNT
  ON UP.CONTACTID = CNT.CONTACTID
  LEFT JOIN TBL_COUNTRIES CONTRY
  ON CASE
     WHEN UP.USERID IS NULL AND SVU.COUNTRY = CONTRY.COUNTRYCD THEN 1
     WHEN UP.USERID IS NOT NULL AND CNT.COUNTRYCD = CONTRY.COUNTRYCD THEN 1
     ELSE 0
     END = 1
  LEFT JOIN TBL_USEREDUCATION UE
  ON UP.USERID = UE.USERID
  LEFT JOIN TBL_THERAPETICAREAFACILITYMAP TAUM
  ON FAC.FACILITYID = TAUM.Facilityid
  LEFT JOIN TBL_THERAPEUTICAREA THA
  ON TAUM.THERAPEUTICAREAID = THA.THERAPEUTICAREAID
  LEFT JOIN TBL_STATES STES
  ON CNT.STATE = STES.STATECD ';

  IF V_ROLE_COUNT > 0 THEN
  SQL_SELECT_PART:= SQL_SELECT_PART || ' LEFT JOIN TBL_SURVEYSIPASSOCIATION SVSA  ON  SVUM.BELONGTO = SVSA.BELONGTO ';
  END IF;

  SQL_SELECT_PART := SQL_SELECT_PART || ' WHERE SVUM.ISTEMPLATE = ''0'' AND SV.SURVEYID in (SELECT SUR.SURVEYID FROM TBL_SURVEY SUR WHERE SUR.Surveystatus<>34)';
     SQL_DYNMC_WHERE_PART   := '';
   /* IF (I_LOGGEDINUSERID       IS NOT NULL AND I_LOGGEDINUSERID > 0) THEN
      SQL_DYNMC_WHERE_PART  := SQL_DYNMC_WHERE_PART || ' AND (UP.USERID IN (SELECT DISTINCT UP1.USERID FROM
      TBL_USERPROFILES UP1 WHERE UP1.ORGID = ' || TO_CHAR(V_ORGID) || '
      UNION
      SELECT DISTINCT UP2.USERID
      FROM TBL_ORGSITESTAFFMAP OSSM
      JOIN TBL_USERPROFILES UP2
      ON UP2.USERID  = OSSM.SITESTAFFUSERID
      WHERE OSSM.ORGID = ' || TO_CHAR(V_ORGID) || ') OR SVU.TRANECELERATEID IS NULL)  ';
    END IF;
    */

    IF I_FIRSTNAME         IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND LOWER(pkg_encrypt.fn_decrypt (SVU.FIRSTNAME)) LIKE LOWER(''%' || I_FIRSTNAME || '%'')';
    END IF;
    IF I_LASTNAME          IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND LOWER(pkg_encrypt.fn_decrypt (SVU.LASTNAME)) LIKE LOWER(''%' || I_LASTNAME || '%'')';
    END IF;
    IF I_EMAIL             IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND LOWER(pkg_encrypt.fn_decrypt (SVU.EMAIL)) LIKE LOWER(''%' || I_EMAIL || '%'')';
    END IF;
    
    IF I_COUNTRYID IS NOT NULL AND I_COUNTRYID.COUNT>0 THEN 
      FOR I IN 1..I_COUNTRYID.COUNT 
      LOOP
      EXIT WHEN I_COUNTRYID(I)= -1 ;
      IF  I=1 THEN 
        COUNTRY_IDS_STR:=I_COUNTRYID(I);
        ELSE 
         COUNTRY_IDS_STR:= COUNTRY_IDS_STR||','||I_COUNTRYID(I);
         END IF;
       END LOOP;
       END IF;
     IF  COUNTRY_IDS_STR IS NOT NULL THEN 
       SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND SVU.COUNTRY IN (SELECT COUNTRYCD FROM TBL_COUNTRIES WHERE COUNTRYID IN ('||COUNTRY_IDS_STR||'))';   
     END IF;   
    --I_STATEID       
    IF I_STATEID IS NOT NULL AND I_STATEID.COUNT>0 THEN 
      FOR I IN 1..I_STATEID.COUNT 
      LOOP
      EXIT WHEN I_STATEID(I)= -1 ;
      IF  I =1 THEN 
        STATE_IDS_STR:=I_STATEID(I);
        ELSE 
         STATE_IDS_STR:= STATE_IDS_STR||','||I_STATEID(I);
         END IF;
       END LOOP;
       END IF;
     IF  STATE_IDS_STR IS NOT NULL THEN 
       SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND STES.STATEID IN ('||STATE_IDS_STR||')';   
     END IF; 
     
      IF I_SURVEYID IS NOT NULL AND I_SURVEYID.COUNT>0 THEN 
      FOR I IN 1..I_SURVEYID.COUNT 
      LOOP
      EXIT WHEN I_SURVEYID(I)= -1 ;
      IF  I=1 THEN 
        SURVEYID_IDS_STR:=I_SURVEYID(I);
        ELSE 
         SURVEYID_IDS_STR:= SURVEYID_IDS_STR||','||I_SURVEYID(I);
         END IF;
       END LOOP;
       END IF;
     IF  SURVEYID_IDS_STR IS NOT NULL THEN 
       SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND SV.SURVEYID IN ('||SURVEYID_IDS_STR||')';   
     END IF; 

   
      IF I_STUDYIDS IS NOT NULL AND I_STUDYIDS.COUNT>0 THEN 
      FOR I IN 1..I_STUDYIDS.COUNT 
      LOOP
      EXIT WHEN I_STUDYIDS(I)= -1 ;
      IF  I=1 THEN 
        STUDY_IDS_STR:=I_STUDYIDS(I);
        ELSE 
         STUDY_IDS_STR:= STUDY_IDS_STR||','||I_STUDYIDS(I);
         END IF;
       END LOOP;
       END IF;
     IF  STUDY_IDS_STR IS NOT NULL THEN 
       SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND SIP.STUDYID IN ('||STUDY_IDS_STR||')';   
     END IF;    

     /* IF I_PHONE1            IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND LOWER(pkg_encrypt.fn_decrypt (SVU.PHONE)) LIKE LOWER(''%' || I_PHONE1 || '%'')';
    END IF;
    IF I_STATENAME         IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND LOWER(STES.STATENAME) LIKE LOWER(''%' || I_STATENAME || '%'')';
    END IF;
    IF I_CITYNAME          IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND LOWER(SVU.CITY) LIKE LOWER(''%' || I_CITYNAME || '%'')';
    END IF;
     IF I_POSTALCODE        IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND pkg_encrypt.fn_decrypt (CNT.POSTALCODE)= ''' || I_POSTALCODE||'''';

    END IF;
    IF I_COUNTRYNAME         IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND LOWER(SVU.COUNTRY) = LOWER(''' || I_COUNTRYNAME || ''')';
    END IF;*/
    IF I_FACILITYNAME      IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND LOWER(FAC.FACILITYNAME) LIKE LOWER(''%' || Replace(I_FACILITYNAME,'''','''''') ||

  '%'')';
    END IF;
  --    IF I_FACILITYID        IS NOT NULL THEN
  --      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND PEFM.FACILITYID  =' || TO_CHAR(I_FACILITYID);
  --    END IF;
     /* IF I_SURVEYCD          IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND SV.SURVEYCD  =''' || I_SURVEYCD || '''';
    END IF;
    IF I_ROLEID            IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND USERROLE.ROLEID  ='|| I_ROLEID;
    END IF;
    IF I_DEGREE            IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND LOWER(UE.DEGREECOMPLETED) LIKE LOWER(''%' || I_DEGREE ||

  '%'')';
    END IF;
    IF I_THERAPEUTICAREAID IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND THA.THERAPEUTICAREAID  =' || TO_CHAR(I_THERAPEUTICAREAID);
    END IF;*/

  --    IF I_POISTATUSID       IS NOT NULL THEN
  --      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND CD.CODEID  =' || TO_CHAR(I_POISTATUSID);
  --    END IF;
  --    IF I_SUVSTATUSID       IS NOT NULL THEN
  --      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND SVUM.SURVEYSTATUS  =' || TO_CHAR(I_SUVSTATUSID);
  --    END IF;

    /*  IF I_PREEXPWITHSPONSOR  = 'Y' AND (I_LOGGEDINUSERID       IS NOT NULL AND I_LOGGEDINUSERID > 0) THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND UP.USERID IN (
  SELECT URM1.USERID FROM TBL_USERROLEMAP URM1 WHERE URM1.STUDYID IN
  (SELECT ST2.STUDYID FROM TBL_STUDY ST2 WHERE ST2.PROGID IN
  (SELECT PG2.PROGID FROM TBL_PROGRAM PG2 WHERE PG2.ORGID = (SELECT UP2.ORGID FROM TBL_USERPROFILES UP2 WHERE UP2.USERID = '

  || TO_CHAR(I_LOGGEDINUSERID) || '))))';
    END IF;*/

     /* IF I_PREEXPWITHSPONSOR  = 'N' AND (I_LOGGEDINUSERID       IS NOT NULL AND I_LOGGEDINUSERID > 0) THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND (UP.USERID NOT IN (
  SELECT URM1.USERID FROM TBL_USERROLEMAP URM1 WHERE URM1.STUDYID IN
  (SELECT ST2.STUDYID FROM TBL_STUDY ST2 WHERE ST2.PROGID IN
  (SELECT PG2.PROGID FROM TBL_PROGRAM PG2 WHERE PG2.ORGID = (SELECT UP2.ORGID FROM TBL_USERPROFILES UP2 WHERE UP2.USERID = '

  || TO_CHAR(I_LOGGEDINUSERID) || '))))  OR UP.USERID IS NULL)';
    END IF;*/


    IF V_ROLE_COUNT > 0 THEN
    SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||' AND SVSA.STUDYID IN (SELECT STUDYID FROM TBL_USERROLEMAP WHERE USERID = '|| TO_CHAR(I_LOGGEDINUSERID)||
      ' AND EFFECTIVESTARTDATE <= SYSDATE
      AND (EFFECTIVEENDDATE  >= SYSDATE
      OR EFFECTIVEENDDATE    IS NULL)
      )';
    END IF;
  --    IF I_CREATEDBYID       IS NOT NULL THEN
  --      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND SV.CREATEDBY  =' || I_CREATEDBYID;
  --    END IF;

    IF I_ORDRBY             IS NOT NULL THEN
      TEMP_ORDRBY := ' ' || I_ORDRBY;
    END IF;

    IF TEMP_SORTBY              IS NOT NULL AND TEMP_SORTBY = 'SURVEYID' THEN
      SQL_DYNMC_SORTING_PART := SQL_DYNMC_SORTING_PART || ' ORDER BY ' || TEMP_SORTBY || TEMP_ORDRBY;
    ELSIF TEMP_SORTBY              IS NOT NULL AND TEMP_SORTBY <> 'SURVEYID' THEN
    SQL_DYNMC_SORTING_PART := SQL_DYNMC_SORTING_PART || ' ORDER BY ' || TEMP_SORTBY || TEMP_ORDRBY;
    ELSE
      SQL_DYNMC_SORTING_PART := SQL_DYNMC_SORTING_PART || ' ORDER BY ' || TEMP_SORTBY || TEMP_ORDRBY;
    END IF;

    SQL_MAIN_QUERY := SQL_SELECT_PART || SQL_DYNMC_WHERE_PART;
    V_COUNT_QUERY  := 'select count(1) from ((' || SQL_MAIN_QUERY || '))';
    --dbms_output.put_line(V_COUNT_QUERY);
   -- insert into temp_table values(V_COUNT_QUERY);
   -- commit;
    EXECUTE IMMEDIATE V_COUNT_QUERY INTO I_COUNT;
    PAG_END_ROW         := I_OFFSET + I_LIMIT - 1;
    SQL_PAGINATION_PART := 'SELECT * FROM (SELECT ROWNUM RNUM , TEMP.* FROM ((' || SQL_MAIN_QUERY ;
    SQL_PAGINATION_PART := SQL_PAGINATION_PART || ')' || SQL_DYNMC_SORTING_PART ||' ) TEMP  WHERE ROWNUM <= ' || TO_CHAR

  (PAG_END_ROW) ||' ) WHERE RNUM >='|| TO_CHAR(I_OFFSET) ;
     --dbms_output.put_line(SQL_PAGINATION_PART);
    --insert into temp_table values(SQL_PAGINATION_PART);
    --commit;
    OPEN SURVEYREGSTATUS FOR SQL_PAGINATION_PART;
    END SURVEY_RECIPIENT_REG_STATUS;

    PROCEDURE SP_TRAINING_CREDIT(
      I_LOGGEDINUSERID    IN VARCHAR2,
      I_USERID    IN NUMBER,
      I_SPONSORID    IN NUMBER,
      I_STUDYID    IN NUM_ARRAY,
      I_COUNTRYID    IN NUMBER,
      I_STATUS    IN VARCHAR2,
      I_STUDYSITEID    IN NUM_ARRAY,
      P_FROMDATE          IN DATE,
      P_TODATE          IN DATE,
      I_TRAININGTYPE    IN NUMBER,
      I_ROLE    IN NUMBER,
      I_OFFSET            IN NUMBER,
      I_LIMIT             IN NUMBER,
      I_ORDRBY            IN VARCHAR2,
      I_SORTBY            IN VARCHAR2,
      I_COUNT OUT NUMBER,
      TRAININGCREDIT OUT SYS_REFCURSOR)
    AS
    SQL_PAGINATION_PART    VARCHAR2(9999 BYTE);
    SQL_SELECT_PART        VARCHAR2(9999 BYTE);
    SQL_DYNMC_WHERE_PART   VARCHAR2(9999 BYTE);
    SQL_DYNMC_SORTING_PART VARCHAR2(9999 BYTE);
    PAG_END_ROW            NUMBER;
    SQL_MAIN_QUERY         VARCHAR2(9999 BYTE);
    V_COUNT_QUERY          VARCHAR2(9999 BYTE);
    STUDY_IDS_STR          VARCHAR2(9999 BYTE);
    SITE_IDS_STR           VARCHAR2(9999 BYTE);
    V_ORGID                NUMBER;
    TEMP_SORTBY            VARCHAR2(9999 BYTE);
    TEMP_ORDRBY            VARCHAR2(9999 BYTE);
    V_FROMDATE                   VARCHAR2(50);
    V_ENDDATE                   VARCHAR2(50);
    BEGIN
    TEMP_ORDRBY := '';

    IF I_SORTBY    = 'REQUESTEDFOR' THEN
      TEMP_SORTBY := 'REQUESTEDFOR';
    ELSIF I_SORTBY = 'FIRSTNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(FIRSTNAME))';
    ELSIF I_SORTBY = 'LASTNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(LASTNAME))';
    ELSIF I_SORTBY = 'EMAIL' THEN
      TEMP_SORTBY := 'UPPER(TRIM(EMAIL))';
    ELSIF I_SORTBY = 'COURSETITLE' THEN
      TEMP_SORTBY := 'UPPER(TRIM(COURSETITLE))';
    ELSIF I_SORTBY = 'CATEGORYNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(CATEGORYNAME))';
    ELSIF I_SORTBY = 'COMPLETIONDATE' THEN
      TEMP_SORTBY := 'COMPLETIONDATE';
    ELSIF I_SORTBY = 'SPONSOR' THEN
      TEMP_SORTBY := 'UPPER(TRIM(SPONSOR))';
    ELSIF I_SORTBY = 'STATUS' THEN
      TEMP_SORTBY := 'UPPER(TRIM(STATUS))';
    ELSE
      TEMP_SORTBY := 'REQUESTEDFOR';
    END IF;

    SQL_SELECT_PART := 'SELECT  trngCrd.REQUESTID REQUESTEDFOR,
    pkg_encrypt.fn_decrypt (usrPro.FIRSTNAME) FIRSTNAME,
    pkg_encrypt.fn_decrypt (usrPro.LASTNAME) LASTNAME,
    pkg_encrypt.fn_decrypt (contact.EMAIL) EMAIL,
    trngCrd.COURSETITLE COURSETITLE,
    trngCrd.TRNGCATNAME CATEGORYNAME,
    trngCrd.COMPLETIONDT COMPLETIONDATE,
    trngCrd.Reviewer SPONSOR,
    status.TRNGSTATUS STATUS
  FROM TBL_TRNGCREDITS trngCrd
  JOIN TBL_TRNGSTATUS status
  ON trngCrd.TRNG_STATUS_ID = status.TRNGSTATUSID
  JOIN TBL_USERPROFILES usrPro
  ON trngCrd.REQUESTEDFOR=usrPro.USERID
  JOIN TBL_CONTACT contact
  ON usrPro.CONTACTID=contact.CONTACTID
  JOIN TBL_COUNTRIES country
  ON contact.COUNTRYCD=country.COUNTRYCD';


    IF I_USERID         IS NOT NULL THEN
    IF SQL_DYNMC_WHERE_PART IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND ';
      END IF;
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' trngMap.REQUESTID IN (SELECT USERID FROM TBL_USERROLEMAP WHERE STUDYID IN (SELECT STUDYID FROM TBL_USERROLEMAP WHERE ROLEID = '|| I_USERID || '))';
    END IF;
    IF I_SPONSORID          IS NOT NULL THEN
    IF SQL_DYNMC_WHERE_PART IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND ';
      END IF;
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || '  trngMap.TRNGSPONSOR = ' || I_SPONSORID || '';
    END IF;
    IF I_STUDYID             IS NOT NULL AND I_STUDYID.count >0 THEN
      FOR i IN 1..I_STUDYID.count
    LOOP
      EXIT
    WHEN I_STUDYID(i) = -1;
      IF i             = 1 THEN
      STUDY_IDS_STR := I_STUDYID(i);
      ELSE
      STUDY_IDS_STR := STUDY_IDS_STR || ',' || I_STUDYID(i);
      END IF;
    END LOOP;
     IF STUDY_IDS_STR IS NOT NULL THEN
     IF SQL_DYNMC_WHERE_PART IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND ';
      END IF;
     SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || '  trngMap.REQUESTID IN (SELECT USERID FROM TBL_USERROLEMAP WHERE STUDYID IN (' || STUDY_IDS_STR || '))';
     END IF;

    END IF;
    IF I_COUNTRYID            IS NOT NULL THEN
    IF SQL_DYNMC_WHERE_PART IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND ';
      END IF;
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || '  country.COUNTRYID=' || I_COUNTRYID || '%'')';
    END IF;
    IF I_STATUS         IS NOT NULL THEN
    IF SQL_DYNMC_WHERE_PART IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND ';
      END IF;
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || '  lower(status.TRNGSTATUS) = lower(''%' || I_STATUS || '%'')';
    END IF;
    IF I_STUDYSITEID          IS NOT NULL AND I_STUDYSITEID.count >0 THEN
      FOR i IN 1..I_STUDYSITEID.count
      LOOP
      EXIT
      WHEN I_STUDYSITEID(i) = -1;
      IF i            = 1 THEN
        SITE_IDS_STR := I_STUDYSITEID(i);
      ELSE
        SITE_IDS_STR := SITE_IDS_STR || ',' || I_STUDYSITEID(i);
      END IF;
      END LOOP;
      IF SITE_IDS_STR IS NOT NULL THEN
      IF SQL_DYNMC_WHERE_PART IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND ';
      END IF;
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || '  trngMap.REQUESTID IN (SELECT USERID FROM TBL_USERROLEMAP WHERE SITEID IN (' || SITE_IDS_STR || '))';
      END IF;

    END IF;
    IF P_FROMDATE        IS NOT NULL THEN
    IF SQL_DYNMC_WHERE_PART IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND ';
      END IF;
      V_FROMDATE := TO_CHAR(P_FROMDATE,'dd-mon-yy HH24:MI:SS');
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || '  trngCrd.COMPLETIONDT >=   TO_DATE(''' || V_FROMDATE || ''',''dd-Mon-yy hh24:mi:ss'')';
    END IF;
    IF P_TODATE         IS NOT NULL THEN
    IF SQL_DYNMC_WHERE_PART IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND ';
      END IF;
      V_ENDDATE := TO_CHAR(P_TODATE,'dd-mon-yy HH24:MI:SS');
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || '  trngCrd.COMPLETIONDT <=   TO_DATE(''' || V_ENDDATE || ''',''dd-Mon-yy hh24:mi:ss'')';
    END IF;
    IF I_TRAININGTYPE      IS NOT NULL THEN
    IF SQL_DYNMC_WHERE_PART IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND ';
      END IF;
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || '  lower(trngCrd.TRNGTYPE)=lower(' || I_TRAININGTYPE || ')';
    END IF;
    IF I_ROLE          IS NOT NULL THEN
    IF SQL_DYNMC_WHERE_PART IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND ';
      END IF;
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' trngMap.REQUESTID IN (SELECT USERID FROM TBL_USERROLEMAP WHERE ROLEID=' || I_ROLE || '';
    END IF;


    IF I_ORDRBY             IS NOT NULL THEN
      TEMP_ORDRBY := ' ' || I_ORDRBY;
    END IF;

    IF TEMP_SORTBY              IS NOT NULL THEN
      SQL_DYNMC_SORTING_PART := SQL_DYNMC_SORTING_PART || ' ORDER BY ' || TEMP_SORTBY || TEMP_ORDRBY;

    ELSE
      SQL_DYNMC_SORTING_PART := SQL_DYNMC_SORTING_PART || ' ORDER BY REQUESTEDFOR' || TEMP_ORDRBY;
    END IF;


    IF SQL_DYNMC_WHERE_PART IS NULL THEN
    SQL_MAIN_QUERY := SQL_SELECT_PART || SQL_DYNMC_WHERE_PART;
    ELSE
    SQL_MAIN_QUERY := SQL_SELECT_PART || ' WHERE ' || SQL_DYNMC_WHERE_PART;
    END IF;
    V_COUNT_QUERY  := 'select count(1) from ((' || SQL_MAIN_QUERY || '))';
     --INSERT INTO temp_table VALUES (V_COUNT_QUERY); commit;--I_COUNT
    --dbms_output.put_line(V_COUNT_QUERY);
    EXECUTE IMMEDIATE V_COUNT_QUERY INTO I_COUNT;
    PAG_END_ROW         := I_OFFSET + I_LIMIT - 1;
    SQL_PAGINATION_PART := 'SELECT * FROM (SELECT ROWNUM RNUM , TEMP.* FROM ((' || SQL_MAIN_QUERY ;
    SQL_PAGINATION_PART := SQL_PAGINATION_PART || ')' || SQL_DYNMC_SORTING_PART ||' ) TEMP  WHERE ROWNUM <= ' || TO_CHAR

  (PAG_END_ROW) ||' ) WHERE RNUM >='|| TO_CHAR(I_OFFSET) ;
    -- dbms_output.put_line(SQL_PAGINATION_PART);
    OPEN TRAININGCREDIT FOR SQL_PAGINATION_PART;
    END SP_TRAINING_CREDIT;

   PROCEDURE SP_USER_ESIGNATURE_REPORT(
    P_USERID                  IN NUMBER,
    P_TRANSID                 IN VARCHAR2,
    P_DOCTYPECD               IN VARCHAR2,
    P_CREATEDDATEFROM         IN DATE,
    P_CREATEDDATETO           IN DATE,
    P_STUDYID                 IN NUMBER,
    P_OFFSET                  IN NUMBER,
    P_LIMIT                   IN NUMBER,
    P_ORDRBY                  IN VARCHAR2,
    P_SORTBY                  IN VARCHAR2,
    P_USERESIGNATUREDETAILS   OUT SYS_REFCURSOR,
    P_COUNT           OUT NUMBER
    )
    AS
    V_USERID                  NUMBER;
    V_FINAL_QUERY             VARCHAR2(9999 BYTE);
    V_COUNT_QUERY             VARCHAR2(9999 BYTE);
    V_STATIC_SQL_PART         VARCHAR2(9999 BYTE);
    V_DYNMC_WHERE_CLAUSE      VARCHAR2(9999 BYTE);
    V_STARTINDEX              NUMBER;
    V_ENDINDEX                NUMBER;
    V_MSG                     VARCHAR2(500);
    V_ORDRBY                   VARCHAR2(9999 BYTE);
    V_FINAL_QUERY1             VARCHAR2(9999 BYTE);
    V_STUDY_IDS_STR            VARCHAR2(9999 BYTE);

    BEGIN
    V_STARTINDEX :=  P_OFFSET;
    
  /*  if P_ORDRBY is null or P_ORDRBY is not null then

     V_ORDRBY:=' DOC.DOCUSERID,upper(DOC.TITLE),CREATEDDT ';*/
    
    --  end if;
    IF P_OFFSET = 1 THEN
      V_STARTINDEX := P_OFFSET -1;
    END IF;
    
    IF P_USERID IS NOT NULL THEN
      V_USERID  :=  P_USERID;
    ELSE
      SELECT USERID INTO V_USERID FROM TBL_USERPROFILES WHERE lower(TRANSCELERATEUSERID) = lower(P_TRANSID);
    END IF;
    
    V_ENDINDEX:= P_LIMIT + P_OFFSET -1;
        
    V_STATIC_SQL_PART     := '(SELECT * FROM (SELECT ROWNUM RNUM, aa.* FROM
      (SELECT DOC.DOCUMENTID DOCUMENTID,
       DOC.TITLE TITLE,
       DOC.VERSION VERSION,
       DOC.ISFORSTUDY ISFORSTUDY,
       DOC.ISFORUSER ISFORUSER,
       DOC.DOCAUTHORID DOCAUTHORID,
       DOC.DOCUSERID DOCUSERID,
       DOC.STUDYID STUDYID,
       DOC.DESCRIPTION DESCRIPTION,
       DOC.URL URL,
       DOC.DOCTYPECD DOCTYPECD,
       DOC.ISLATEST ISLATEST,
       DOC.ISDELETED ISDELETED,
       to_date(to_char(DOC.EXPIRATIONDT,''DD-MM-YYYY HH24:MI:SS''),''DD-MM-YYYY HH24:MI:SS'') EXPIRATIONDT,
       INITCAP(pkg_encrypt.fn_decrypt (USR.LASTNAME))  || '', ''  || INITCAP(pkg_encrypt.fn_decrypt (USR.FIRSTNAME)) || '' ('' || USR.TRANSCELERATEUSERID ||'')''   CREATEDBY,
       to_date(to_char(DOC.CREATEDDT, ''DD-MM-YYYY HH24:MI:SS''),
           ''DD-MM-YYYY HH24:MI:SS'') CREATEDDT,
       INITCAP(pkg_encrypt.fn_decrypt (USR.LASTNAME))  || '', ''  || INITCAP(pkg_encrypt.fn_decrypt (USR.FIRSTNAME)) || '' ('' || USR.TRANSCELERATEUSERID ||'')''  MODIFIEDBY,
       to_date(to_char(DOC.MODIFIEDDT,''DD-MM-YYYY HH24:MI:SS''),''DD-MM-YYYY HH24:MI:SS'') MODIFIEDDT,
       DOC.ISFORFACILITY ISFORFACILITY,
       DOC.ISFORADDITIONALFACILITY ISFORADDITIONALFACILITY,
       DOC.FACILITYID FACILITYID,
       DOC.ADDITIONALFACILITYID ADDITIONALFACILITYID,
       DOC.AUTHSIGNATORYUSERID AUTHSIGNATORYUSERID,
       DOC.NATUREOFSIGNATURE NATUREOFSIGNATURE,
       DOC.SIGNATUREDATE SIGNATUREDATE,
       pkg_encrypt.fn_decrypt (USR.FIRSTNAME) FIRSTNAME,
       pkg_encrypt.fn_decrypt (USR.LASTNAME) LASTNAME,
       pkg_encrypt.fn_decrypt (USR.MIDDLENAME) MIDDLENAME,
       USR.ISACTIVE ACTIVE,
       USR.USERID USERID,
       USR.TRANSCELERATEUSERID TRANSCELERATEUSERID
    FROM TBL_DOCUMENTS  DOC
    JOIN TBL_USERPROFILES USR
    ON DOC.DOCAUTHORID = USR.USERID';
        
    V_DYNMC_WHERE_CLAUSE := ' WHERE DOC.DOCTYPECD = '''||P_DOCTYPECD||''' 
            AND DOC.DOCAUTHORID = '||V_USERID||' 
            AND TRUNC(TO_DATE(DOC.CREATEDDT,''DD-MON-YY'')) >= TRUNC(to_date('''||P_CREATEDDATEFROM||''',''dd-mon-yy'')) 
            AND TRUNC(TO_DATE(DOC.CREATEDDT,''DD-MON-YY'')) <= TRUNC(to_date('''||P_CREATEDDATETO||''',''dd-mon-yy''))';

      
    /*  IF P_SORTBY IS NOT NULL THEN
      V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' ORDER BY trim(lower(' || P_SORTBY ||'))';
    ELSE*/
     
    /*  END IF;*/
    

    
    IF P_STUDYID IS NOT NULL THEN
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND DOC.STUDYID IN( ' || P_STUDYID || ')';
    END IF;
    
     V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || '  ORDER BY DOC.DOCUSERID,upper(DOC.DOCTYPECD),DOC.SIGNATUREDATE';
    
    IF P_ORDRBY IS NOT NULL THEN
      V_DYNMC_WHERE_CLAUSE       := V_DYNMC_WHERE_CLAUSE || ' ' || P_ORDRBY;
    ELSE
      V_DYNMC_WHERE_CLAUSE       := V_DYNMC_WHERE_CLAUSE || '  ASC';
    END IF;
        
    
    
    V_FINAL_QUERY :=  V_STATIC_SQL_PART || V_DYNMC_WHERE_CLAUSE;
     
    V_FINAL_QUERY1 :=  V_FINAL_QUERY || ' ) aa ) )' ;
    
    V_FINAL_QUERY :=  V_FINAL_QUERY || ' ) aa WHERE ROWNUM <= ' || TO_CHAR(V_ENDINDEX) ||' ) WHERE RNUM >= ' || TO_CHAR(V_STARTINDEX) ||')' ;
    
     V_COUNT_QUERY :=  'SELECT COUNT(*) FROM ' || V_FINAL_QUERY1;
        
    --  DBMS_OUTPUT.PUT_LINE(V_FINAL_QUERY);
    DBMS_OUTPUT.PUT_LINE(V_FINAL_QUERY);
    --INSERT INTO temp_table VALUES (V_FINAL_QUERY);
    OPEN P_USERESIGNATUREDETAILS FOR V_FINAL_QUERY;           
    EXECUTE IMMEDIATE V_COUNT_QUERY INTO P_COUNT;
        
    EXCEPTION
      /*when no data found then log exception*/
      WHEN NO_DATA_FOUND THEN
      V_MSG := 'NO DATA FOUND';
      DBMS_OUTPUT.PUT_LINE(V_MSG);
      
    RETURN;
        
    END SP_USER_ESIGNATURE_REPORT;
    
  procedure sp_user_training_status_sync(v_source IN varchar2) as

    l_maxcreateddt      date;
    l_maxusertrngstatus date;
    l_maxmodifieddt     date;
    SIP_COUNT           number;

  begin

   delete from tbl_user_training_status where source='SIP';

    merge into tbl_user_training_status tuts
    using (select distinct a.coursetitle,
               a.userid       userid,
               a.requestid    requestid,
               a.courseid     courseid,
               a.userid       USER_ID,
               a.completiondt,
               -- t.trngstatusid,
               a.trng_study_id studyid,
               null siteid,
               a.reviewer orgid,

               (case
                 when a.ismrt = 'N' then
                'Non-mutually Recognized Training'
                 else
                'Mutually Recognized Training'
               end) Category,

               (select c.countryid
                from TBL_CONTACT t, tbl_countries c
                 where t.countrycd = c.countrycd
                 and tu.contactid = t.contactid) countryid,
               tt.trainingtypeid,
               a.createddt vcreateddt,
               a.createdby vcreatedby,
               a.modifieddt vmodifieddt,
               a.modifiedby vmodifiedby,
               status.trngstatus,
               a.TRNGPROVIDERNAME
         from
          tbl_trngcredits    a,
          tbl_trainingtype   tt,
          tbl_userprofiles   tu,
          TBL_TRNGSTATUS     status
        where /*t.requestid = a.requestid
        and*/ tt.trainingtypename(+) = a.trngtype
        and a.userid = tu.userid
        and a.TRNG_STATUS_ID = status.trngstatusid) b
    on (b.requestid = tuts.requestid and b.userid = tuts.user_id and b.trngstatus = tuts.COURSE_STATUS)

    when matched then
    update
       set course_id              = b.courseid,
         org_id                 = b.orgid,
         country_id             = b.countryid,
         study_id               = b.studyid,
         site_id                = b.siteid,
         training_type_id       = b.trainingtypeid,
         assigned_by            = null,
         course_title           = b.coursetitle,
         completion_date        = b.completiondt,
         due_date               = null,
         completion_certificate = null,
         category               = b.category,
         source                 = v_source,
         createdby              = b.vcreatedby,
         createddt              = b.vcreateddt,
         modifieddt             = b.vmodifieddt,
         modifiedby             = b.vmodifiedby,
         LAST_SYNC_DATE         = sysdate,
         TRNGPROVIDERNAME       = b.TRNGPROVIDERNAME
         


    WHEN NOT MATCHED THEN
    INSERT
      (id,
       user_id,
       course_id,
       org_id,
       country_id,
       study_id,
       site_id,
       training_type_id,
       assigned_by,
       course_title,
       course_status,
       completion_date,
       due_date,
       completion_certificate,
       category,
       source,
       createdby,
       createddt,
       modifieddt,
       modifiedby,
       LAST_SYNC_DATE,
       requestid,
       TRNGPROVIDERNAME)
    values
      (seq_USER_TRAINING_STATUS.Nextval,
       b.userid,
       b.courseid,
       b.orgid,
       b.countryid,
       b.studyid,
       b.siteid,
       b.trainingtypeid,
       null,
       b.coursetitle,
       b.trngstatus,
       b.completiondt,
       null,
       null,
       b.Category,
       v_source,
       b.vcreatedby,
       b.vcreateddt,
       b.vmodifieddt,
       b.vmodifiedby,
       sysdate,
       b.requestid,
       b.TRNGPROVIDERNAME);

    commit;

  end sp_user_training_status_sync;


 PROCEDURE SP_TRAINING_STATUS_REPORT(
    P_LOGGEDINUSERID IN NUMBER,
    P_ROLEID         IN NUMBER,
    P_CONTENTTYPEID  IN NUMBER,
    P_CONTENTTYPE    IN VARCHAR2,
    P_COUNTRYID      IN number,
    P_TRAININGSTATUS IN VARCHAR2,
    P_TRANSCELERATEUSERID         IN varchar2,
    P_ISINTEGRATION_ACTIVE        In VARCHAR2,
    P_STARTDATE      IN DATE,
    P_ENDDATE        IN DATE,
    P_ORGID          IN NUMBER,
    P_COMPOUNDID     IN NUMBER,
    P_PROGRAMID      IN NUMBER,
    P_STUDYID        IN NUM_ARRAY,
    P_SITEID         IN NUM_ARRAY,
    P_COURSETITLE    IN VARCHAR2,
    P_TRNGPROVIDER   IN VARCHAR2,
    P_REQUIREMENT    IN VARCHAR2,
    P_OFFSET         IN NUMBER,
    P_LIMIT          IN NUMBER,
    P_ORDRBY         IN VARCHAR2,
    P_SORTBY         IN VARCHAR2,
    P_TRAINING_STATUS OUT SYS_REFCURSOR,
    P_COUNT OUT NUMBER)
    AS
    V_USERID                  NUMBER;
    V_FINAL_QUERY             VARCHAR2(9999);
    V_COUNT_START             VARCHAR2(9999);
    V_STATIC_SQL_PART         VARCHAR2(9999);
    V_DYNMC_WHERE_CLAUSE      VARCHAR2(9999);
    V_STARTINDEX              NUMBER;
    V_ENDINDEX                NUMBER;
    V_MSG                     VARCHAR2(500);
    V_ORDER              VARCHAR2(200);
     -- PAG_END_ROW           NUMBER;
    V_ORGID                NUMBER;


    V_STATIC_SQL_PART    VARCHAR2(9999);

    V_FULL_START         VARCHAR2(9999);
    V_WHERE         VARCHAR2(9999);
    V_FROMCD              VARCHAR2(20);
    V_WHERECD          VARCHAR2(100);
     -----
     SQL_PAGINATION_PART    VARCHAR2(9999);
     SQL_SELECT_PART        VARCHAR2(9999);
     SQL_DYNMC_WHERE_PART   VARCHAR2(9999);
     SQL_DYNMC_SORTING_PART VARCHAR2(9999);
     PAG_END_ROW            NUMBER;
     SQL_MAIN_QUERY         VARCHAR2(9999);
     V_COUNT_QUERY          VARCHAR2(9999);
     V_FROMDATE      VARCHAR2(20);
     V_TODATE        VARCHAR2(20);
     STUDY_IDS_STR       VARCHAR2(9999);
    SITE_IDS_STR        VARCHAR2(9999);
    V_URL                VARCHAR2(9999);
    V_empPK              VARCHAR2(9999);
    v_status             varchar2(9999);
    v_IsPonsor           varchar2(1);
    l_count              number;
    l_orgcount           number;
    V_ROLE_COUNT       NUMBER;
    V_TYPE2AND3_ROLE_COUNT NUMBER;
    TYPE s_org IS VARRAY(200) OF varchar2(1000);
    l_org s_org:=s_org();
    ORG_IDS_STR         varchar2(9999);
    V_type1_withoutmonitor_role  number;
    V_type1_withmonitor_role     number;
    v_siterole_count             number;
    v_count                      number;
    V_ROLEID                     number;
    ROLESTUDY                    NUMBER;
    v_count1  number;

    BEGIN
  V_ROLE_COUNT := 0;

  dbms_output.enable(100000);
    V_COUNT_START          := 'SELECT COUNT(*) ';
     -- V_FULL_START           := 'SELECT * ';
    V_FINAL_QUERY:= 'SELECT *';


   IF P_SORTBY    ='FIRSTNAME' THEN
    V_ORDER     := 'UPPER(pkg_encrypt.fn_decrypt (usr.LASTNAME))'||P_ORDRBY||','||'pkg_encrypt.fn_decrypt (UPPER(FIRSTNAME))';
    ELSIF P_SORTBY = 'COUNTRYNAME' THEN
    V_ORDER     := UPPER('country.COUNTRYNAME');
    ELSIF P_SORTBY = 'STUDYNAME' THEN
    V_ORDER     := 'UPPER(STUDYNAME)';
    ELSIF P_SORTBY = 'SITENAME' THEN
    V_ORDER     := 'UPPER(SITENAME)';

   ELSIF P_SORTBY =  'EMAIL' THEN
    V_ORDER     := 'upper(pkg_encrypt.fn_decrypt (cont.EMAIL))';

     ELSIF P_SORTBY = 'COURSE_TITLE' THEN
    V_ORDER     := 'upper(trainStat.COURSE_TITLE)';

     ELSIF P_SORTBY = 'COMPLETION_DATE' THEN
    V_ORDER     := 'COMPLETION_DATE';

     ELSIF P_SORTBY = 'DUE_DATE' THEN
    V_ORDER     := 'trainStat.DUE_DATE';


     ELSIF P_SORTBY = 'COMPLETION_CERTIFICATE' THEN
    V_ORDER     := 'trainStat.COMPLETION_CERTIFICATE';

    ELSIF P_SORTBY = 'CATEGORY' THEN
    V_ORDER     := 'trainStat.CATEGORY';

    ELSIF P_SORTBY = 'COURSE_STATUS' THEN
    V_ORDER     := UPPER('COURSE_STATUS');

    ELSIF P_SORTBY = 'TRANSCELERATEUSERID' THEN
    V_ORDER     := 'usr.TRANSCELERATEUSERID';

     ELSIF P_SORTBY = 'ORG_ID' THEN
    V_ORDER     := 'trainStat.ORG_ID';

    ELSIF P_SORTBY = 'TRNGPROVIDERNAME' THEN
    V_ORDER     := 'UPPER(trainStat.TRNGPROVIDERNAME)';

     ELSIF P_SORTBY = 'TRAININGTYPENAME' THEN
    V_ORDER     := 'UPPER(tt.TRAININGTYPENAME)';

    ELSIF P_SORTBY = 'REQUIREMENT_TYPE' THEN
    V_ORDER     := 'UPPER(trainStat.REQUIREMENT_TYPE)';

   ELSE
    V_ORDER := 'trainStat.STUDY_ID';
    END IF;

  select a.issponsor into v_IsPonsor from Tbl_UserProfiles a  where a.userid=P_LOGGEDINUSERID;
  if v_IsPonsor='N' /*or v_IsPonsor='Y'*/  then
  select count(*) into v_count from tbl_userrolemap ur where ur.userid=P_LOGGEDINUSERID and ur.roleid in (23,48);
  elsif  v_count>0 then
  select ur.roleid into V_ROLEID from tbl_userrolemap ur where ur.userid=P_LOGGEDINUSERID and ur.roleid in (23) and rownum=1;

  end if;


  V_FULL_START := 'FROM (SELECT ROWNUM RNUM1 ,AA.*  FROM (SELECT ID,
    trainStat.USER_ID,
    usr.TRANSCELERATEUSERID,
    pkg_encrypt.fn_decrypt (usr.FIRSTNAME) FIRSTNAME,
    pkg_encrypt.fn_decrypt (usr.LASTNAME) LASTNAME,
    trainStat.COURSE_ID,
    trainStat.ORG_ID,
    (case when trainStat.Org_Id is not null then
    (select org.orgname from TBL_ORGANIZATION org where org.orgid=trainStat.Org_Id)   else null end) as ORGNAME ,
    (case when trainStat.Study_Id is not null then
    (select std.studyname from TBL_STUDY std where std.studyid=trainStat.Study_Id)   else null end) as STUDYNAME ,
      trainStat.STUDY_ID,
     (case when trainStat.Site_Id is not null then
    (select sit.sitename from TBL_SITE sit where sit.siteid=trainStat.Site_Id)   else null end) as SITENAME ,
    trainStat.SITE_ID,
    pkg_encrypt.fn_decrypt (cont.EMAIL) EMAIL,
     (select distinct tcon.countryid  from Tbl_Countries tcon,tbl_contact con,tbl_facilities tfacil,tbl_site site,tbl_userrolemap tur
  where trainStat.user_id=tur.userid
   --and site.studyid=tur.studyid
   and  tur.siteid=site.siteid
   and site.siteid=trainStat.Site_Id
   and site.PRINCIPALFACILITYID=tfacil.facilityid
   and tfacil.contactid=con.contactid
   and con.countrycd=tcon.countrycd) countryid,

   (select distinct countryname  from Tbl_Countries tcon,tbl_contact con,tbl_facilities tfacil,tbl_site site,tbl_userrolemap tur
  where trainStat.user_id=tur.userid
   --and site.studyid=tur.studyid
   and  tur.siteid=site.siteid
   and site.siteid=trainStat.Site_Id
   and site.PRINCIPALFACILITYID=tfacil.facilityid
   and tfacil.contactid=con.contactid
   and con.countrycd=tcon.countrycd) COUNTRYNAME,
    trainStat.TRAINING_TYPE_ID as CONTENT_TYPE_ID,
    tt.trainingtypename as CONTENT_TYPE,
    trainStat.TRAINING_TYPE_ID,
     tt.TRAININGTYPENAME,
    trainStat.ASSIGNED_BY,
    trainStat.COURSE_TITLE,
  (CASE WHEN '''||v_IsPonsor||''' = ''N''  and upper(trainStat.COURSE_STATUS)= ''PENDING''
              THEN ''Sent for Approval''

      ELSE  (CASE
              WHEN upper (trainStat.COURSE_STATUS)= ''REVIEW''
              THEN ''Site Action Required'' else INITCAP(trainStat.COURSE_STATUS)
          END)  end)  COURSE_STATUS,
    trainStat.COMPLETION_DATE,
    trainStat.DUE_DATE,
    trainStat.COMPLETION_CERTIFICATE,
    null as ATTEMPT,
    trainStat.CATEGORY,
    trainStat.SOURCE,
    trainStat.MODIFIEDDT,
    trainStat.MODIFIEDBY,
    trainStat.CREATEDBY,
    trainStat.CREATEDDT,
    trainStat.URL URL,
    trainStat.empPK empPK,
    trainStat.requestid requestid,
    trainStat.ATTEMPT_ID,
    trainStat.EQUIVALCOMPLETION,
    trainStat.REQUIREMENT_TYPE,
    trainStat.TRNGPROVIDERNAME,
    (SELECT DISTINCT too.TRNG_SPONSOR
    FROM tbl_trngcredits too
    WHERE too.requestid=trainStat.requestid
    ) SPONSOR,
    (select Irid from  TBL_IRUSERMAP where TRANSCELERATEUSERID=REGEXP_SUBSTR(trainStat.Assigned_By, ''[^@]+'')) AssignedByIRID,
    trainStat.Courseversion,
    TIR.Irid

  FROM TBL_USER_TRAINING_STATUS trainStat
  JOIN TBL_USERPROFILES usr
  ON trainStat.USER_ID = usr.USERID
  JOIN TBL_CONTACT cont
  ON usr.CONTACTID = cont.CONTACTID
  JOIN Tbl_Countries tcc
  ON cont.countrycd=tcc.countrycd
  JOIN TBL_TRAININGTYPE tt
  on tt.trainingtypeid=trainStat.TRAINING_TYPE_ID
  JOIN TBL_IRUSERMAP TIR
  on TIR.Transcelerateuserid=usr.transcelerateuserid
  -- and usr.isactive=''Y''
  And (trainStat.ISACTIVE is null or trainStat.ISACTIVE= ''Y'')';
  --DBMS_OUTPUT.PUT_LINE('----'||P_LOGGEDINUSERID);
  --DBMS_OUTPUT.PUT_LINE('----'||P_ROLEID);
  --DBMS_OUTPUT.PUT_LINE(V_FULL_START);


  V_DYNMC_WHERE_CLAUSE   := '';

  SELECT COUNT(*) INTO V_TYPE2AND3_ROLE_COUNT
    FROM TBL_USERROLEMAP usrrole
    LEFT JOIN TBL_ROLES tblroles
    ON usrrole.ROLEID        = tblroles.ROLEID
    WHERE tblroles.ROLETYPEID IN (2,3)
    AND usrrole.EFFECTIVESTARTDATE    <= SYSDATE
    AND (usrrole.EFFECTIVEENDDATE >= SYSDATE
    OR usrrole.EFFECTIVEENDDATE   IS NULL) AND usrrole.USERID=P_LOGGEDINUSERID;

    IF V_TYPE2AND3_ROLE_COUNT <1 THEN

    SELECT COUNT(*) INTO V_ROLE_COUNT
    FROM TBL_USERROLEMAP usrrole
    LEFT JOIN TBL_ROLES tblroles
    ON usrrole.ROLEID        = tblroles.ROLEID
    WHERE tblroles.ROLETYPEID=1
    AND usrrole.EFFECTIVESTARTDATE    <= SYSDATE
    AND (usrrole.EFFECTIVEENDDATE >= SYSDATE
    OR usrrole.EFFECTIVEENDDATE   IS NULL) AND usrrole.USERID=P_LOGGEDINUSERID;

    SELECT count(*) into V_type1_withoutmonitor_role
    FROM TBL_USERROLEMAP usrrole
    LEFT JOIN TBL_ROLES tblroles
    ON usrrole.ROLEID        = tblroles.ROLEID
    WHERE tblroles.ROLETYPEID IN (1)
    AND usrrole.EFFECTIVESTARTDATE    <= SYSDATE
    AND (usrrole.EFFECTIVEENDDATE >= SYSDATE
    OR usrrole.EFFECTIVEENDDATE   IS NULL)
    AND tblroles.rolename not in ('Monitor') AND usrrole.USERID=P_LOGGEDINUSERID;

    SELECT count(*) into V_type1_withmonitor_role
    FROM TBL_USERROLEMAP usrrole
    LEFT JOIN TBL_ROLES tblroles
    ON usrrole.ROLEID        = tblroles.ROLEID
    WHERE tblroles.ROLETYPEID IN (1)
    AND usrrole.EFFECTIVESTARTDATE    <= SYSDATE
    AND (usrrole.EFFECTIVEENDDATE >= SYSDATE
    OR usrrole.EFFECTIVEENDDATE   IS NULL)
    AND tblroles.rolename  in ('Monitor') AND usrrole.USERID=P_LOGGEDINUSERID;

    SELECT count(*) into v_siterole_count
    FROM TBL_USERROLEMAP usrrole
    LEFT JOIN TBL_ROLES tblroles
    ON usrrole.ROLEID        = tblroles.ROLEID
    WHERE  usrrole.EFFECTIVESTARTDATE    <= SYSDATE
    AND (usrrole.EFFECTIVEENDDATE >= SYSDATE
    OR usrrole.EFFECTIVEENDDATE   IS NULL)
    and   tblroles.rolename in ('Delegate for SIP Study Site Maintenance','Principal Investigator') AND usrrole.USERID=P_LOGGEDINUSERID;
  END IF;


   /*  if V_ORGID is null
    then
    if P_STUDYID is null and
     -- then V_ORGID :=nvl(V_ORGID,0);----needs to be clarified
     V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND trainStat.ORG_ID is null '  ;
  end if;*/

  IF (P_LOGGEDINUSERID IS NOT NULL AND P_LOGGEDINUSERID !=0) and v_IsPonsor='Y'  AND V_type1_withmonitor_role >= 1  AND  V_type1_withoutmonitor_role >= 1  THEN

  V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' and  (study_id is null or  trainStat.Study_Id in (select a.studyid from tbl_userrolemap a where a.userid='||P_LOGGEDINUSERID||')  and  trainStat.Site_Id in ( select a.siteid from tbl_userrolemap a where a.userid='||P_LOGGEDINUSERID||'))'  ;

  end if;



  IF (P_LOGGEDINUSERID IS NOT NULL AND P_LOGGEDINUSERID !=0) and v_IsPonsor='Y'  AND V_type1_withmonitor_role >= 1  AND  V_type1_withoutmonitor_role < 1 and v_siterole_count>=1 AND P_ISINTEGRATION_ACTIVE IS NULL THEN

  V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' and  trainStat.Site_Id in (select siteid from tbl_userrolemap where studyid in ( select a.studyid from tbl_userrolemap a where a.userid='||P_LOGGEDINUSERID||'))'  ;

  end if;


  IF (P_LOGGEDINUSERID IS NOT NULL AND P_LOGGEDINUSERID !=0) and v_IsPonsor='Y'  AND V_type1_withoutmonitor_role >= 1 AND V_type1_withmonitor_role < 1 AND V_ROLE_COUNT < 1 AND P_ISINTEGRATION_ACTIVE IS NULL THEN

  V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' and  trainStat.STUDY_ID in ( select a.studyid from tbl_userrolemap a where a.userid='||P_LOGGEDINUSERID||')' ;

  end if;


  IF (P_LOGGEDINUSERID IS NOT NULL AND P_LOGGEDINUSERID !=0) and v_IsPonsor='Y'  AND V_TYPE2AND3_ROLE_COUNT >= 1 OR P_ISINTEGRATION_ACTIVE IS NOT NULL  THEN

  V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' and (trainStat.Org_Id not in(select a.orgid  from  tbl_organization a where a.orgid<>(select ORGID from TBL_USERPROFILES where USERID = '||P_LOGGEDINUSERID||')) or trainStat.Org_Id is null)' ;

  end if;

  IF (P_LOGGEDINUSERID IS NOT NULL AND P_LOGGEDINUSERID !=0) and v_IsPonsor='Y'  AND V_ROLE_COUNT >=1 AND V_TYPE2AND3_ROLE_COUNT <= 1 AND P_ISINTEGRATION_ACTIVE IS NULL THEN
    SELECT distinct ORGID INTO V_ORGID FROM TBL_USERPROFILES WHERE userid  = P_LOGGEDINUSERID;
  V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' and (trainStat.Org_Id='||V_ORGID||' or org_id is null)  and (study_id is null or  study_id in (select a.studyid from tbl_userrolemap a where a.userid='||P_LOGGEDINUSERID||' and (a.effectiveenddate is null or a.effectivestartdate> sysdate)) ) ';

  ELSIF (P_LOGGEDINUSERID IS NOT NULL AND P_LOGGEDINUSERID !=0) and v_IsPonsor='Y'  and V_ROLE_COUNT <1 AND V_TYPE2AND3_ROLE_COUNT < 1 AND P_ISINTEGRATION_ACTIVE IS NULL THEN
    SELECT distinct ORGID INTO V_ORGID FROM TBL_USERPROFILES WHERE userid  = P_LOGGEDINUSERID;

    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' and (trainStat.Org_Id not in(select a.orgid  from  tbl_organization a where a.orgid<>'||V_ORGID ||') or trainStat.Org_Id is null)';


  /*elsif v_IsPonsor='N' and v_siterole_count >=1 then

  V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' and  trainStat.Site_Id in ( select a.siteid from tbl_userrolemap a where a.userid='||P_LOGGEDINUSERID||')';
  */
   elsif  v_IsPonsor='N' and P_ORGID is not null and P_ORGID!=0 and ((P_STUDYID is null or P_STUDYID.count >0)or (P_SITEID is null or P_SITEID.count >0))  then

    V_ORGID:=P_ORGID;
     V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' and (trainStat.ORG_ID is null or  trainStat.ORG_ID = '||V_ORGID||')  and (study_id is null or study_id  in (select studyid from tbl_userrolemap where userid='||P_LOGGEDINUSERID||' and roleid in(23,48)))';



  elsif  v_IsPonsor='N' and P_ORGID is not null  and (P_STUDYID is not null or P_SITEID is not null) and P_ISINTEGRATION_ACTIVE is null then

    V_ORGID:=P_ORGID;
     V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' and (trainStat.ORG_ID is null or trainStat.ORG_ID = '||V_ORGID||')  and (study_id is null or study_id  in (select studyid from tbl_userrolemap where userid='||P_LOGGEDINUSERID||' and roleid not in(23,48)))';


  elsif  v_IsPonsor='N' and P_ORGID is null  then
  --  for j in 1 ..l_org.count loop
  /*  SELECT RTRIM (
        XMLAGG (XMLELEMENT (e, orgid  || ',')).EXTRACT ('//text()'),
        ',') bulk collect into  l_org from tbl_orgsitestaffmap where sitestaffuserid =P_LOGGEDINUSERID;
          */
  --dbms_output.put_line(l_org(j));

  SELECT RTRIM (
        XMLAGG (XMLELEMENT (e, pr.orgid  || ',')).EXTRACT ('//text()'),
        ',') bulk collect into  l_org from TBL_USERROLEMAP si,tbl_study st,tbl_program pr
        where si.studyid=st.studyid and st.progid=pr.progid
         and si.userid =P_LOGGEDINUSERID
         and si.roleid in(23,48) and (si.EFFECTIVEENDDATE > sysdate or si.EFFECTIVEENDDATE is null);


    IF l_org  IS NOT NULL  THEN
    FOR i IN 1..l_org.count
    LOOP
      EXIT
    WHEN l_org(i) is null;
      IF i             = 1 THEN
      ORG_IDS_STR := l_org(i);
      ELSE
      ORG_IDS_STR := ORG_IDS_STR || ',' || l_org(i);
      END IF;

    END LOOP;

    END IF;


   IF  ORG_IDS_STR IS NOT NULL THEN


   V_DYNMC_WHERE_CLAUSE :=V_DYNMC_WHERE_CLAUSE|| ' AND (trainStat.ORG_ID is null or trainStat.ORG_ID in ('||ORG_IDS_STR||') and (study_id is null or study_id  in (select studyid from tbl_userrolemap where userid='||P_LOGGEDINUSERID||' and roleid in(23,48)))) ' ;


    END IF;


    -- dbms_output.put_line(V_DYNMC_WHERE_CLAUSE);
  /*
   ELSIF (P_ORGID IS NOT NULL AND P_ORGID !=0) THEN
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' WHERE  org.ORG_ID in ('||V_ORGID||')';
      dbms_output.put_line(V_DYNMC_WHERE_CLAUSE);*/
  /*
  elsif P_ORGID is null then
     V_DYNMC_WHERE_CLAUSE :=V_DYNMC_WHERE_CLAUSE||' WHERE org.ORGID = trainStat.ORG_ID';*/
     end if;




    IF P_COMPOUNDID        IS NOT NULL AND P_COMPOUNDID !=0 THEN -- i is even
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND s.COMPOUNDID = '||P_COMPOUNDID;
    --V_COUNT_START := V_COUNT_START || V_DYNMC_WHERE_CLAUSE;
    --DBMS_OUTPUT.PUT_LINE(V_DYNMC_WHERE_CLAUSE);
    END IF;

    IF P_STARTDATE  IS NOT NULL  THEN -- i is even
      V_FROMDATE:=TO_CHAR(P_STARTDATE,'dd-mon-yy HH24:MI:SS');
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND trainStat.COMPLETION_DATE>= TO_DATE('''|| V_FROMDATE || ''', ''dd-mon-yy HH24:MI:SS'')';
    --V_COUNT_START := V_COUNT_START || V_DYNMC_WHERE_CLAUSE;
    --DBMS_OUTPUT.PUT_LINE(V_DYNMC_WHERE_CLAUSE);
    END IF;

      IF P_ENDDATE  IS NOT NULL  THEN -- i is even
      V_TODATE:=TO_CHAR(P_ENDDATE,'dd-mon-yy HH24:MI:SS');
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND trainStat.COMPLETION_DATE<=TO_DATE('''|| V_TODATE || ''', ''dd-mon-yy HH24:MI:SS'')';
    --V_COUNT_START := V_COUNT_START || V_DYNMC_WHERE_CLAUSE;
    --DBMS_OUTPUT.PUT_LINE(V_DYNMC_WHERE_CLAUSE);
    END IF;

  /*  IF P_LOGGEDINUSERID       IS NOT NULL AND P_LOGGEDINUSERID > 0 AND V_ROLE_COUNT > 0 THEN
  V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND STUDY_ID in (SELECT STUDYID FROM TBL_USERROLEMAP WHERE USERID = '|| TO_CHAR(P_LOGGEDINUSERID) || ') AND ORG.ORGID = (select ORGID from TBL_USERPROFILES where USERID = ' || TO_CHAR(P_LOGGEDINUSERID) || ')';

    ELSIF P_LOGGEDINUSERID       IS NOT NULL AND P_LOGGEDINUSERID > 0 THEN
      V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND ORG_ID = (select ORGID from TBL_USERPROFILES where USERID = ' || TO_CHAR(P_LOGGEDINUSERID) || ')';
    END IF;*/



    IF P_STUDYID  IS NOT NULL AND P_STUDYID.count >0 THEN
    FOR i IN 1..P_STUDYID.count
    LOOP
      EXIT
    WHEN P_STUDYID(i) = -1;
      IF i             = 1 THEN
      STUDY_IDS_STR := P_STUDYID(i);
      ELSE
      STUDY_IDS_STR := STUDY_IDS_STR || ',' || P_STUDYID(i);
      END IF;

    END LOOP;

    END IF;

     IF P_SITEID IS NOT NULL AND P_SITEID.count >0 THEN
    FOR i IN 1..P_SITEID.count
    LOOP
      EXIT
    WHEN P_SITEID(i) = -1;
      IF i            = 1 THEN
      SITE_IDS_STR := P_SITEID(i);
      ELSE
      SITE_IDS_STR := SITE_IDS_STR || ',' || P_SITEID(i);
      END IF;
    END LOOP;


    END IF;


  /*IF STUDY_IDS_STR IS NOT NULL AND P_STUDYID IS NULL and P_SITEID IS null THEN
     IF V_DYNMC_WHERE_CLAUSE IS NOT NULL THEN
      V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND ';
      END IF;
      if SITE_IDS_STR is not null then
     V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || '  ( trainStat.study_id in (' || STUDY_IDS_STR || ') or  trainStat.study_id is null) ' ;
      elsif SITE_IDS_STR is null then
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' ( trainStat.study_id in (' || STUDY_IDS_STR || ') or trainStat.study_id is null) ';
   end if;
   END IF;*/

   IF STUDY_IDS_STR IS NOT NULL /*AND P_STUDYID IS NULL and P_SITEID IS null*/ THEN
     IF V_DYNMC_WHERE_CLAUSE IS NOT NULL THEN
      V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND ';
      END IF;
      if SITE_IDS_STR is not null then
     V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || '  ( trainStat.study_id in (' || STUDY_IDS_STR || ') or  trainStat.study_id is null) ' ;
      elsif SITE_IDS_STR is null then
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' ( trainStat.study_id in (' || STUDY_IDS_STR || ') or trainStat.study_id is null) ';
   end if;
   END IF;

  IF STUDY_IDS_STR IS NOT NULL AND P_STUDYID IS NOT NULL and P_SITEID is not null THEN
     IF V_DYNMC_WHERE_CLAUSE IS NOT NULL THEN
      V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND ';
      END IF;
      if SITE_IDS_STR is not null then
     V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || '  ( trainStat.study_id in (' || STUDY_IDS_STR || ') or  trainStat.study_id is null)  AND  user_id in (select ur.userid from tbl_userrolemap ur where ur.studyid in ('||STUDY_IDS_STR||')) ' ;
      elsif SITE_IDS_STR is null then
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' ( trainStat.study_id in (' || STUDY_IDS_STR || ') or trainStat.study_id is null)  AND  user_id in (select ur.userid from tbl_userrolemap ur where ur.studyid in ('||STUDY_IDS_STR||')) ';
   end if;
   END IF;

   IF STUDY_IDS_STR IS NOT NULL AND P_STUDYID IS NOT NULL and P_SITEID is  null THEN
     IF V_DYNMC_WHERE_CLAUSE IS NOT NULL THEN
      V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND ';
      END IF;
      if SITE_IDS_STR is not null then
     V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || '  ( trainStat.study_id in (' || STUDY_IDS_STR || ') or  trainStat.study_id is null)  AND  user_id in (select ur.userid from tbl_userrolemap ur where ur.studyid in ('||STUDY_IDS_STR||'))' ;
      elsif SITE_IDS_STR is null then
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' ( trainStat.study_id in (' || STUDY_IDS_STR || ') or trainStat.study_id is null)  AND  user_id in (select ur.userid from tbl_userrolemap ur where ur.studyid in ('||STUDY_IDS_STR||')) ';
   end if;
   END IF;


  /* IF STUDY_IDS_STR IS NOT NULL AND P_STUDYID IS NOT NULL and P_SITEID is  null THEN
     IF V_DYNMC_WHERE_CLAUSE IS NOT NULL THEN
      V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND ';
      END IF;
      if SITE_IDS_STR is not null then
     V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || '  ( trainStat.study_id in (' || STUDY_IDS_STR || ') or  trainStat.study_id is null)  AND  user_id in (select ur.userid from tbl_userrolemap ur where ur.studyid='||STUDY_IDS_STR||') ' ;
      elsif SITE_IDS_STR is null then
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' ( trainStat.study_id in (' || STUDY_IDS_STR || ') or trainStat.study_id is null)  AND  user_id in (select ur.userid from tbl_userrolemap ur where ur.studyid='||STUDY_IDS_STR||') ';
   end if;
   END IF;
  */


  IF SITE_IDS_STR IS NOT NULL/* AND P_STUDYID IS  NULL and P_SITEID is  null*/ THEN
      IF V_DYNMC_WHERE_CLAUSE IS NOT NULL THEN
      V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND ';
      END IF;
      V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || '  ( trainStat.site_id in ('||SITE_IDS_STR||' ) or trainStat.site_id is null)';
      END IF;


   IF SITE_IDS_STR IS NOT NULL AND P_STUDYID IS NOT NULL and P_SITEID is NOT null THEN
      IF V_DYNMC_WHERE_CLAUSE IS NOT NULL THEN
      V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND ';
      END IF;
      V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || '  ( trainStat.site_id in ('||SITE_IDS_STR||' ) or trainStat.site_id is null) AND  user_id in (select ur.userid from tbl_userrolemap ur where ur.siteid in ('||SITE_IDS_STR||'))';
      END IF;

    IF P_CONTENTTYPE   IS NOT NULL /*AND P_CONTENTTYPE !=0*/ THEN -- i is even
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND tt.trainingtypename = '''||P_CONTENTTYPE||'''';
    --V_COUNT_START := V_COUNT_START || V_DYNMC_WHERE_CLAUSE;
    --DBMS_OUTPUT.PUT_LINE(V_DYNMC_WHERE_CLAUSE);
    END IF;

     IF P_CONTENTTYPEID   IS NOT NULL AND P_CONTENTTYPEID !=0 THEN -- i is even
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' WHERE trainStat.TRAINING_TYPE_ID = '||P_CONTENTTYPEID;
    --V_COUNT_START := V_COUNT_START || V_DYNMC_WHERE_CLAUSE;
    --DBMS_OUTPUT.PUT_LINE(V_DYNMC_WHERE_CLAUSE);
    END IF;

     IF P_TRAININGSTATUS   IS NOT NULL /*AND P_TRAININGSTATUS !=0*/ THEN -- i is even
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND UPPER(trainStat.COURSE_STATUS) =UPPER( '''||P_TRAININGSTATUS||''')';
    --V_COUNT_START := V_COUNT_START || V_DYNMC_WHERE_CLAUSE;
     --DBMS_OUTPUT.PUT_LINE(V_DYNMC_WHERE_CLAUSE);
    END IF;

    IF P_ROLEID   IS NOT NULL AND P_ROLEID !=0 and  v_IsPonsor='N' AND v_count=0  THEN -- i is even
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND  userid in (select userid from tbl_userrolemap where roleid='||P_ROLEID||')';
    --V_COUNT_START := V_COUNT_START || V_DYNMC_WHERE_CLAUSE;
    --DBMS_OUTPUT.PUT_LINE(V_DYNMC_WHERE_CLAUSE);
    END IF;

      IF P_ROLEID   IS NOT NULL AND P_ROLEID !=0 and v_IsPonsor='Y'  THEN -- i is even
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND  userid in (select userid from tbl_userrolemap where roleid='||P_ROLEID||')';
    --V_COUNT_START := V_COUNT_START || V_DYNMC_WHERE_CLAUSE;
    --DBMS_OUTPUT.PUT_LINE(V_DYNMC_WHERE_CLAUSE);
    END IF;

     IF P_ROLEID   IS NOT NULL AND P_ROLEID !=0 and  v_IsPonsor='N' AND v_count >0 THEN -- i is even
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND  userid in (select userid from tbl_userrolemap where roleid='||P_ROLEID||')';
    --V_COUNT_START := V_COUNT_START || V_DYNMC_WHERE_CLAUSE;
    --DBMS_OUTPUT.PUT_LINE(V_DYNMC_WHERE_CLAUSE);
    END IF;

     IF P_ROLEID   IS NOT NULL AND P_ROLEID !=0 and  v_IsPonsor='N' AND v_count >0 and P_ROLEID=23 THEN -- i is even
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND  userid in (select userid from tbl_userrolemap where roleid='||P_ROLEID||' and userid='||P_LOGGEDINUSERID ||') ';
    --V_COUNT_START := V_COUNT_START || V_DYNMC_WHERE_CLAUSE;
    --DBMS_OUTPUT.PUT_LINE(V_DYNMC_WHERE_CLAUSE);
    END IF;

     IF P_TRANSCELERATEUSERID   IS NOT NULL  THEN -- i is even
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND usr.TRANSCELERATEUSERID = '''||P_TRANSCELERATEUSERID||'''';
    --V_COUNT_START := V_COUNT_START || V_DYNMC_WHERE_CLAUSE;
    --DBMS_OUTPUT.PUT_LINE(V_DYNMC_WHERE_CLAUSE);
    END IF;


  /*IF p_countryid IS NOT NULL THEN
    --  V_QUERY_WHERECLAUSE := V_QUERY_WHERECLAUSE || ' AND usrcon.COUNTRYCD = (select inconu.COUNTRYCD from TBL_COUNTRIES inconu where inconu.COUNTRYID = ' || TO_CHAR(p_countryid) || ' )';
    IF (SITE_IDS_STR IS NOT NULL OR STUDY_IDS_STR IS NOT NULL) THEN
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || '  AND tcc.COUNTRYID = ' || TO_CHAR(p_countryid);
    ELSE
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || '  AND tcc.COUNTRYID = ' || TO_CHAR(p_countryid);
    END IF;
    END IF;*/

  IF P_COURSETITLE IS NOT NULL THEN
     V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND LOWER(Trainstat.Course_Title) LIKE LOWER(''%'||P_COURSETITLE|| '%'')';

  END IF;

  IF P_TRNGPROVIDER IS NOT NULL THEN
     V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || '  AND LOWER(trainStat.TRNGPROVIDERNAME) LIKE LOWER(''%' || P_TRNGPROVIDER || '%'')';

  END IF;

  IF P_REQUIREMENT IS NOT NULL THEN
     V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' AND LOWER(trainStat.REQUIREMENT_TYPE) LIKE LOWER(''%' || P_REQUIREMENT || '%'')';

  END IF;

  select count (*) into v_count1 from TBL_USERROLEMAP WHERE USERID=P_LOGGEDINUSERID ;
  if v_count1 >0 then
  SELECT STUDYID into ROLESTUDY from TBL_USERROLEMAP WHERE USERID=P_LOGGEDINUSERID and rownum=1;

  end if;
    V_FINAL_QUERY :=  V_FINAL_QUERY||V_FULL_START||V_DYNMC_WHERE_CLAUSE || ' ORDER BY ' || V_ORDER||' '||

  P_ORDRBY ||') AA ' ||' )' ;

  V_URL:='select URL  from (('|| V_FINAL_QUERY||'))';

  -- dbms_output.put_line('P_URL is ------->'||V_URL);
  V_empPK:='select empPK  from(('|| V_FINAL_QUERY||'))';
  -- dbms_output.put_line('P_empPK is ------->'||V_empPK);

  V_COUNT_START := V_COUNT_START || V_FULL_START || V_WHERE || V_DYNMC_WHERE_CLAUSE || ' ORDER BY ' || V_ORDER||' '||P_ORDRBY ||') AA   ) ' ;

  -- DBMS_OUTPUT.PUT_LINE('----'||V_FULL_START);

  if v_IsPonsor='N' and P_ISINTEGRATION_ACTIVE='Y' and P_ORGID is not null then
    V_COUNT_QUERY := ' select count(*) from (select * from ( ( ' || V_FINAL_QUERY || '))) where User_Id='||P_LOGGEDINUSERID||' and Org_Id='||P_ORGID;

  end if ;

  if v_IsPonsor ='N' and P_ISINTEGRATION_ACTIVE is null and P_COUNTRYID IS  NULL then


   V_COUNT_QUERY  := 'select count(*) from (select * from ( ( ' || V_FINAL_QUERY || '))  where user_id in (select b.userid from tbl_site a,tbl_userrolemap b where  a.piid in (select ts.piid  from  tbl_site ts,tbl_userrolemap tur where tur.userid='||P_LOGGEDINUSERID ||' and tur.roleid in(23,48) and ts.siteid=tur.siteid and (tur.effectiveenddate is null or tur.effectiveenddate>sysdate)) and a.siteid=b.siteid   and  (b.effectiveenddate is null
    or b.effectiveenddate > sysdate ))) where  (study_id,site_id)  in (select distinct si.studyid,si.siteid
  from TBL_USERROLEMAP si,tbl_site st
  where (si.siteid=st.siteid or si.studyid=study_id)  and si.USERID='||P_LOGGEDINUSERID||' and si.roleid in(23,48) and (si.EFFECTIVEENDDATE > sysdate or si.EFFECTIVEENDDATE is null)) or (study_id is null or site_id is null or REQUIREMENT_TYPE=''Self-Assigned'') ';

  elsif v_IsPonsor ='N' and P_ISINTEGRATION_ACTIVE is null and P_COUNTRYID IS NOT NULL then

   V_COUNT_QUERY  := 'select count(*) from (select * from ( ( ' || V_FINAL_QUERY || '))  where user_id in (select b.userid from tbl_site a,tbl_userrolemap b where  a.piid in (select ts.piid  from  tbl_site ts,tbl_userrolemap tur where tur.userid='||P_LOGGEDINUSERID ||' and tur.roleid in(23,48) and ts.siteid=tur.siteid and (tur.effectiveenddate is null or tur.effectiveenddate>sysdate)) and a.siteid=b.siteid   and  (b.effectiveenddate is null
    or b.effectiveenddate > sysdate )) and (countryid='||P_COUNTRYID||' or countryid is null ) ) where  (study_id,site_id)  in (select distinct si.studyid,si.siteid
  from TBL_USERROLEMAP si,tbl_site st
  where (si.siteid=st.siteid or si.studyid=study_id)  and si.USERID='||P_LOGGEDINUSERID||' and si.roleid in(23,48) and (si.EFFECTIVEENDDATE > sysdate or si.EFFECTIVEENDDATE is null)) or (study_id is null or site_id is null or REQUIREMENT_TYPE=''Self-Assigned'') ';

  elsif v_IsPonsor='Y' and P_ISINTEGRATION_ACTIVE='Y' and P_ORGID is not null then
   V_COUNT_QUERY  := 'select count(1) from ((' || V_FINAL_QUERY || ')) ';


  elsif v_IsPonsor ='Y' and P_ISINTEGRATION_ACTIVE is null and ROLESTUDY  is  null and P_COUNTRYID IS NULL then

    SELECT distinct ORGID INTO V_ORGID FROM TBL_USERPROFILES WHERE userid  = P_LOGGEDINUSERID;
    V_COUNT_QUERY  := 'select count(1) from ((' || V_FINAL_QUERY || ')) where (study_id in (select distinct s.studyid from tbl_study s,tbl_program p where s.progid=p.progid and p.orgid='||V_ORGID||') or Org_Id is null  or study_id is null) ';


  elsif v_IsPonsor ='Y' and P_ISINTEGRATION_ACTIVE is null and ROLESTUDY  is not  null AND V_TYPE2AND3_ROLE_COUNT>=0 and P_COUNTRYID IS NULL then

    SELECT distinct ORGID INTO V_ORGID FROM TBL_USERPROFILES WHERE userid  = P_LOGGEDINUSERID;
    V_COUNT_QUERY  := 'select count(1) from ((' || V_FINAL_QUERY || ')) where (study_id in (select distinct s.studyid from tbl_study s,tbl_program p where s.progid=p.progid and p.orgid='||V_ORGID||') or Org_Id is null  or study_id is null) ';


  elsif v_IsPonsor ='Y' and P_ISINTEGRATION_ACTIVE is null and ROLESTUDY  is  null and P_COUNTRYID IS NOT NULL then

    SELECT distinct ORGID INTO V_ORGID FROM TBL_USERPROFILES WHERE userid  = P_LOGGEDINUSERID;
   V_COUNT_QUERY  := 'select count(1) from ((' || V_FINAL_QUERY || ')) where (study_id in (select distinct s.studyid from tbl_study s,tbl_program p where s.progid=p.progid and p.orgid='||V_ORGID||')  and countryid='||P_COUNTRYID||' or Org_Id is null  or study_id is null) ';

  --and countryid='||p_countryid||'
  elsif v_IsPonsor ='Y' and P_ISINTEGRATION_ACTIVE is null and ROLESTUDY  is not null AND V_TYPE2AND3_ROLE_COUNT<=0 AND P_COUNTRYID IS NULL then

    SELECT distinct ORGID INTO V_ORGID FROM TBL_USERPROFILES WHERE userid  = P_LOGGEDINUSERID;
   V_COUNT_QUERY  := 'select count(1) from ((' || V_FINAL_QUERY || ')) where (study_id is null or  study_id in (select distinct s.studyid from tbl_study s,tbl_program p where s.progid=p.progid and p.orgid='||V_ORGID||') or Org_Id is null)  and user_id in (select user_id from tbl_user_training_status where
         study_id in
       (select a.studyid
        from tbl_userrolemap a
       where a.userid = '||P_LOGGEDINUSERID||'
         and (a.effectiveenddate is null or a.effectiveenddate > sysdate)) )';

  elsif v_IsPonsor ='Y' and P_ISINTEGRATION_ACTIVE is null and ROLESTUDY  is not null AND P_COUNTRYID IS NOT NULL  then

    SELECT distinct ORGID INTO V_ORGID FROM TBL_USERPROFILES WHERE userid  = P_LOGGEDINUSERID;
   V_COUNT_QUERY  := 'select count(1) from ((' || V_FINAL_QUERY || ')) where (study_id is null or  study_id in (select distinct s.studyid from tbl_study s,tbl_program p where s.progid=p.progid and p.orgid='||V_ORGID||') and countryid='||P_COUNTRYID||' or Org_Id is null)  and user_id in (select user_id from tbl_user_training_status where
         study_id in
       (select a.studyid
        from tbl_userrolemap a
       where a.userid = '||P_LOGGEDINUSERID||'
         and (a.effectiveenddate is null or a.effectiveenddate > sysdate)) )';


  end if;



   dbms_output.put_line(V_COUNT_QUERY);
   -- insert into temp_table values(V_COUNT_QUERY);
    --commit;



   EXECUTE IMMEDIATE V_COUNT_QUERY INTO P_COUNT;
     PAG_END_ROW         :=  P_LIMIT + P_OFFSET -1 ;
    SQL_PAGINATION_PART := 'SELECT * FROM (SELECT ROWNUM RNUM , TEMP.* FROM ((' || V_FINAL_QUERY;
     SQL_PAGINATION_PART := SQL_PAGINATION_PART || ')' || SQL_DYNMC_SORTING_PART ||' ) TEMP  )' ;



  if v_IsPonsor='Y' and P_ISINTEGRATION_ACTIVE is null  and ROLESTUDY  is not null AND V_TYPE2AND3_ROLE_COUNT<0 and P_COUNTRYID IS  NULL  then
    SQL_PAGINATION_PART :=' select * from (select d.*,rownum rnn from (select ROWNUM rn ,c.* from ('||SQL_PAGINATION_PART||')'||' c where  (study_id is null or study_id in (select distinct s.studyid from tbl_study s,tbl_program p where s.progid=p.progid and p.orgid='||V_ORGID||') or Org_Id is null) and user_id in (select user_id from tbl_user_training_status where
         study_id in
       (select a.studyid
        from tbl_userrolemap a
       where a.userid = '||P_LOGGEDINUSERID||'
         and (a.effectiveenddate is null or a.effectiveenddate > sysdate)) ) ) d where rn>='||TO_CHAR(P_OFFSET)||') where rn<='||TO_CHAR(PAG_END_ROW);

  elsif v_IsPonsor='Y' and P_ISINTEGRATION_ACTIVE is null  and ROLESTUDY  is not null and P_COUNTRYID IS NOT NULL then
    SQL_PAGINATION_PART :=' select * from (select d.*,rownum rnn from (select ROWNUM rn ,c.* from ('||SQL_PAGINATION_PART||')'||' c where  (study_id is null or study_id in (select distinct s.studyid from tbl_study s,tbl_program p where s.progid=p.progid and p.orgid='||V_ORGID||') and countryid='||P_COUNTRYID||' or Org_Id is null) and user_id in (select user_id from tbl_user_training_status where
         study_id in
       (select a.studyid
        from tbl_userrolemap a
       where a.userid = '||P_LOGGEDINUSERID||'
         and (a.effectiveenddate is null or a.effectiveenddate > sysdate)) ) ) d where rn>='||TO_CHAR(P_OFFSET)||') where rn<='||TO_CHAR(PAG_END_ROW);


  elsif v_IsPonsor='Y' and P_ISINTEGRATION_ACTIVE is null  and ROLESTUDY is not  null AND V_TYPE2AND3_ROLE_COUNT>=0 and P_COUNTRYID is  null  then
    SQL_PAGINATION_PART :=' select * from (select d.*,rownum rnn from (select ROWNUM rn ,c.* from ('||SQL_PAGINATION_PART||')'||' c where  (study_id in (select distinct s.studyid from tbl_study s,tbl_program p where s.progid=p.progid and p.orgid='||V_ORGID||') or Org_Id is null  or study_id is null)  ) d where rn>='||TO_CHAR(P_OFFSET)||') where rn<='||TO_CHAR(PAG_END_ROW);


  elsif v_IsPonsor='Y' and P_ISINTEGRATION_ACTIVE is null  and ROLESTUDY  is  null and P_COUNTRYID is  null  then
    SQL_PAGINATION_PART :=' select * from (select d.*,rownum rnn from (select ROWNUM rn ,c.* from ('||SQL_PAGINATION_PART||')'||' c where  (study_id in (select distinct s.studyid from tbl_study s,tbl_program p where s.progid=p.progid and p.orgid='||V_ORGID||') or Org_Id is null  or study_id is null)  ) d where rn>='||TO_CHAR(P_OFFSET)||') where rn<='||TO_CHAR(PAG_END_ROW);

  elsif v_IsPonsor='Y' and P_ISINTEGRATION_ACTIVE is null  and ROLESTUDY  is  null and P_COUNTRYID is not null then
    SQL_PAGINATION_PART :=' select * from (select d.*,rownum rnn from (select ROWNUM rn ,c.* from ('||SQL_PAGINATION_PART||')'||' c where  (study_id in (select distinct s.studyid from tbl_study s,tbl_program p where s.progid=p.progid and p.orgid='||V_ORGID||') and countryid='||p_countryid||' or Org_Id is null  or study_id is null)  ) d where rn>='||TO_CHAR(P_OFFSET)||') where rn<='||TO_CHAR(PAG_END_ROW);


  elsif v_IsPonsor='Y' and P_ISINTEGRATION_ACTIVE='Y' and P_ORGID is not null then
   SQL_PAGINATION_PART :=' select * from (select d.*,rownum rnn from (select ROWNUM rn ,c.* from ('||SQL_PAGINATION_PART||')'||' c ) d where rn>='||TO_CHAR(P_OFFSET)||') where rn<='||TO_CHAR(PAG_END_ROW);

  elsif v_IsPonsor='N' and P_ISINTEGRATION_ACTIVE='Y' and P_ORGID is not null then
   SQL_PAGINATION_PART := ' select * from (select * from ( ( ' || V_FINAL_QUERY || '))) where User_Id='||P_LOGGEDINUSERID||' and Org_Id='||P_ORGID;


  elsif v_IsPonsor='N' and P_ISINTEGRATION_ACTIVE is null and P_COUNTRYID IS NULL then
    SQL_PAGINATION_PART :=' select ROWNUM ,b.* from ('||SQL_PAGINATION_PART||')'||' B where user_id in (select b.userid from tbl_site a,tbl_userrolemap b where  a.piid in (select ts.piid  from  tbl_site ts,tbl_userrolemap tur where tur.userid='||P_LOGGEDINUSERID ||' and tur.roleid in(23,48) and ts.siteid=tur.siteid and (tur.effectiveenddate is null or tur.effectiveenddate>sysdate)) and a.siteid=b.siteid   and (b.effectiveenddate is null
    or b.effectiveenddate > sysdate )) ';

    SQL_PAGINATION_PART:='  select * from (select f.*,rownum rnn from (select e.*,rownum rn from ('||SQL_PAGINATION_PART||')'||' e where (study_id,site_id)  in (select distinct si.studyid,si.siteid
  from TBL_USERROLEMAP si,tbl_site st
  where (si.siteid=st.siteid or si.studyid=study_id)   and si.USERID='||P_LOGGEDINUSERID||' and si.roleid in(23,48) and (si.EFFECTIVEENDDATE > sysdate or si.EFFECTIVEENDDATE is null)) or (study_id is null or site_id is null or REQUIREMENT_TYPE=''Self-Assigned'') )  f WHERE RN>= '|| TO_CHAR(P_OFFSET)||') where rn<='||TO_CHAR(PAG_END_ROW);

  elsif v_IsPonsor='N' and P_ISINTEGRATION_ACTIVE is null and P_COUNTRYID IS NOT NULL then
    SQL_PAGINATION_PART :=' select ROWNUM ,b.* from ('||SQL_PAGINATION_PART||')'||' B where user_id in (select b.userid from tbl_site a,tbl_userrolemap b where  a.piid in (select ts.piid  from  tbl_site ts,tbl_userrolemap tur where tur.userid='||P_LOGGEDINUSERID ||' and tur.roleid in(23,48) and ts.siteid=tur.siteid and (tur.effectiveenddate is null or tur.effectiveenddate>sysdate)) and a.siteid=b.siteid   and (b.effectiveenddate is null
    or b.effectiveenddate > sysdate )) and ( countryid='||P_COUNTRYID||' or countryid is null)' ;

    SQL_PAGINATION_PART:='  select * from (select f.*,rownum rnn from (select e.*,rownum rn from ('||SQL_PAGINATION_PART||')'||' e where (study_id,site_id)  in (select distinct si.studyid,si.siteid
  from TBL_USERROLEMAP si,tbl_site st
  where (si.siteid=st.siteid or si.studyid=study_id)   and si.USERID='||P_LOGGEDINUSERID||' and si.roleid in(23,48) and (si.EFFECTIVEENDDATE > sysdate or si.EFFECTIVEENDDATE is null)) or (study_id is null or site_id is null or REQUIREMENT_TYPE=''Self-Assigned'') )  f WHERE RN>= '|| TO_CHAR(P_OFFSET)||') where rn<='||TO_CHAR(PAG_END_ROW);


  end if;
   --insert into temp_table values(SQL_PAGINATION_PART);
   --commit;
    dbms_output.put_line(SQL_PAGINATION_PART);
    OPEN P_TRAINING_STATUS FOR SQL_PAGINATION_PART;

     -- OPEN P_TRAINING_STATUS FOR V_FULL_START;


    exception when others
      then
      dbms_output.put_line(sqlerrm);
      dbms_output.put_line(dbms_utility.format_error_backtrace);

     end SP_TRAINING_STATUS_REPORT;

PROCEDURE SP_SPONSERSURVEYOVERVIEW_XPRT(
    P_SPONSORID             IN NUMBER,
    P_SURVEYID              IN NUMBER,
    P_MULTISELECTSTUDYID    IN NUM_ARRAY,
    P_CREATEDBY             IN VARCHAR2,
    P_LANGUAGEID            IN NUMBER,
    P_THEREAPUTICAREAID     IN NUMBER,
    P_COUNTRYID             IN NUMBER,
    P_STARTDATE             IN DATE,
    P_ENDDATE               IN DATE,
    P_STATUSID              IN NUMBER,
    P_ISSTUDYMANAGER        IN NUMBER,
    P_ISMONITOR             IN NUMBER,
    P_GETASSOCIATEDSTUDYIDS IN NUM_ARRAY,
    P_OFFSET                IN NUMBER,
    P_LIMIT                 IN NUMBER,
    P_ORDER                 IN VARCHAR2,
    P_SORTBY                IN VARCHAR2,
    P_FINAL_REPORT          OUT SYS_REFCURSOR,
    P_COUNT                 OUT NUMBER) is

    V_FULL_START         VARCHAR2(9999 BYTE);
    V_DYNMC_WHERE_CLAUSE VARCHAR2(9999 BYTE);
    STUDY_IDS_STR        VARCHAR2(9999 BYTE);
    V_FROMDATE           VARCHAR2(10000);
    V_TODATE             VARCHAR2(10000);
    SURVEY_FINAL_SQL     VARCHAR2(9999 BYTE);
    V_FINAL_SQL          VARCHAR2(9999 BYTE);
    V_COUNT_QUERY         VARCHAR2(9999 BYTE);
    SURVEY_CREATOR_SQL    VARCHAR2(9999 BYTE);
    SURVEY_CREATE_DATE    VARCHAR2(9999 BYTE);
    V_ORDER              VARCHAR2(200);
    PAG_END_ROW            NUMBER;
    SQL_PAGINATION_PART    VARCHAR2(9999 BYTE);
    P_ORDRBY                VARCHAR2(9999 BYTE);

   STUDY_PDS_STR            VARCHAR2(9999 BYTE);
   STUDY_FDS_STR            VARCHAR2(9999 BYTE);

  begin

  V_DYNMC_WHERE_CLAUSE   := '';
  V_FULL_START :='';

    STUDY_IDS_STR :=null;
    STUDY_PDS_STR :=null;
    STUDY_FDS_STR :=null;

  if P_STARTDATE is null then
   V_FROMDATE:=null;
   end if;

   if P_ENDDATE is null then

  V_TODATE :=null;

  end if;


    V_FULL_START := ' select survey.surveyid, survey.surveycd, survey.surveytitle, lang.languagename, sip.studyid,(select a.studyname from tbl_study a where a.studyid=sip.studyid) studyname, sip.thereaputicareaid, survey.parentsurveyid,
     (select survey1.surveytitle from TBL_SURVEY survey1 where survey1.surveyid = survey.parentsurveyid) as parentSurveyTitle,
      survey.iscdareq, metadata.metadatavalue, survey.createddt as surveyCreationDate,
      --survey.createdby,
      (SELECT CASE
          WHEN up.issponsor = ''Y'' THEN
            up.actualtranscelerateuserid
          ELSE
            up.transcelerateuserid
           END
      FROM tbl_userprofiles up
      WHERE up.transcelerateuserid = survey.createdby) createdby,
    (select RTRIM(XMLAGG(XMLELEMENT(e,therapeuticareaid || '','')).EXTRACT(''//text()''),'','') as therapeuticareaid
      from TBL_SURVEY_THERAPEUTICAREAMAP where belongto=survey.surveyid and istemplate=''0'') as multiTherapeuticArea,
      (SELECT RTRIM (
        XMLAGG (XMLELEMENT (e, therapeuticareaname  || '','')).EXTRACT (''//text()''),
        '','')
    FROM tbl_therapeuticarea tt,TBL_SURVEY_THERAPEUTICAREAMAP tmp where tt.THERAPEUTICAREAID=tmp.therapeuticareaid and  belongto=survey.surveyid and istemplate=''0''  ) therapeuticareaname,
    (select RTRIM(XMLAGG(XMLELEMENT(e,countryid || '', '')).EXTRACT(''//text()''),'', '') as countryid
      from TBL_SURVEY_COUNTRYMAP where belongto=survey.surveyid and istemplate=''0'')  as multiCountry,

     (SELECT RTRIM (
        XMLAGG (XMLELEMENT (e, countryname   || '', '')).EXTRACT (''//text()''),
        '', '')

    FROM Tbl_Countries c,TBL_SURVEY_COUNTRYMAP tp where c.countryid=tp.countryid and belongto=survey.surveyid and istemplate=''0'') multiCountryname
      from TBL_SURVEY survey, TBL_SURVEYSIPASSOCIATION sip, TBL_LANGUAGEMASTER lang, TBL_SURVEYMETADATA metadata
  where sip.istemplate=''0'' and survey.surveyid = sip.belongto
  and metadata.surveymetadataid = survey.surveystatus
  and metadata.metadatavalue != ''Deleted'' and survey.languageid = lang.languageid';




    if(Lower(P_SORTBY) =Lower('SURVEYTITLE'))  then
      V_ORDER :='Lower(survey.surveytitle)';

    elsif(Lower(P_SORTBY) =lower('LANGUAGE') ) then
     V_ORDER := 'Lower(lang.languagename)';

    elsif(Lower(P_SORTBY) =Lower('STUDYID')) then
      V_ORDER :='Lower(sip.studyid)';

    elsif(Lower(P_SORTBY) =Lower('STATUS')) then
      V_ORDER :='Lower(metadata.metadatavalue)';

    elsif(Lower(P_SORTBY) =Lower('COUNTRY')) then
      V_ORDER := 'Lower(multiCountryname)';

    elsif(Lower(P_SORTBY) =Lower('CREATEDDATE')) then
      V_ORDER := 'survey.createddt';

    elsif(Lower(P_SORTBY) =Lower('THERAPEUTICAREA')) then
      V_ORDER := 'Lower(sip.thereaputicareaid)';

    elsif(Lower(P_SORTBY) =Lower('SURVEYCD')) then
       V_ORDER :='Lower(survey.surveycd)';

    elsif(Lower(P_SORTBY) =Lower('SURVEYCREATOR')) then
       V_ORDER :='Lower(survey.createdby)';

  else

  V_ORDER:= ' survey.surveyid ' ;

  end if;


    if (P_SponsorId is not null and P_SponsorId <> 0) then
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE ||
                ' and sip.sponsororganizaionid = ' ||
                P_SponsorId;

    end if;

    if (P_SurveyId is not null and P_SurveyId <> 0) then

    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE ||
                ' and survey.surveyid = ' || P_SurveyId;

    end if;

    IF P_multiSelectStudyId IS NOT NULL AND P_multiSelectStudyId.count > 0 THEN
    FOR i IN 1 .. P_multiSelectStudyId.count LOOP
      EXIT WHEN P_multiSelectStudyId(i) = -1;
      IF i = 1 THEN
      STUDY_IDS_STR := P_multiSelectStudyId(i);
      ELSE
      STUDY_IDS_STR := STUDY_IDS_STR || ',' || P_multiSelectStudyId(i);
      END IF;

    END LOOP;
    end if;



    IF STUDY_IDS_STR IS NOT NULL THEN

    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE ||
                '  and  sip.studyid in (' || STUDY_IDS_STR || ')';

    END IF;

    if (P_createdBy is not null) then

    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE ||
                ' and survey.createdby = '''|| P_createdBy||'''';
    end if;

    if (P_languageId is not null) then

    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE ||
                ' and survey.languageid =' || P_languageId;

    end if;

    if (P_thereaputicareaid is not null) then

    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE || ' and ' ||
                '(select RTRIM(XMLAGG(XMLELEMENT(e,therapeuticareaid)).EXTRACT(''//text()''),'','') therapeuticareaid from TBL_SURVEY_THERAPEUTICAREAMAP where belongto=survey.surveyid and istemplate=''0'') like ' ||
                P_thereaputicareaid;

    end if;

    if (P_countryid is not null) then

    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE ||
                ' and (select RTRIM(XMLAGG(XMLELEMENT(e,countryid )).EXTRACT(''//text()''),'','') countryid from TBL_SURVEY_COUNTRYMAP where belongto=survey.surveyid and istemplate=''0'') like  ' ||
                P_countryid;
    end if;

    IF P_STARTDATE IS NOT NULL THEN
    -- i is even
    V_FROMDATE           := TO_CHAR(P_STARTDATE, 'dd-mon-yy HH24:MI:SS');
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE ||
                ' AND survey.createddt>= TO_DATE(''' ||
                V_FROMDATE || ''', ''dd-mon-yy HH24:MI:SS'')';

    -- dbms_output.put_line(V_DYNMC_WHERE_CLAUSE);
    --V_COUNT_START := V_COUNT_START || V_DYNMC_WHERE_CLAUSE;
    --DBMS_OUTPUT.PUT_LINE(V_DYNMC_WHERE_CLAUSE);
    END IF;

    IF P_ENDDATE IS NOT NULL THEN
    -- i is even
    V_TODATE             := TO_CHAR(P_ENDDATE, 'dd-mon-yy HH24:MI:SS');
    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE ||
                ' AND survey.createddt<=TO_DATE(''' || V_TODATE ||
                ''', ''dd-mon-yy HH24:MI:SS'')';
    --V_COUNT_START := V_COUNT_START || V_DYNMC_WHERE_CLAUSE;
    --DBMS_OUTPUT.PUT_LINE(V_DYNMC_WHERE_CLAUSE);
    END IF;

    if (P_statusId is not null) then

    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE ||
                ' and survey.surveystatus = ' || P_statusId;

    end if;



    IF P_ISSTUDYMANAGER=1   AND P_GETASSOCIATEDSTUDYIDS.count > 0 THEN
    FOR i IN 1 .. P_GETASSOCIATEDSTUDYIDS.count LOOP
      EXIT WHEN P_GETASSOCIATEDSTUDYIDS(i) = -1;
      IF i = 1 THEN
      STUDY_PDS_STR := P_GETASSOCIATEDSTUDYIDS(i);
      ELSE
      STUDY_PDS_STR := STUDY_PDS_STR || ',' || P_GETASSOCIATEDSTUDYIDS(i);
      END IF;

    END LOOP;
    end if;

    IF  P_ISSTUDYMANAGER=1 and  STUDY_PDS_STR IS NOT NULL THEN

    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE ||
                '  and  sip.studyid in (' || STUDY_PDS_STR || ')';

    END IF;


    IF P_ISMONITOR=1  AND P_GETASSOCIATEDSTUDYIDS.count > 0 THEN
    FOR i IN 1 .. P_GETASSOCIATEDSTUDYIDS.count LOOP
      EXIT WHEN P_GETASSOCIATEDSTUDYIDS(i) = -1;
      IF i = 1 THEN
      STUDY_FDS_STR := P_GETASSOCIATEDSTUDYIDS(i);
      ELSE
      STUDY_FDS_STR := STUDY_FDS_STR || ',' || P_GETASSOCIATEDSTUDYIDS(i);
      END IF;

    END LOOP;
    end if;

    IF P_ISMONITOR=1 and STUDY_FDS_STR IS NOT NULL THEN

    V_DYNMC_WHERE_CLAUSE := V_DYNMC_WHERE_CLAUSE ||
                '  and  sip.studyid in (' || STUDY_FDS_STR || ')';

    END IF;



    V_FINAL_SQL :=V_FULL_START||V_DYNMC_WHERE_CLAUSE||' ORDER BY ' || V_ORDER|| ' '||P_ORDER;

   -- dbms_output.put_line(V_FINAL_SQL);





    V_COUNT_QUERY :='select count(1) from ('||V_FINAL_SQL||')';

    EXECUTE IMMEDIATE V_COUNT_QUERY INTO P_COUNT;

     PAG_END_ROW         :=P_LIMIT ;-- P_OFFSET + P_LIMIT - 1;
     SQL_PAGINATION_PART :=  'select b.*,rownum rnn from (select a.*,rownum rn from ( ' ||V_FINAL_SQL||' ) a ) b ';
    -- SQL_PAGINATION_PART := SQL_PAGINATION_PART || ')' || V_DYNMC_WHERE_CLAUSE ||' ) TEMP  ) WHERE RNUM >='|| TO_CHAR(P_OFFSET) ;
     SQL_PAGINATION_PART :='select * from ('||SQL_PAGINATION_PART||'where rn>='||TO_CHAR(P_OFFSET)||') where rnn<='||PAG_END_ROW;
  -- dbms_output.put_line(SQL_PAGINATION_PART);

  --commit;
    open P_FINAL_REPORT for  SQL_PAGINATION_PART;


  end SP_SPONSERSURVEYOVERVIEW_XPRT;

  procedure sp_fac_dept_report( IP_COUNTRYID      IN num_array,
      IP_LOGGEDIN_USER  IN NUMBER,
      IP_STATEID        IN NUMBER,
      IP_FACNAME        IN VARCHAR2,
      IP_FACID          IN NUMBER,
      IP_THERAAREA      IN num_array,
      IP_SUBTHERAAREA   IN num_array,
      IP_DEPTTYPID      IN NUMBER,
      IP_OFFSET         IN NUMBER,
      IP_LIMIT          IN NUMBER,
      IP_ORDRBY         IN VARCHAR2,
      IP_SORTBY         IN VARCHAR2,
      IP_COUNT          OUT NUMBER,
      IP_REPORT_DATA OUT SYS_REFCURSOR)
      AS
    V_SELECT_PART          VARCHAR2(32000 );
    V_FINAL_QUERY          VARCHAR2(32000 );
    V_QUERY_FINAL            VARCHAR2(32000 );
    V_DYNMC_SQL_CLAUSE_PART VARCHAR2(32000);
     -- DYNMC_WHR_CLAUSE_PART VARCHAR2(9999 BYTE);
    V_PAG_END_ROW           NUMBER;
    V_COUNT_QUERY         VARCHAR2(32000 );
    V_ORGID               NUMBER(38);
    V_TEMP_SORTBY            VARCHAR2(32000 );
    V_TEMP_ORDRBY              VARCHAR2(32000 );
    V_ROLEID                 NUMBER ;
    V_ROLENAME               VARCHAR2(32000);
    V_AND_CLAUSE           VARCHAR2(32000);
     -- V_FACILITY               VARCHAR2(1000);
   /* type  V_ROLENAME is varray(200) of varchar2(1000);
    L_ROLENAME V_ROLENAME;
     */
     L_COUNT number ;
    Type V_FACILITY   IS VARRAY(32000) OF varchar2(32000);

    L_FACILITY V_FACILITY:=V_FACILITY();

    Type V_FACILITY1   IS VARRAY(32000) OF varchar2(32000);

    L_FACILITY1 V_FACILITY1:=V_FACILITY1();

    FAC_IDS_STR  VARCHAR2(32000);
    FAC_IDS_STR1  VARCHAR2(32000);
    V_IP_THERAAREA_STR VARCHAR2(32000);
    V_IP_COUNTRYID_STR VARCHAR2(32000);
    V_IP_SUBTHERAAREA_STR varchar2(32000);
    v_orgflag             varchar2(1);
    v_l_orgid              number;

  BEGIN
  IF IP_SORTBY = 'FACILITYID' THEN
    V_TEMP_SORTBY := 'FACILITYID';
  ELSIF IP_SORTBY = 'FACILITYNAME' THEN
    V_TEMP_SORTBY := 'UPPER(FACILITYNAME)';
  ELSIF IP_SORTBY = 'THERAPEUTICAREAID' THEN
    V_TEMP_SORTBY := 'UPPER(THERAPEUTICAREAID)';
  ELSIF IP_SORTBY = 'THERAPEUTICAREANAME' THEN
    V_TEMP_SORTBY := 'UPPER(THERAPEUTICAREANAME)';
  ELSIF IP_SORTBY = 'SUBTHERAPEUTICAREAID' THEN
      V_TEMP_SORTBY := 'NVL(SUBTHERAPEUTICAREAID,0)';
  ELSIF IP_SORTBY = 'SUBTHERAPEUTICAREANAME' THEN
    V_TEMP_SORTBY := 'UPPER(SUBTHERAPEUTICAREANAME)';
  ELSIF IP_SORTBY = 'FACILITYADDRESS' THEN
    V_TEMP_SORTBY := 'UPPER(FACILITYADDRESS)';
  ELSIF IP_SORTBY = 'CITY' THEN
    V_TEMP_SORTBY := 'UPPER(CITY)';
  ELSIF IP_SORTBY = 'STATENAME' THEN
    V_TEMP_SORTBY := 'UPPER(STATENAME)';
  ELSIF IP_SORTBY = 'COUNTRYNAME' THEN
    V_TEMP_SORTBY := 'UPPER(COUNTRYNAME)';
  ELSIF IP_SORTBY = 'FACILITY_POSTALCODE' THEN
    V_TEMP_SORTBY := 'UPPER(FACILITY_POSTALCODE)';
  ELSIF IP_SORTBY = 'DEPARTMENTNAME' THEN
    V_TEMP_SORTBY := 'UPPER(DEPARTMENTNAME)';
  ELSIF IP_SORTBY = 'DEPARTMENTID' THEN
    V_TEMP_SORTBY := 'UPPER(DEPARTMENTID)';
  ELSIF IP_SORTBY = 'DEPARTMENTTYPEID' THEN
    V_TEMP_SORTBY := 'UPPER(DEPARTMENTTYPEID)';
  ELSIF IP_SORTBY = 'DEPARTMENTTYPENAME' THEN
    V_TEMP_SORTBY := 'UPPER(DEPARTMENTTYPENAME)';
  ELSIF IP_SORTBY = 'DEPTADDRESS' THEN
    V_TEMP_SORTBY := 'UPPER(DEPTADDRESS)';
  ELSIF IP_SORTBY = 'FACILITY_DEPART_ROLE' THEN
    V_TEMP_SORTBY := 'PLAT_FACDPT_ROLE';
  ELSIF IP_SORTBY = 'CONTACT_NAME' THEN
    V_TEMP_SORTBY := 'UPPER(CONTACT_NAME)';
  ELSIF IP_SORTBY = 'USER_EMAIL' THEN
    V_TEMP_SORTBY := 'UPPER(USER_EMAIL)';
  ELSIF IP_SORTBY = 'USER_PHONE' THEN
    V_TEMP_SORTBY := 'UPPER(USER_PHONE)';
  ELSIF IP_SORTBY = 'USER_FAX' THEN
    V_TEMP_SORTBY := 'UPPER(USER_FAX)';
  ELSIF IP_SORTBY = 'SIP_USER_ID' THEN
    V_TEMP_SORTBY := 'UPPER(SIP_USER_ID)';
   ELSE
    V_TEMP_SORTBY := 'upper(FACILITYNAME),upper(Departmentname)';
    --INSERT INTO temp_table VALUES (I_SORTBY);
    END IF;

  /* select count(*) into L_COUNT
    from TBL_IRFACILITYUSERMAP   TIR,
       Tbl_Facilityrole        TF,
       Tbl_Facilityuserrolemap TFUR
    where TIR.Userid = TFUR.Facilityuserid and TF.Facilityroleid = TFUR.Roleid
    and TIR.Userid=IP_LOGGEDIN_USER
    and (TIR.Isprimaryowner='Y' or TIR.Issecondaryowner='Y')
    and TF.Facilityrolename='Facility Profile Manager';*/



    if IP_LOGGEDIN_USER is not null then
  select a.issponsor into v_orgflag from tbl_userprofiles a where a.userid=IP_LOGGEDIN_USER;
  end if;

  /*  SELECT distinct RTRIM (
        XMLAGG (XMLELEMENT (e, TF.Facilityrolename  || ',')).EXTRACT ('//text()'),
        ',') bulk collect into  V_ROLENAME from TBL_IRFACILITYUSERMAP   TIR,
       Tbl_Facilityrole        TF,
       Tbl_Facilityuserrolemap TFUR
    where TIR.Userid = TFUR.Facilityuserid and TF.Facilityroleid = TFUR.Roleid
    and TIR.Userid=I_LOGGEDIN_USER;
    */
  /*  if V_ROLENAME='Facility Profile Manager' then*/

  V_SELECT_PART :=
    ' select * from (SELECT distinct Tblfac.Facilityid,
    tirf.userid,
    tu.ROLEID PLAT_FACDPT_ROLEID,
     (select tr.rolename from tbl_roles tr where tr.roleid in (select roleid from tbl_userprofiles where tirf.userid=userid) ) PLAT_FACDPT_ROLE,
    CASE
    WHEN Tblfac.Isdepartment=''Y''
    THEN Tblfac.Facilityid
    ELSE NULL
    END DepartmentID,
     CASE WHEN  tblFac.Isdepartment=''N'' /*or tblFac.Isdepartment=''Y''*/ and  pkg_encrypt.fn_decrypt(tblcon.address2) IS NULL AND  pkg_encrypt.fn_decrypt(tblcon.address3)  IS NULL
     THEN pkg_encrypt.fn_decrypt(tblcon.address1)
     WHEN pkg_encrypt.fn_decrypt(tblcon.address3) IS NULL
    THEN pkg_encrypt.fn_decrypt(tblcon.address1)||'',''||pkg_encrypt.fn_decrypt(tblcon.address2)
     ELSE
     pkg_encrypt.fn_decrypt(tblcon.address1)||'',''||pkg_encrypt.fn_decrypt(tblcon.address2)||'',''||pkg_encrypt.fn_decrypt(tblcon.address3)
     END Facilityaddress,
    tblcon.city,
    pkg_encrypt.fn_decrypt(tblcon.postalcode) facility_postalcode,--
    CASE WHEN  tblFac.Isdepartment=''Y'' and  pkg_encrypt.fn_decrypt(tblcon.address2) IS NULL AND  pkg_encrypt.fn_decrypt(tblcon.address3)  IS NULL
     THEN pkg_encrypt.fn_decrypt(tblcon.address1)
     WHEN tblFac.Isdepartment=''Y'' and pkg_encrypt.fn_decrypt(tblcon.address3) IS NULL AND   pkg_encrypt.fn_decrypt(tblcon.address2) IS NOT NULL
    THEN pkg_encrypt.fn_decrypt(tblcon.address1)||'',''||pkg_encrypt.fn_decrypt(tblcon.address2)
       WHEN tblFac.Isdepartment=''Y'' and pkg_encrypt.fn_decrypt(tblcon.address2) IS  NULL AND   pkg_encrypt.fn_decrypt(tblcon.address3) IS  NOT NULL
    THEN pkg_encrypt.fn_decrypt(tblcon.address1)||'',''||pkg_encrypt.fn_decrypt(tblcon.address3)
     WHEN tblFac.Isdepartment=''Y'' and pkg_encrypt.fn_decrypt(tblcon.address2) IS NULL AND  pkg_encrypt.fn_decrypt(tblcon.address3)  IS NULL
     THEN pkg_encrypt.fn_decrypt(tblcon.address1)
     WHEN tblFac.Isdepartment=''Y'' THEN
     pkg_encrypt.fn_decrypt(tblcon.address1)||'',''||pkg_encrypt.fn_decrypt(tblcon.address2)||'',''||pkg_encrypt.fn_decrypt(tblcon.address3)
     ELSE 
     NULL
     END  deptaddress,
    CASE
    WHEN (pkg_encrypt.fn_decrypt(tu.lastname)
      ||'',''
      ||pkg_encrypt.fn_decrypt(tu.firstname)
      ||'' ''
      ||pkg_encrypt.fn_decrypt(tu.middlename))='', ''
    THEN NULL
    ELSE pkg_encrypt.fn_decrypt(tu.lastname)
      ||'',''
      ||pkg_encrypt.fn_decrypt(tu.firstname)
      ||'' ''
      ||pkg_encrypt.fn_decrypt(tu.middlename)
    END contact_name,
    pkg_encrypt.fn_decrypt(tblcon.email) facility_email,
    pkg_encrypt.fn_decrypt(tblcon.MAINDAYTIME) facility_phone,
    pkg_encrypt.fn_decrypt(tblcon.fax) facility_fax,
    tu.contactid usercontact_id,
    (SELECT pkg_encrypt.fn_decrypt(tblcon1.email)
    FROM tbl_contact tblcon1
    WHERE tblcon1.contactid=TU.Contactid
    ) user_email,
    (SELECT pkg_encrypt.fn_decrypt(tblcon1.MAINDAYTIME)
    FROM tbl_contact tblcon1
    WHERE tblcon1.contactid=TU.Contactid
    ) user_phone,
    (SELECT pkg_encrypt.fn_decrypt(tblcon1.fax)
    FROM tbl_contact tblcon1
    WHERE tblcon1.contactid=TU.Contactid
    ) user_fax,
    Tblcountry.Countryname Countryname,
    Tblcountry.COUNTRYID COUNTRYID,
    Tblstates.Statename Statename,
    Tblstates.STATEID STATEID,
    tblcon.contactid contactid,
    tu.transcelerateuserid sip_user_id ,
    CASE
    WHEN (tirf.isprimaryowner=''Y''
    OR tirf.issecondaryowner =''Y'')
    THEN pkg_encrypt.fn_decrypt(tu.lastname)
      ||'' ''
      ||pkg_encrypt.fn_decrypt(tu.firstname)
    ELSE NULL
    END "Facility Profile Manager",
    CASE
    WHEN tblFac.Isdepartment=''Y''
    AND (tirf.isprimaryowner=''Y''
    OR tirf.issecondaryowner=''Y'')
    THEN pkg_encrypt.fn_decrypt(tu.lastname)
      ||'' ''
      ||pkg_encrypt.fn_decrypt(tu.firstname)
    ELSE NULL
    END "Dept Profile Manager",
    Tblfac.Facilityname FACILITYNAME,
    Tbldept.Departmenttypename Departmenttypename,
    Tblfac.Departmentname ,
    null Departmenttypeid,
    null THERAPEUTICAREAID,
   CASE
    WHEN (SELECT count(1) from TBL_IRFACILITYUSERMAP tirf1
         WHERE (tirf1.isprimaryowner=''Y''
        OR tirf1.issecondaryowner =''Y'') AND tirf1.facilityid=tirf.facilityid AND tirf1.userid='||IP_LOGGEDIN_USER||') <>0
    THEN ''Y''
    ELSE ''N''
    END  FAC_PROF_MANAGER,

    CASE
    WHEN (SELECT count(1) from TBL_IRFACILITYUSERMAP tirf1
         WHERE (tirf1.isprimaryowner=''Y''
        OR tirf1.issecondaryowner =''Y'') AND tirf1.facilityid=tirf.facilityid AND tblfac.isdepartment=''Y'' AND tirf1.userid='||IP_LOGGEDIN_USER||') <>0
    THEN ''Y''
    ELSE ''N''
    END  DEPT_PROF_MANAGER
    /*(select distinct tha.therapeuticareaid  from tbl_therapeuticarea tha where tha.therapeuticareaid in (SELECT DISTINCT th1.THERAPEUTICAREAID
    FROM TBL_THERAPETICAREAFACILITYMAP th1
    WHERE facilityid=tblFac.Facilityid
     --and thera.userid=tirf.userid
    )) therapeuticareaid,
    (select distinct tha.therapeuticareaname  from tbl_therapeuticarea tha where tha.therapeuticareaid in (SELECT DISTINCT th1.THERAPEUTICAREAID
    FROM TBL_THERAPETICAREAFACILITYMAP th1
    WHERE facilityid=tblFac.Facilityid
     --and thera.userid=tirf.userid
    )) therapeuticareaname,*/

   /* null therapeuticareaid,
    null therapeuticareaname,

  \*rtrim(( SELECT DISTINCT RTRIM ( XMLAGG (XMLELEMENT (e, tsb.subtherapeuticareaid
    || '','')).EXTRACT (''//text()''), '','')
    FROM tbl_subtherapeuticarea tsb
    WHERE tsb.SUBTHERAPEUTICAREAID IN
    (SELECT DISTINCT SUBTHERAPEUTICAREAID
    FROM TBL_THERAPETICAREAFACILITYMAP
    WHERE facilityid=tblFac.Facilityid
    )),'','') subtherapeuticareaid,


    rtrim(( SELECT DISTINCT RTRIM ( XMLAGG (XMLELEMENT (e, tsb.subtherapeuticareaname
    || '';'')).EXTRACT (''//text()''), '';'')
    FROM tbl_subtherapeuticarea tsb
    WHERE tsb.THERAPEUTICAREAID IN
    (SELECT DISTINCT THERAPEUTICAREAID
    FROM TBL_THERAPETICAREAFACILITYMAP
    WHERE facilityid=tblFac.Facilityid
    )),'';'') subtherapeuticareaName*\
    null subtherapeuticareaid,
    null subtherapeuticareaName*/

    FROM tbl_irfacilityusermap tirf
    LEFT JOIN Tbl_Facilities tblFac
    ON tirf.facilityid=tblFac.Facilityid
    LEFT JOIN TBL_USERPROFILES TU
    ON tu.userid=tirf.userid
    LEFT JOIN Tbl_Contact tblcon
    ON Tblfac.Contactid = Tblcon.Contactid
    LEFT JOIN Tbl_Departmenttype tbldept
    ON Tblfac.Departmenttypeid = Tbldept.Departmenttypeid
    LEFT JOIN Tbl_Countries tblcountry
    ON Tblcon.Countrycd = Tblcountry.Countrycd
    LEFT JOIN Tbl_States tblstates
    ON Tblcon.State     = Tblstates.Statecd
    union all
    select  distinct Tblfac.Facilityid,
  tirf.userid ,
  tfurm.roleid PLAT_FACDPT_ROLEID,
  (select tr.rolename from tbl_roles tr where tr.roleid=tfurm.roleid ) PLAT_FACDPT_ROLE,
  CASE
    WHEN Tblfac.Isdepartment=''Y''
    THEN Tblfac.Facilityid
    ELSE NULL
    END DepartmentID,
    CASE WHEN  tblFac.Isdepartment=''N'' /*or tblFac.Isdepartment=''Y''*/ and  pkg_encrypt.fn_decrypt(tblcon.address2) IS NULL AND  pkg_encrypt.fn_decrypt(tblcon.address3)  IS NULL
     THEN pkg_encrypt.fn_decrypt(tblcon.address1)
     WHEN pkg_encrypt.fn_decrypt(tblcon.address3) IS NULL
    THEN pkg_encrypt.fn_decrypt(tblcon.address1)||'',''||pkg_encrypt.fn_decrypt(tblcon.address2)
     ELSE
     pkg_encrypt.fn_decrypt(tblcon.address1)||'',''||pkg_encrypt.fn_decrypt(tblcon.address2)||'',''||pkg_encrypt.fn_decrypt(tblcon.address3)
     END Facilityaddress ,
    tblcon.city,
    pkg_encrypt.fn_decrypt(tblcon.postalcode) facility_postalcode,
     CASE WHEN  tblFac.Isdepartment=''Y'' and  pkg_encrypt.fn_decrypt(tblcon.address2) IS NULL AND  pkg_encrypt.fn_decrypt(tblcon.address3)  IS NULL
     THEN pkg_encrypt.fn_decrypt(tblcon.address1)
     WHEN tblFac.Isdepartment=''Y'' and pkg_encrypt.fn_decrypt(tblcon.address3) IS NULL AND   pkg_encrypt.fn_decrypt(tblcon.address2) IS NOT NULL
    THEN pkg_encrypt.fn_decrypt(tblcon.address1)||'',''||pkg_encrypt.fn_decrypt(tblcon.address2)
       WHEN tblFac.Isdepartment=''Y'' and pkg_encrypt.fn_decrypt(tblcon.address2) IS  NULL AND   pkg_encrypt.fn_decrypt(tblcon.address3) IS  NOT NULL
    THEN pkg_encrypt.fn_decrypt(tblcon.address1)||'',''||pkg_encrypt.fn_decrypt(tblcon.address3)
     WHEN tblFac.Isdepartment=''Y'' and pkg_encrypt.fn_decrypt(tblcon.address2) IS NULL AND  pkg_encrypt.fn_decrypt(tblcon.address3)  IS NULL
     THEN pkg_encrypt.fn_decrypt(tblcon.address1)
     when tblFac.Isdepartment=''Y'' then
     pkg_encrypt.fn_decrypt(tblcon.address1)||'',''||pkg_encrypt.fn_decrypt(tblcon.address2)||'',''||pkg_encrypt.fn_decrypt(tblcon.address3)
     ELSE
     NULL
     END  deptaddress,
    CASE
    WHEN (pkg_encrypt.fn_decrypt(tu.lastname)
      ||'',''
      ||pkg_encrypt.fn_decrypt(tu.firstname)
      ||'' ''
      ||pkg_encrypt.fn_decrypt(tu.middlename))='', ''
    THEN NULL
    ELSE pkg_encrypt.fn_decrypt(tu.lastname)
      ||'',''
      ||pkg_encrypt.fn_decrypt(tu.firstname)
      ||'' ''
      ||pkg_encrypt.fn_decrypt(tu.middlename)
    END contact_name,
    pkg_encrypt.fn_decrypt(tblcon.email) facility_email,
    pkg_encrypt.fn_decrypt(tblcon.MAINDAYTIME) facility_phone,
    pkg_encrypt.fn_decrypt(tblcon.fax) facility_fax,
    tu.contactid usercontact_id,
    (SELECT pkg_encrypt.fn_decrypt(tblcon1.email)
    FROM tbl_contact tblcon1
    WHERE tblcon1.contactid=TU.Contactid
    ) user_email,
    (SELECT pkg_encrypt.fn_decrypt(tblcon1.MAINDAYTIME)
    FROM tbl_contact tblcon1
    WHERE tblcon1.contactid=TU.Contactid
    ) user_phone,
    (SELECT pkg_encrypt.fn_decrypt(tblcon1.fax)
    FROM tbl_contact tblcon1
    WHERE tblcon1.contactid=TU.Contactid
    ) user_fax,
    Tblcountry.Countryname Countryname,
    Tblcountry.COUNTRYID COUNTRYID,
    Tblstates.Statename Statename,
    Tblstates.STATEID STATEID,
    tblcon.contactid contactid,
    tu.transcelerateuserid sip_user_id ,
    CASE
    WHEN (tirf.isprimaryowner=''Y''
    OR tirf.issecondaryowner =''Y'')
    THEN pkg_encrypt.fn_decrypt(tu.lastname)
      ||'' ''
      ||pkg_encrypt.fn_decrypt(tu.firstname)
    ELSE NULL
    END "Facility Profile Manager",
    CASE
    WHEN tblFac.Isdepartment=''Y''
    AND (tirf.isprimaryowner=''Y''
    OR tirf.issecondaryowner=''Y'')
    THEN pkg_encrypt.fn_decrypt(tu.lastname)
      ||'' ''
      ||pkg_encrypt.fn_decrypt(tu.firstname)
    ELSE NULL
    END "Dept Profile Manager",
    Tblfac.Facilityname FACILITYNAME,
    Tbldept.Departmenttypename,
    Tblfac.Departmentname Departmentname,
    Tblfac.Departmenttypeid,
    thera.therapeuticareaid,
     CASE
    WHEN (SELECT count(1) from TBL_IRFACILITYUSERMAP tirf1
         WHERE (tirf1.isprimaryowner=''Y''
        OR tirf1.issecondaryowner =''Y'') AND tirf1.facilityid=tirf.facilityid AND tirf1.userid='||IP_LOGGEDIN_USER||') <>0
    THEN ''Y''
    ELSE ''N''
    END  FAC_PROF_MANAGER,

    CASE
    WHEN (SELECT count(1) from TBL_IRFACILITYUSERMAP tirf1
         WHERE (tirf1.isprimaryowner=''Y''
        OR tirf1.issecondaryowner =''Y'') AND tirf1.facilityid=tirf.facilityid AND tblfac.isdepartment=''Y'' AND tirf1.userid='||IP_LOGGEDIN_USER||') <>0
    THEN ''Y''
    ELSE ''N''
    END  DEPT_PROF_MANAGER/*,
   \* (select tha.therapeuticareaid  from tbl_therapeuticarea tha where tha.therapeuticareaid in (SELECT DISTINCT th1.THERAPEUTICAREAID
    FROM TBL_THERAPETICAREAFACILITYMAP th1
    WHERE facilityid=tblFac.Facilityid
     --and thera.userid=tirf.userid
    )) therapeuticareaid,
    (select tha.therapeuticareaname  from tbl_therapeuticarea tha where tha.therapeuticareaid in (SELECT DISTINCT th1.THERAPEUTICAREAID
    FROM TBL_THERAPETICAREAFACILITYMAP th1
    WHERE facilityid=tblFac.Facilityid
     --and thera.userid=tirf.userid
    )) therapeuticareaname,*\
   \*(SELECT DISTINCT tsb.therapeuticareaid
  FROM tbl_therapeuticarea tsb
  WHERE tsb.therapeuticareaid IN
    (SELECT DISTINCT th.therapeuticareaid
    FROM TBL_THERAPETICAREAFACILITYMAP th,tbl_therapeticareausermap the1
    WHERE th.facilityid=tblFac.Facilityid
    and tsb.therapeuticareaid=th.therapeuticareaid
    and tsub.subtherapeuticareaid=th.subtherapeuticareaid
    and the1.userid=tirf.userid
    and th.ISACTIVE=''Y''
    )) subtherapeuticareaid,*\
    thera.therapeuticareaid,
    CASE
    WHEN (tirf.isprimaryowner=''Y''
    OR tirf.issecondaryowner =''Y'')
    THEN ''Y''
    ELSE ''N''
    END  FAC_PROF_MANAGER,
     CASE
    WHEN tblFac.Isdepartment=''Y''
    AND (tirf.isprimaryowner=''Y''
    OR tirf.issecondaryowner=''Y'')
    THEN ''Y''
    ELSE ''N'' DEPT_PROF_MANAGER
    (select THERAPEUTICAREANAME from tbl_therapeuticarea where therapeuticareaid= thera.therapeuticareaid) THERAPEUTICAREANAME,
   rtrim((SELECT DISTINCT RTRIM ( XMLAGG (XMLELEMENT (e, tsb.subtherapeuticareaid
    || '','')).EXTRACT (''//text()''), '','')
  FROM tbl_subtherapeuticarea tsb
  WHERE tsb.subtherapeuticareaid IN
    (SELECT DISTINCT subtherapeuticareaid
    FROM TBL_THERAPETICAREAFACILITYMAP
    WHERE facilityid=tblFac.Facilityid
    and tsb.therapeuticareaid=therapeuticareaid
    )),'','') subtherapeuticareaid,
  rtrim(( SELECT DISTINCT RTRIM ( XMLAGG (XMLELEMENT (e, tsb.subtherapeuticareaname
    || '';'')).EXTRACT (''//text()''), '';'')
  FROM tbl_subtherapeuticarea tsb
  WHERE tsb.subtherapeuticareaid IN
    (SELECT DISTINCT subtherapeuticareaid
    FROM TBL_THERAPETICAREAFACILITYMAP
    WHERE facilityid=tblFac.Facilityid
     and tsb.therapeuticareaid=therapeuticareaid
    )),'';'') subtherapeuticareaName
  */
  from TBL_IRFACILITYUSERMAP tirf
  left join TBL_FACILITYUSERROLEMAP tfurm
  on tirf.IRFACILITYUSERMAPID=tfurm.FACILITYUSERID
  LEFT JOIN Tbl_Facilities tblFac
  ON tirf.facilityid=tblFac.Facilityid
  LEFT JOIN TBL_USERPROFILES TU
  ON tu.userid=tirf.userid
  LEFT JOIN Tbl_Contact tblcon
  ON Tblfac.Contactid = Tblcon.Contactid
  LEFT JOIN Tbl_Departmenttype tbldept
  ON Tblfac.Departmenttypeid = Tbldept.Departmenttypeid
  LEFT JOIN Tbl_Countries tblcountry
  ON Tblcon.Countrycd = Tblcountry.Countrycd
  LEFT JOIN Tbl_States tblstates
  ON Tblcon.State     = Tblstates.Statecd
  LEFT JOIN TBL_THERAPETICAREAFACILITYMAP  thera
  on thera.facilityid=tblFac.Facilityid
  ) where 1=1 AND PLAT_FACDPT_ROLEID is not null ';



  select orgid into v_l_orgid from tbl_userprofiles where userid=IP_LOGGEDIN_USER;

    if IP_LOGGEDIN_USER is not null and v_orgflag='Y' then

    /*SELECT distinct RTRIM (
        XMLAGG (XMLELEMENT (e, tir.Principalfacilityid  || ',')).EXTRACT ('//text()'),
        ',') bulk collect into  L_FACILITY from Tbl_Site tir
    WHERE  tir.Studyid in
       (select Studyid
        from Tbl_Study
       where Progid in (select progid from Tbl_Program where Orgid = v_l_orgid));*/

  /*  SELECT distinct RTRIM (
        XMLAGG (XMLELEMENT (e, tir.facilityid  || ',')).EXTRACT ('//text()'),
        ',') bulk collect into  L_FACILITY   from tbl_facilities tir where rownum<=1000 order by 1 desc   ;
    */
    ------Disabled below command but not removing 
   /* select listagg(facilityid,',') within group(order by createddt desc )  bulk collect into  L_FACILITY from tbl_facilities where rownum<=1000;

     select listagg(facilityid,',') within group(order by createddt desc )  bulk collect into  L_FACILITY1 from tbl_facilities where rownum>1000;


     IF L_FACILITY  IS NOT NULL  THEN
    FOR i IN 1..L_FACILITY.count
    LOOP
      EXIT
    WHEN L_FACILITY(i) is null;
      IF i             = 1 THEN
      FAC_IDS_STR := L_FACILITY(i);
      ELSE
      FAC_IDS_STR := FAC_IDS_STR || ',' || L_FACILITY(i);
      END IF;

    END LOOP;

    END IF;

    IF L_FACILITY1  IS NOT NULL  THEN
    FOR i IN 1..L_FACILITY1.count
    LOOP
      EXIT
    WHEN L_FACILITY1(i) is null;
      IF i             = 1 THEN
      FAC_IDS_STR := L_FACILITY1(i);
      ELSE
      FAC_IDS_STR1 := FAC_IDS_STR1 || ',' || L_FACILITY1(i);
      END IF;

    END LOOP;

    END IF;

  V_AND_CLAUSE := ' AND FACILITYID in ('||FAC_IDS_STR||')';

  IF FAC_IDS_STR1 is not null then

   V_AND_CLAUSE := ' AND FACILITYID in ('||FAC_IDS_STR||') OR FACILITYID in ('||FAC_IDS_STR1||')';
   end if;
   V_SELECT_PART:=V_SELECT_PART||V_AND_CLAUSE;*/
   
   V_AND_CLAUSE := ' AND FACILITYID in (SELECT FACILITYID FROM TBL_FACILITIES ) ';

  end if;
  /*end if ;*/
   IF IP_LOGGEDIN_USER       IS NOT NULL  AND v_orgflag='N' THEN

   V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND  FACILITYID in (select FACILITYID from TBL_IRFACILITYUSERMAP where USERID='||IP_LOGGEDIN_USER||' and ISACTIVE=''Y'' )';

   END IF;



  if IP_SUBTHERAAREA is not null and IP_SUBTHERAAREA.Count>0 then
    for i in 1..IP_SUBTHERAAREA.Count loop
       EXIT WHEN IP_SUBTHERAAREA(I)=-1 ;
    if i=1 then
      V_IP_SUBTHERAAREA_STR:=IP_SUBTHERAAREA(i);
      else
      V_IP_SUBTHERAAREA_STR:=V_IP_SUBTHERAAREA_STR||','||IP_SUBTHERAAREA(i);
      end if;
      end loop;
      end if;

   if V_IP_SUBTHERAAREA_STR is not null then
    V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND therapeuticareaid IN  (select a.therapeuticareaid   from tbl_subtherapeuticarea a where a.subtherapeuticareaid in ('||V_IP_SUBTHERAAREA_STR||')) ';


  end if;


      IF IP_FACID              IS NOT NULL THEN
      V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND FACILITYID = '|| IP_FACID ;
    END IF;

       IF IP_FACNAME              IS NOT NULL THEN
      V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND LOWER(FACILITYNAME) LIKE LOWER(''%' || Replace(IP_FACNAME,'''','''''') || '%'')';
    END IF;

    IF IP_COUNTRYID              IS NOT NULL AND IP_COUNTRYID.COUNT>0 THEN
      FOR I IN 1..IP_COUNTRYID.COUNT LOOP
      EXIT WHEN IP_COUNTRYID(I)=-1;
      IF I=1 THEN
        V_IP_COUNTRYID_STR:=IP_COUNTRYID(I);
        ELSE
        V_IP_COUNTRYID_STR:=V_IP_COUNTRYID_STR||','||IP_COUNTRYID(I);
        END IF;
       END LOOP;
      end if;
       if V_IP_COUNTRYID_STR is not null then
      V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND COUNTRYID IN( ' || V_IP_COUNTRYID_STR ||')';
    END IF;

    IF IP_DEPTTYPID IS NOT NULL THEN

     V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND Departmenttypeid ='||IP_DEPTTYPID;

     END IF;

    IF IP_STATEID              IS NOT NULL THEN
      V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND STATEID = ' || IP_STATEID ;
    END IF;
   /*   IF I_CITY              IS NOT NULL THEN
      V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND LOWER(tblstates.CITY) LIKE LOWER(''%' || I_CITY || '%'')';
    END IF;*/

     IF IP_THERAAREA              IS NOT NULL AND IP_THERAAREA.COUNT>0 THEN
      FOR I IN 1..IP_THERAAREA.COUNT LOOP
        EXIT WHEN IP_THERAAREA(I)=-1 ;
        IF I=1 THEN
        V_IP_THERAAREA_STR:=IP_THERAAREA(I);
        ELSE
        V_IP_THERAAREA_STR :=V_IP_THERAAREA_STR||','||IP_THERAAREA(I);
        END IF;
      END LOOP;
      end if ;
      if V_IP_THERAAREA_STR is not null then
      V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND THERAPEUTICAREAID IN ('||V_IP_THERAAREA_STR||')';
    END IF;



    V_TEMP_ORDRBY := ' ORDER BY ' || V_TEMP_SORTBY || ' ' || IP_ORDRBY;


  V_QUERY_FINAL := V_SELECT_PART  || V_DYNMC_SQL_CLAUSE_PART||V_TEMP_ORDRBY ;

    V_COUNT_QUERY := 'select count(1) from (' || V_QUERY_FINAL || ')';
     -- dbms_output.put_line(V_COUNT_QUERY);
     --insert into temp_table values(null,V_COUNT_QUERY);
    -- commit;

    EXECUTE IMMEDIATE V_COUNT_QUERY INTO IP_COUNT;
    V_PAG_END_ROW           := IP_OFFSET + IP_LIMIT-1;

    V_FINAL_QUERY          := 'SELECT * FROM (SELECT ROWNUM RNUM , TEMP.* FROM (' || V_QUERY_FINAL  || ' ) TEMP  WHERE ROWNUM <=' || TO_CHAR(V_PAG_END_ROW) || ' ) WHERE RNUM >='|| TO_CHAR(IP_OFFSET);
    -- dbms_output.put_line(V_FINAL_QUERY);
     -- insert into temp_table values(V_FINAL_QUERY);
     -- commit;

   OPEN IP_REPORT_DATA FOR V_FINAL_QUERY ;

    END sp_fac_dept_report;
    
   procedure sp_study_site_stf_report(
      IP_STUDYID        IN num_array,
      IP_SITEID         IN num_array,
      IP_COUNTRYID      IN NUM_ARRAY,
      IP_LOGGEDIN_USER  IN NUMBER,
      IP_FIRSTNAME      IN VARCHAR2,
      IP_LASTNAME       IN VARCHAR2,
      IP_SYSTEMID       IN NUM_ARRAY,
      IP_ACCESS_START_DATE_FROM DATE,
      IP_ACCESS_START_DATE_TO   DATE,
      IP_ACCESS_END_DATE_FROM   DATE,
      IP_ACCESS_END_DATE_TO     DATE,
      IP_OFFSET         IN NUMBER,
      IP_LIMIT          IN NUMBER,
      IP_ORDRBY         IN VARCHAR2,
      IP_SORTBY         IN VARCHAR2,
      IP_COUNT          OUT NUMBER,
      IP_REPORT_DATA OUT SYS_REFCURSOR)
      AS
    V_SELECT_PART          VARCHAR2(9999 BYTE);
    V_FINAL_QUERY          VARCHAR2(9999 BYTE);
    V_QUERY_FINAL            VARCHAR2(9999 BYTE);
    V_DYNMC_SQL_CLAUSE_PART VARCHAR2(9999 BYTE);
     -- DYNMC_WHR_CLAUSE_PART VARCHAR2(9999 BYTE);
    V_PAG_END_ROW           NUMBER;
    V_COUNT_QUERY         VARCHAR2(9999 BYTE);
    V_ORGID               NUMBER(38);
    V_TEMP_SORTBY            VARCHAR2(9999 BYTE);
    V_TEMP_ORDRBY              VARCHAR2(9999 BYTE);
    V_ROLEID                 NUMBER ;
    V_ROLENAME               VARCHAR2(1000);
    V_WHERE_CLAUSE           VARCHAR2(9999 BYTE);
    V_STUDY_IDS_STR            VARCHAR2(9999 BYTE);
    V_SITE_IDS_STR             VARCHAR2(9999 BYTE);
    V_COUNTRYID               VARCHAR2(9999 BYTE);
    V_FROMDATE                DATE;
    V_TODATE                  DATE;
     -- V_FACILITY               VARCHAR2(1000);
   /* type  V_ROLENAME is varray(200) of varchar2(1000);
    L_ROLENAME V_ROLENAME;
     */
     L_COUNT number ;
    Type V_FACILITY is  varray(200) of varchar2(100);
    L_FACILITY V_FACILITY;
    FAC_IDS_STR  VARCHAR2(1000);

  BEGIN
    V_TEMP_ORDRBY := '';

    --P_OFFSET :=I_OFFSET+1;
    IF IP_SORTBY    = 'FACILITYID' THEN
    V_TEMP_SORTBY := 'UPPER(TRIM(FACILITYID))';
  /*  ELSIF I_SORTBY = 'COUNTRYNAME' THEN
    TEMP_SORTBY := 'UPPER(TRIM(COUNTRYNAME))';
    ELSIF I_SORTBY = 'STATENAME' THEN
     TEMP_SORTBY := 'UPPER(TRIM(STATE_ACTUAL))';
    ELSIF I_SORTBY = 'CITY' THEN
    TEMP_SORTBY := 'UPPER(TRIM(CITY))';*/
    ELSE
    V_TEMP_SORTBY := ' studyid,siteid,PII_LASTNAME ';
    --INSERT INTO temp_table VALUES (I_SORTBY);
    END IF;

  V_SELECT_PART :=
    'SELECT distinct tblstudy.studyid,
       tblstudy.STUDYNAME,
       tblsite.siteid,
       tblsite.SITENAME,
       tblsite.piid,
       tcon.countryname,
       tcon.countryid,
       pkg_encrypt.fn_decrypt(tbluser.firstname) PII_FIRSTNAME,
       pkg_encrypt.fn_decrypt(tbluser.lastname) PII_LASTNAME,
       NULL as SYSTEM,
       NULL as LASTNAME_STUDYSTAFF,
       NULL as FIRST_STUDYSTAFF,
       tbluser.TRANSCELERATEUSERID,
       tblrole.rolename,
      case when tblfac.isdepartment=''Y'' then tblfac.departmentname
       else tblfac.facilityname end as "FACILITY/DEPT NAME" ,
      case when tblfac.isdepartment=''Y'' then tblfac.departmenttypeid
       else tblfac.facilityid end as "FACILITY/DEPTID"  ,   
       tbluserrole.effectivestartdate STARTDATE,
       tbluserrole.effectiveenddate   ENDDATE,
       pkg_encrypt.fn_decrypt(TC.Email) EMAIL,
      pkg_encrypt.fn_decrypt(TC.Phone1) PHONE     
    FROM Tbl_Study tblstudy
    LEFT JOIN Tbl_Site tblsite
    ON Tblstudy.Studyid = Tblsite.Studyid
    LEFT JOIN Tbl_Userprofiles tbluser
    on Tblsite.Piid = Tbluser.Userid
    LEFT JOIN Tbl_Userrolemap tbluserrole
    on Tbluser.Userid = Tbluserrole.Userid
    LEFT JOIN Tbl_Roles tblrole
    on Tbluserrole.Roleid = Tblrole.Roleid
    LEFT JOIN Tbl_Facilities tblfac
    on Tblsite.Principalfacilityid = Tblfac.Facilityid
    LEFT JOIN TBL_CONTACT TC
    ON Tbluser.Contactid=TC.Contactid
    LEFT JOIN TBL_IRFACILITYUSERMAP TIF
    ON  Tbluser.Userid=TIF.Userid
    LEFT JOIN Tbl_Departmenttype dept
    ON tblfac.Departmenttypeid = Dept.Departmenttypeid 
    LEFT JOIN Tbl_Countries tcon
    ON tcon.countrycd=tc.countrycd
    WHERE 1=1';
    
    
    IF IP_STUDYID  IS NOT NULL AND IP_STUDYID.count >0 THEN
    FOR i IN 1..IP_STUDYID.count
    LOOP
      EXIT
    WHEN IP_STUDYID(i) = -1;
      IF i             = 1 THEN
      V_STUDY_IDS_STR := IP_STUDYID(i);
      ELSE
      V_STUDY_IDS_STR := V_STUDY_IDS_STR || ',' || IP_STUDYID(i);
      END IF;

    END LOOP;

    END IF;

     IF IP_SITEID IS NOT NULL AND IP_SITEID.count >0 THEN
    FOR i IN 1..IP_SITEID.count
    LOOP
      EXIT
    WHEN IP_SITEID(i) = -1;
      IF i            = 1 THEN
      V_SITE_IDS_STR := IP_SITEID(i);
      ELSE
      V_SITE_IDS_STR := V_SITE_IDS_STR || ',' || IP_SITEID(i);
      END IF;
    END LOOP;


    END IF;


  IF V_STUDY_IDS_STR IS NOT NULL THEN
     IF V_DYNMC_SQL_CLAUSE_PART IS NOT NULL THEN
      V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND ';
      END IF;
      if V_SITE_IDS_STR is not null then
     V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || '   tblstudy.studyid in (' || V_STUDY_IDS_STR || ')';
      elsif V_SITE_IDS_STR is null then
    V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || '   tblstudy.studyid in (' || V_STUDY_IDS_STR || ')';
   end if;
   END IF;




  IF V_SITE_IDS_STR IS NOT NULL THEN
      IF V_DYNMC_SQL_CLAUSE_PART IS NOT NULL THEN
      V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND ';
      END IF;
      V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || '   tblsite.siteid in ('||V_SITE_IDS_STR||' )';
      END IF;
      

  IF IP_COUNTRYID   IS NOT NULL AND IP_COUNTRYID.COUNT>0 THEN
     
      
       FOR i IN 1..IP_COUNTRYID.count
      LOOP
      EXIT
      WHEN IP_COUNTRYID(i) = -1;
      IF i            = 1 THEN
        V_COUNTRYID := IP_COUNTRYID(i);
      ELSE
        V_COUNTRYID := V_COUNTRYID || ',' || IP_COUNTRYID(i);
      END IF;
      END LOOP;
    
      IF V_COUNTRYID IS NOT NULL  THEN  
      
      V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND tcon.countryid  in (' || TO_CHAR(V_COUNTRYID)||')';
     end if;
    END IF;
      

      IF IP_LOGGEDIN_USER              IS NOT NULL THEN
      V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND tbluser.USERID= ' || IP_LOGGEDIN_USER ;
    END IF;
    
       IF IP_FIRSTNAME              IS NOT NULL THEN
      V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND LOWER(pkg_encrypt.fn_decrypt (tbluser.FIRSTNAME)) LIKE LOWER(''%' || IP_FIRSTNAME || '%'')';
    END IF;

       IF IP_LASTNAME              IS NOT NULL THEN
     V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND LOWER(pkg_encrypt.fn_decrypt (tbluser.LASTNAME)) LIKE LOWER(''%' || IP_LASTNAME || '%'')';
    END IF;
    
    
     IF IP_ACCESS_START_DATE_FROM IS NOT NULL THEN 
    V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND tbluserrole.EFFECTIVESTARTDATE >= TO_DATE('''|| IP_ACCESS_START_DATE_FROM || ''', ''dd-mon-yy HH24:MI:SS'')';
    END IF;
    
   
    IF IP_ACCESS_START_DATE_TO IS NOT NULL THEN
    V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND tbluserrole.EFFECTIVESTARTDATE <= TO_DATE('''|| IP_ACCESS_START_DATE_TO || ''', ''dd-mon-yy HH24:MI:SS'')';
    END IF;
    
    IF IP_ACCESS_END_DATE_FROM IS NOT NULL THEN
    V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND tbluserrole.effectiveenddate >= TO_DATE('''|| IP_ACCESS_END_DATE_FROM || ''', ''dd-mon-yy HH24:MI:SS'')';--TO_DATE(''' || p_todate|| ''',''dd-Mon-yy'')' ;
    END IF;
    
     IF IP_ACCESS_END_DATE_TO IS NOT NULL THEN
    V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND tbluserrole.effectiveenddate <= TO_DATE('''|| IP_ACCESS_END_DATE_TO || ''', ''dd-mon-yy HH24:MI:SS'')';--TO_DATE(''' || p_todate|| ''',''dd-Mon-yy'')' ;
    END IF;

      
    
  /*    
     IF I_FACID              IS NOT NULL THEN
      DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND tblfac.FACILITYID= ' || I_FACID ;
    END IF;
    
      IF I_DEPTID             IS NOT NULL THEN
      DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND Dept.Departmenttypeid = ' || I_DEPTID ;
    END IF;

      IF I_FACNAME              IS NOT NULL THEN
      DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND LOWER(tblfac.FACILITYNAME) LIKE LOWER(''%' || I_FACNAME || '%'')';
    END IF;*/
    
   /*     IF I_ROLE_STRT_DATE  IS NOT NULL  THEN 
     
       DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND tbluserrole.effectivestartdate >= TO_DATE('''|| I_ROLE_STRT_DATE || ''', ''dd-mon-yy HH24:MI:SS'')';

    END IF;

      IF I_ROLE_END_DATE  IS NOT NULL  THEN 
     
       DYNMC_SQL_CLAUSE_PART := DYNMC_SQL_CLAUSE_PART || ' AND tbluserrole.effectiveenddate <= TO_DATE('''|| I_ROLE_END_DATE || ''', ''dd-mon-yy HH24:MI:SS'')';

    END IF;*/

    
  V_TEMP_ORDRBY := ' ORDER BY ' || V_TEMP_SORTBY || ' ' || IP_ORDRBY;


  V_QUERY_FINAL := V_SELECT_PART  || V_DYNMC_SQL_CLAUSE_PART ;

    V_COUNT_QUERY := 'select count(1) from (' || V_QUERY_FINAL || ')';

    --- dbms_output.put_line(V_COUNT_QUERY);
    EXECUTE IMMEDIATE V_COUNT_QUERY INTO IP_COUNT;
    V_PAG_END_ROW           := IP_OFFSET + IP_LIMIT;

    V_FINAL_QUERY          := 'SELECT * FROM (SELECT ROWNUM RNUM , TEMP.* FROM (' || V_QUERY_FINAL  || ' ) TEMP  WHERE ROWNUM < ' || TO_CHAR(V_PAG_END_ROW) || ' ) WHERE RNUM >='|| TO_CHAR(IP_OFFSET)|| ' ' || V_TEMP_ORDRBY;
    dbms_output.put_line(V_FINAL_QUERY);

   OPEN IP_REPORT_DATA FOR V_FINAL_QUERY ;

    END sp_study_site_stf_report; 
    
  procedure sp_email_failure_log(
      IP_LOGGEDIN_USER  IN NUMBER,
      IP_EMAIL                    IN VARCHAR2,
      IP_TRANS_USERID             IN VARCHAR2,
      IP_LASTNAME                 IN VARCHAR2,
      IP_STUDY_ID                 IN NUM_ARRAY,
      IP_STUDY_SITE_ID            IN NUM_ARRAY,
      IP_EMAILSUBJECT             IN VARCHAR2,
      IP_EMAIL_FAIL_LOG_STARTDATE IN DATE,
      IP_EMAIL_FAIL_LOG_ENDDATE   IN DATE,
      IP_NOTIFIC_TYPE             IN NUM_ARRAY,
      IP_OFFSET                   IN NUMBER,
      IP_LIMIT                    IN NUMBER,
      IP_ORDRBY                   IN VARCHAR2,
      IP_SORTBY                   IN VARCHAR2,
      OP_COUNT                    OUT NUMBER,
      OP_REPORT_DATA              OUT SYS_REFCURSOR)
   -- /*********************************************************************
    --/**
    --/** Procedure:   SP_EMAIL_FAILURE_LOG
    --/** Description: POPULATES 'E-mail Delivery Failure Report' that provide the details of the delivery failed e-mail and the reason of failure if available.
    --/** Author:      Cognizant
    --/** Out:
    --/** In:
    --/*********************************************************************/
  AS
     V_SELECT_PART          VARCHAR2(32000);
    V_FINAL_QUERY          VARCHAR2(32000);
    V_QUERY_FINAL            VARCHAR2(32000);
    V_DYNMC_SQL_CLAUSE_PART VARCHAR2(32000);
     -- DYNMC_WHR_CLAUSE_PART VARCHAR2(9999 BYTE);
    V_PAG_END_ROW           NUMBER;
    V_COUNT_QUERY         VARCHAR2(32000);
    --  V_ORGID               NUMBER(38);
    V_TEMP_SORTBY            VARCHAR2(32000);
    V_TEMP_ORDRBY              VARCHAR2(32000);
    V_ROLEID                 NUMBER ;
    V_ROLENAME               VARCHAR2(1000);
    V_WHERE_CLAUSE           VARCHAR2(32000);
    V_STUDY_IDS_STR            VARCHAR2(32000);
    V_SITE_IDS_STR             VARCHAR2(32000);
    V_IP_NOTIFIC_TYPE_STR      VARCHAR2(32000);
  --  V_COUNTRYID               VARCHAR2(9999 BYTE);
    V_FROMDATE                DATE;
    V_TODATE                  DATE;
     -- V_FACILITY               VARCHAR2(1000);
   /* type  V_ROLENAME is varray(200) of varchar2(1000);
    L_ROLENAME V_ROLENAME;
     */
     V_ORGID                    NUMBER;
     V_ISSPONSOR                VARCHAR2(1 CHAR);

  BEGIN
    V_TEMP_ORDRBY := '';

    --P_OFFSET :=I_OFFSET+1;
    IF IP_SORTBY    = 'STUDYID' THEN
    V_TEMP_SORTBY := 'UPPER(TRIM(STUDYID))';
      ELSIF
       IP_SORTBY    = 'EMAIL' THEN
    V_TEMP_SORTBY := 'UPPER(TRIM(EMAIL))';
      ELSIF
       IP_SORTBY    = 'TRANSCELERATEUSERID' THEN
    V_TEMP_SORTBY := 'UPPER(TRIM(TRANSCELERATEUSERID))';
     ELSIF
       IP_SORTBY    = 'FIRSTNAME' THEN
    V_TEMP_SORTBY := 'UPPER(TRIM(FIRSTNAME))';
      ELSIF
       IP_SORTBY    = 'LASTNAME' THEN
    V_TEMP_SORTBY := 'UPPER(TRIM(LASTNAME))';
      ELSIF
       IP_SORTBY    = 'SITEID' THEN
    V_TEMP_SORTBY := 'UPPER(TRIM(SITEID))';
     ELSIF
       IP_SORTBY    = 'SUBJECT' THEN
    V_TEMP_SORTBY := 'UPPER(TRIM(SUBJECT))';

      ELSIF
       IP_SORTBY    = 'TITLE' THEN
    V_TEMP_SORTBY := 'UPPER(TRIM(TITLE))';

      ELSIF
       IP_SORTBY    = 'TYPEDESC' THEN
    V_TEMP_SORTBY := 'UPPER(TRIM(TYPEDESC))';

       ELSIF
       IP_SORTBY    = 'SENTDATE' THEN
     V_TEMP_SORTBY := 'SENTDATE';

       ELSE
    V_TEMP_SORTBY := 'SENTDATE';
    --INSERT INTO temp_table VALUES (V_TEMP_SORTBY);
    END IF;

  SELECT ORGID INTO V_ORGID FROM TBL_USERPROFILES WHERE USERID=IP_LOGGEDIN_USER;
  SELECT ISSPONSOR INTO V_ISSPONSOR FROM TBL_USERPROFILES WHERE USERID=IP_LOGGEDIN_USER;

  V_SELECT_PART :=
     'SELECT DISTINCT PKG_ENCRYPT.FN_DECRYPT(UP.FIRSTNAME) FIRSTNAME,
       PKG_ENCRYPT.FN_DECRYPT(UP.LASTNAME) LASTNAME,
       UP.TRANSCELERATEUSERID TRANSCELERATEUSERID,
       UP.ACTUALTRANSCELERATEUSERID ACTUALTRANSCELERATEUSERID,
       PKG_ENCRYPT.FN_DECRYPT(ELOG.EMAILID) EMAIL,
       PKG_ENCRYPT.FN_DECRYPT(ELOG.EMAILSUBJECT) SUBJECT,
       PKG_ENCRYPT.FN_DECRYPT(ELOG.EMAILSUBJECT) TITLE,
       EFAILOG.SENTDATE SENTDATE,
       EFAILOG.FAILUREREASON,
       ( SELECT LISTAGG(STD.STUDYNAME,'','') WITHIN GROUP (ORDER BY ALRTNOTF.ALERTNOTIFICATIONTYPEID )  FROM TBL_STUDY STD WHERE  (ALRTSTDYSITE.STUDYID =STD.STUDYID OR ALRTNOTF.STUDYID=STD.STUDYID)) STUDY,
       ( SELECT LISTAGG(STD.STUDYID,'','') WITHIN GROUP (ORDER BY ALRTNOTF.ALERTNOTIFICATIONTYPEID )  FROM TBL_STUDY STD WHERE  (ALRTSTDYSITE.STUDYID =STD.STUDYID   OR ALRTNOTF.STUDYID=STD.STUDYID)) STUDYID,
       ( SELECT LISTAGG(SIT.SITENAME,'','') WITHIN GROUP (ORDER BY ALRTNOTF.ALERTNOTIFICATIONTYPEID )  FROM TBL_SITE SIT WHERE  (ALRTSTDYSITE.SITEID=SIT.SITEID  OR ALRTNOTF.SITEID=SIT.SITEID)) SITE,
       ( SELECT LISTAGG(SIT.SITEID,'','') WITHIN GROUP (ORDER BY ALRTNOTF.ALERTNOTIFICATIONTYPEID )  FROM TBL_SITE SIT WHERE  (ALRTSTDYSITE.SITEID=SIT.SITEID  OR ALRTNOTF.SITEID=SIT.SITEID)) SITEID,
       ALRTNOTF.TEMPLATECODE ALERT_TEMP_CODE,
       TMPL.TEMPLATECODE,
       PKG_ENCRYPT.FN_DECRYPT(ALRTNOTF.TITLEJSON) TITLEJSON,
       PKG_ENCRYPT.FN_DECRYPT(TMPL.TITLETEMPLATE) TITLETEMPLATE,
       ALRTNOTF.ALERTNOTIFICATIONTYPEID,
       ALRTNOTFTYPE.TYPEDESC

  FROM TBL_EMAILFAILURELOG          EFAILOG,
       TBL_ALERTSANDNOTIFICATIONS   ALRTNOTF,
       TBL_ALERTANDNOTIFICATIONTYPE ALRTNOTFTYPE,
       TBL_ALERTNOTIFSTUDYSITEMAP   ALRTSTDYSITE,
       TBL_EMAILLOG               ELOG,
       TBL_USERPROFILES           UP,
       TBL_TEMPLATE               TMPL

 WHERE EFAILOG.REFID = ELOG.REFID
  AND ELOG.EMAILLOGID=ALRTNOTF.EMAILLOGID(+)
   AND ALRTNOTFTYPE.ALERTNOTIFICATIONTYPEID(+) = ALRTNOTF.ALERTNOTIFICATIONTYPEID
   AND ALRTSTDYSITE.ALERTNOTIFID(+)            =ALRTNOTF.ALERTNOTIFICATIONID
   AND ELOG.USERID                             =UP.USERID(+)
   AND TMPL.TEMPLATECODE(+)                    =ALRTNOTF.TEMPLATECODE';


    IF IP_STUDY_ID  IS NOT NULL AND IP_STUDY_ID.count >0 THEN
    FOR i IN 1..IP_STUDY_ID.count
    LOOP
      EXIT
    WHEN IP_STUDY_ID(i) = -1;
      IF i             = 1 THEN
      V_STUDY_IDS_STR := IP_STUDY_ID(i);
      ELSE
      V_STUDY_IDS_STR := V_STUDY_IDS_STR || ',' || IP_STUDY_ID(i);
      END IF;

    END LOOP;

    END IF;

     IF IP_STUDY_SITE_ID IS NOT NULL AND IP_STUDY_SITE_ID.count >0 THEN
    FOR i IN 1..IP_STUDY_SITE_ID.count
    LOOP
      EXIT
    WHEN IP_STUDY_SITE_ID(i) = -1;
      IF i            = 1 THEN
      V_SITE_IDS_STR := IP_STUDY_SITE_ID(i);
      ELSE
      V_SITE_IDS_STR := V_SITE_IDS_STR || ',' || IP_STUDY_SITE_ID(i);
      END IF;
    END LOOP;


    END IF;

  IF IP_LOGGEDIN_USER              IS NOT NULL AND V_ISSPONSOR='N' THEN
      V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND up.USERID IN (SELECT SITESTAFFUSERID FROM TBL_ORGSITESTAFFMAP A WHERE A.ORGID= ' || V_ORGID ||')' ;
    ELSE
    V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND ((up.USERID IN (SELECT USERID FROM TBL_USERPROFILES A WHERE A.ORGID= ' || V_ORGID ||')) OR (PKG_ENCRYPT.FN_DECRYPT(ELOG.EMAILID) IN (SELECT PKG_ENCRYPT.FN_DECRYPT(RECIEPIENTEMAIL) FROM TBL_REGISTRATIONINVITE WHERE SENTBYORGANIZATION = '||V_ORGID||')))' ;
    END IF;

  IF IP_LASTNAME IS NOT NULL THEN
    V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND LOWER(pkg_encrypt.fn_decrypt(up.LASTNAME)) LIKE LOWER(''%' || (TRIM(IP_LASTNAME)) ||'%'')';
  END IF;

    IF IP_EMAIL IS NOT NULL THEN
    V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND LOWER(pkg_encrypt.fn_decrypt(ELOG.EMAILID))LIKE LOWER(''%'||lower(TRIM(IP_EMAIL))||'%'')' ;
    END IF;

    IF IP_EMAILSUBJECT IS NOT NULL THEN
    V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND LOWER(pkg_encrypt.fn_decrypt(elog.EMAILSUBJECT)) LIKE LOWER(''%'|| IP_EMAILSUBJECT||'%'')' ;
    END IF;

    IF IP_EMAIL_FAIL_LOG_STARTDATE  IS NOT NULL THEN

     V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND efailog.sentdate  >= TO_DATE('''|| IP_EMAIL_FAIL_LOG_STARTDATE ||

  ''', ''dd-mon-yy HH24:MI:SS'')';
    END IF;

    IF IP_EMAIL_FAIL_LOG_ENDDATE  IS NOT NULL THEN

     V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND efailog.sentdate  <= TO_DATE('''|| IP_EMAIL_FAIL_LOG_ENDDATE ||' 23:59:59'||

  ''', ''dd-mon-yy HH24:MI:SS'')';
    END IF;

    IF IP_TRANS_USERID IS NOT NULL THEN
     V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND LOWER(UP.ACTUALTRANSCELERATEUSERID) =LOWER('''||IP_TRANS_USERID||''')';
    END IF;

    IF IP_NOTIFIC_TYPE IS NOT NULL AND IP_NOTIFIC_TYPE.count >0 THEN
      FOR i IN 1..IP_NOTIFIC_TYPE.count
      LOOP
      EXIT
      WHEN IP_NOTIFIC_TYPE(i) = -1;
      IF i             = 1 THEN
        V_IP_NOTIFIC_TYPE_STR := IP_NOTIFIC_TYPE(i);
      ELSE
        V_IP_NOTIFIC_TYPE_STR := V_IP_NOTIFIC_TYPE_STR || ',' || IP_NOTIFIC_TYPE(i);
      END IF;
      END LOOP;
      end if;
      if V_IP_NOTIFIC_TYPE_STR is not null then
     V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND alrtnotf.ALERTNOTIFICATIONTYPEID in ('|| V_IP_NOTIFIC_TYPE_STR||')';
  END IF;



  IF V_STUDY_IDS_STR IS NOT NULL THEN
     IF V_DYNMC_SQL_CLAUSE_PART IS NOT NULL THEN
      V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART; --|| ' AND ';
     END IF;
      if V_SITE_IDS_STR is not null then
     V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' and  ( SELECT LISTAGG(STD.STUDYID,'','') WITHIN GROUP (ORDER BY ALRTNOTF.ALERTNOTIFICATIONTYPEID )  FROM TBL_STUDY STD WHERE  (ALRTSTDYSITE.STUDYID =STD.STUDYID   OR ALRTNOTF.STUDYID=STD.STUDYID)) in ('||V_STUDY_IDS_STR ||')';
      elsif V_SITE_IDS_STR is null then
    V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' and  ( SELECT LISTAGG(STD.STUDYID,'','') WITHIN GROUP (ORDER BY ALRTNOTF.ALERTNOTIFICATIONTYPEID )  FROM TBL_STUDY STD WHERE  (ALRTSTDYSITE.STUDYID =STD.STUDYID   OR ALRTNOTF.STUDYID=STD.STUDYID)) in ('||V_STUDY_IDS_STR ||')';
      end if;
   END IF;


  IF V_SITE_IDS_STR IS NOT NULL THEN
      IF V_DYNMC_SQL_CLAUSE_PART IS NOT NULL THEN
      V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART;-- || ' AND ';
      END IF;
      V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND ( SELECT LISTAGG(SIT.SITEID,'','') WITHIN GROUP (ORDER BY ALRTNOTF.ALERTNOTIFICATIONTYPEID )  FROM TBL_SITE SIT WHERE  (ALRTSTDYSITE.SITEID=SIT.SITEID  OR ALRTNOTF.SITEID=SIT.SITEID)) in ('||V_SITE_IDS_STR||')';
  END IF;


  V_TEMP_ORDRBY := ' ORDER BY ' || V_TEMP_SORTBY || ' ' || IP_ORDRBY;


  V_QUERY_FINAL := V_SELECT_PART  || V_DYNMC_SQL_CLAUSE_PART ;

    V_COUNT_QUERY := 'select count(1) from (' || V_QUERY_FINAL || ')';

    dbms_output.put_line(V_COUNT_QUERY);
    EXECUTE IMMEDIATE V_COUNT_QUERY INTO OP_COUNT;
    V_PAG_END_ROW           := IP_OFFSET + IP_LIMIT;

    V_FINAL_QUERY          := 'SELECT * FROM (SELECT ROWNUM RNUM , TEMP.* FROM (' || V_QUERY_FINAL  ||  V_TEMP_ORDRBY ||' ) TEMP  WHERE ROWNUM < ' || TO_CHAR(V_PAG_END_ROW) || ' ) WHERE RNUM >='|| TO_CHAR(IP_OFFSET);
    dbms_output.put_line(V_FINAL_QUERY);
    --INSERT INTO temp_table VALUES (V_FINAL_QUERY);
    --commit;

   OPEN OP_REPORT_DATA FOR V_FINAL_QUERY ;

  END sp_email_failure_log;

  procedure sp_email_safetynotfail(
      IP_LOGGEDIN_USER  IN NUMBER,
      IP_STUDY_ID                 IN NUM_ARRAY,
      IP_STUDY_SITE_ID            IN NUM_ARRAY,
      IP_DIST_STARTDATE           IN DATE,
      IP_DIST_ENDDATE             IN DATE,
      IP_COMPOUND                 IN NUM_ARRAY,
      IP_COUNTRYID                IN NUM_ARRAY,
      IP_OFFSET                   IN NUMBER,
      IP_LIMIT                    IN NUMBER,
      IP_ORDRBY                   IN VARCHAR2,
      IP_SORTBY                   IN VARCHAR2,
      OP_COUNT                    OUT NUMBER,
      OP_REPORT_DATA              OUT SYS_REFCURSOR)
   -- /*********************************************************************
    --/**
    --/** Procedure:   sp_email_safetynotfail
    --/** Description: POPULATES 'E-mail safety notification Failure Report' that provide the details of the delivery failed e-mail notofication and the reason of failure if available.
    --/** Author:      Cognizant
    --/** Out:
    --/** In:
    --/*********************************************************************/
  AS
     V_SELECT_PART             VARCHAR2(32000);
    V_FINAL_QUERY            VARCHAR2(32000);
    V_QUERY_FINAL            VARCHAR2(32000);
    V_DYNMC_SQL_CLAUSE_PART  VARCHAR2(32000);
     -- DYNMC_WHR_CLAUSE_PART VARCHAR2(9999 BYTE);
    V_PAG_END_ROW            NUMBER;
    V_COUNT_QUERY            VARCHAR2(32000);
    V_ORGID                  NUMBER(38);
    V_TEMP_SORTBY            VARCHAR2(32000);
    V_TEMP_ORDRBY            VARCHAR2(32000);
    V_ROLEID                 NUMBER ;
    V_ROLENAME               VARCHAR2(1000);
    V_WHERE_CLAUSE           VARCHAR2(32000);
    V_STUDY_IDS_STR          VARCHAR2(32000);
    V_SITE_IDS_STR           VARCHAR2(32000);
    V_COMPOUND               VARCHAR2(32000);
    V_COUNTRY_IDS_STR        VARCHAR2(32000);
  --    V_COUNTRYID               VARCHAR2(9999 BYTE);
    V_FROMDATE                DATE;
    V_TODATE                  DATE;
    V_ISSPONSOR               VARCHAR2(1);
     -- V_FACILITY               VARCHAR2(1000);
   /* type  V_ROLENAME is varray(200) of varchar2(1000);
    L_ROLENAME V_ROLENAME;
     */

  BEGIN
    V_TEMP_ORDRBY := '';

    --P_OFFSET :=I_OFFSET+1;
    IF IP_SORTBY    = 'STUDYID' THEN
    V_TEMP_SORTBY := 'UPPER(TRIM(STUDYID))';
    ELSE
    V_TEMP_SORTBY := ' sentdate ';
    --INSERT INTO temp_table VALUES (I_SORTBY);
    END IF;
  SELECT ISSPONSOR INTO V_ISSPONSOR FROM TBL_USERPROFILES WHERE USERID=IP_LOGGEDIN_USER;   
  SELECT ORGID INTO V_ORGID FROM TBL_USERPROFILES WHERE USERID=IP_LOGGEDIN_USER;


  V_SELECT_PART :=
    'SELECT distinct pkg_encrypt.fn_decrypt(up.firstname) FIRSTNAME,
       pkg_encrypt.fn_decrypt(up.lastname) LASTNAME,
       up.transcelerateuserid,
       pkg_encrypt.fn_decrypt(cont.email) EMAIL,
       pkg_encrypt.fn_decrypt(elog.EMAILSUBJECT) SUBJECT,
       pkg_encrypt.fn_decrypt(elog.EMAILSUBJECT) TITLE,
       efailog.sentdate,
       efailog.failurereason,
       ( select listagg(std.studyname,'','') within Group (order by alrtnotf.ALERTNOTIFICATIONTYPEID )  from tbl_study std where  (alrtstdysite.studyid =std.studyid OR alrtnotf.studyid=STD.STUDYID)) STUDY,
       ( select listagg(std.studyid,'','') within Group (order by alrtnotf.ALERTNOTIFICATIONTYPEID )  from tbl_study std where  (alrtstdysite.studyid =std.studyid   OR alrtnotf.studyid=STD.STUDYID)) STUDYID, 
       ( select listagg(sit.sitename,'','') within Group (order by alrtnotf.ALERTNOTIFICATIONTYPEID )  from tbl_site sit where  (alrtstdysite.SITEID=sit.siteid  OR alrtnotf.siteid=SIT.Siteid)) SITE,
       ( select listagg(sit.siteid,'','') within Group (order by alrtnotf.ALERTNOTIFICATIONTYPEID )  from tbl_site sit where  (alrtstdysite.SITEID=sit.siteid  OR alrtnotf.siteid=SIT.Siteid)) SITEID,
       alrtnotf.ALERTNOTIFICATIONTYPEID,
       alrtnotftype.TYPEDESC,
       (select listagg(tcoun.countryname,'';'') within group (order by alrtnotf.ALERTNOTIFICATIONTYPEID)
    from tbl_site       sit,
       tbl_facilities tfac,
       tbl_countries  tcoun
   where sit.principalfacilityid = tfac.facilityid
     and tfac.contactid          = cont.contactid
     and cont.countrycd          = tcoun.countrycd) STUDY_SITE_COUNTRY,
    (select listagg(case
           when tr.rolename = ''Monitor'' then
            pkg_encrypt.fn_decrypt(up.lastname) || '';'' ||
            pkg_encrypt.fn_decrypt(up.firstname)
           else
            null
           end,'';'') within group (order by alrtnotf.ALERTNOTIFICATIONTYPEID )
        from tbl_userrolemap urm,tbl_roles tr
       where urm.userid = up.userid
         and urm.roleid = tr.roleid) MONITOR_NAME,
         NULL as STUDY_MONITOR_EMAIL,
       alrtnotf.Templatecode ALERT_TEMP_CODE,
       TMPL.TEMPLATECODE,
       pkg_encrypt.fn_decrypt(alrtnotf.titlejson) titlejson,
       pkg_encrypt.fn_decrypt(TMPL.Titletemplate) Titletemplate

    FROM tbl_alertnotifstudysitemap alrtstdysite,
       TBL_ALERTSANDNOTIFICATIONS alrtnotf,
       TBL_ALERTANDNOTIFICATIONTYPE alrtnotftype,
       tbl_emailfailurelog        efailog,
       tbl_emaillog               elog,
       tbl_userprofiles           up,
       tbl_contact                cont,
       tbl_study                  STD,
     --  TBL_SITE                   SIT,
       TBL_TEMPLATE               TMPL,
       TBL_STUDYCOUNTRYMILESTONE  SCM

  WHERE
       alrtstdysite.alertnotifid(+)               =alrtnotf.ALERTNOTIFICATIONID
     AND alrtnotftype.ALERTNOTIFICATIONTYPEID     =alrtnotf.ALERTNOTIFICATIONTYPEID
     AND alrtnotf.EMAILLOGID                      =elog.emaillogid(+)
     AND efailog.refid                            =elog.refid
     AND elog.userid                              =up.userid
     AND up.userid                                =cont.contactid
  /* AND alrtstdysite.Studyid                     =STD.STUDYID
     AND (alrtstdysite.studyid                    =std.studyid OR alrtnotf.studyid=STD.STUDYID)
     AND (alrtstdysite.SITEID                     =sit.siteid  OR alrtnotf.siteid=SIT.Siteid)*/
     AND TMPL.TEMPLATECODE                        =alrtnotf.templatecode
     AND SCM.STUDYID                              =STD.STUDYID';


    IF IP_STUDY_ID  IS NOT NULL AND IP_STUDY_ID.count >0 THEN
    FOR i IN 1..IP_STUDY_ID.count
    LOOP
      EXIT
    WHEN IP_STUDY_ID(i) = -1;
      IF i             = 1 THEN
      V_STUDY_IDS_STR := IP_STUDY_ID(i);
      ELSE
      V_STUDY_IDS_STR := V_STUDY_IDS_STR || ',' || IP_STUDY_ID(i);
      END IF;

    END LOOP;

    END IF;

     IF IP_STUDY_SITE_ID IS NOT NULL AND IP_STUDY_SITE_ID.count >0 THEN
    FOR i IN 1..IP_STUDY_SITE_ID.count
    LOOP
      EXIT
    WHEN IP_STUDY_SITE_ID(i) = -1;
      IF i            = 1 THEN
      V_SITE_IDS_STR := IP_STUDY_SITE_ID(i);
      ELSE
      V_SITE_IDS_STR := V_SITE_IDS_STR || ',' || IP_STUDY_SITE_ID(i);
      END IF;
    END LOOP;


    END IF;
    
    IF IP_COUNTRYID IS NOT NULL AND IP_COUNTRYID.count >0 THEN
    FOR i IN 1..IP_COUNTRYID.count
    LOOP
      EXIT
    WHEN IP_COUNTRYID(i) = -1;
      IF i            = 1 THEN
      V_COUNTRY_IDS_STR := IP_COUNTRYID(i);
      ELSE
      V_COUNTRY_IDS_STR := V_COUNTRY_IDS_STR || ',' || IP_COUNTRYID(i);
      END IF;
    END LOOP;


    END IF;
    
     IF V_COUNTRY_IDS_STR IS NOT NULL THEN
      V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' and scm.countryid in ('||V_COUNTRY_IDS_STR||' )';
      END IF;

  /*IF IP_LOGGEDIN_USER              IS NOT NULL THEN
      V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND up.USERID= ' || IP_LOGGEDIN_USER ;
    END IF;*/
    
   IF IP_LOGGEDIN_USER              IS NOT NULL AND V_ISSPONSOR='N' THEN
      V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND up.USERID IN (SELECT SITESTAFFUSERID FROM TBL_ORGSITESTAFFMAP A WHERE A.ORGID= ' || V_ORGID ||')' ;
    ELSE 
    V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND up.USERID IN (SELECT USERID FROM TBL_USERPROFILES A WHERE A.ORGID= ' || V_ORGID ||')' ;
    END IF;

  IF V_STUDY_IDS_STR IS NOT NULL THEN
     IF V_DYNMC_SQL_CLAUSE_PART IS NOT NULL THEN
      V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND ';
      END IF;
      if V_SITE_IDS_STR is not null then
     V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || '   alrtstdysite.studyid in (' || V_STUDY_IDS_STR || ')';
      elsif V_SITE_IDS_STR is null then
    V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || '   alrtstdysite.studyid in (' || V_STUDY_IDS_STR || ')';
   end if;
   END IF;




  IF V_SITE_IDS_STR IS NOT NULL THEN
      IF V_DYNMC_SQL_CLAUSE_PART IS NOT NULL THEN
      V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND ';
      END IF;
      V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || '   alrtstdysite.siteid in ('||V_SITE_IDS_STR||' )';
      END IF;

  IF IP_DIST_STARTDATE  IS NOT NULL THEN

     V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND efailog.sentdate  >= TO_DATE('''|| IP_DIST_STARTDATE ||

  ''', ''dd-mon-yy HH24:MI:SS'')';
    END IF;

    IF IP_DIST_ENDDATE  IS NOT NULL THEN

     V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND efailog.sentdate  <= TO_DATE('''|| IP_DIST_ENDDATE ||' 23:59:59'||

  ''', ''dd-mon-yy HH24:MI:SS'')';
    END IF;
    
   IF IP_COMPOUND IS NOT NULL AND IP_COMPOUND.count >0 THEN
    FOR i IN 1..IP_COMPOUND.count
    LOOP
      EXIT
    WHEN IP_COMPOUND(i) = -1;
      IF i            = 1 THEN
      V_COMPOUND := IP_COMPOUND(i);
      ELSE
      V_COMPOUND := V_COMPOUND || ',' || IP_COMPOUND(i);
      END IF;
    END LOOP; 
   END IF;    
  IF V_COMPOUND IS NOT NULL THEN
  V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND up.orgid IN (select cmp.orgid from tbl_compound cmp where cmp.compoundid in  ('||V_COMPOUND||' ))';
  Else
  V_DYNMC_SQL_CLAUSE_PART := V_DYNMC_SQL_CLAUSE_PART || ' AND alrtnotf.orgid IN (select orgid from tbl_compound where ORGID=  '||V_ORGID|| ' )' ;
  END IF;

  V_TEMP_ORDRBY := ' ORDER BY ' || V_TEMP_SORTBY || ' ' || IP_ORDRBY;


  V_QUERY_FINAL := V_SELECT_PART  || V_DYNMC_SQL_CLAUSE_PART ;

   
    V_COUNT_QUERY := 'select count(1) from (' || V_QUERY_FINAL || ')';

    dbms_output.put_line(V_COUNT_QUERY);
    --insert into temp_table values (V_COUNT_QUERY);
    --commit;
    EXECUTE IMMEDIATE V_COUNT_QUERY INTO OP_COUNT;
    V_PAG_END_ROW           := IP_OFFSET + IP_LIMIT;

    V_FINAL_QUERY          := 'SELECT * FROM (SELECT ROWNUM RNUM , TEMP.* FROM (' || V_QUERY_FINAL  || ' ) TEMP  WHERE ROWNUM < ' || TO_CHAR(V_PAG_END_ROW) || ' ) WHERE RNUM >='|| TO_CHAR(IP_OFFSET)|| ' ' || V_TEMP_ORDRBY;
    dbms_output.put_line(V_FINAL_QUERY);
    --insert into temp_table values (V_FINAL_QUERY);
    --commit;

   OPEN OP_REPORT_DATA FOR V_FINAL_QUERY ;

  END sp_email_safetynotfail;
    

  PROCEDURE SP_STUDYFAC_REPORT(
      I_LOGGEDINUSERID    IN NUMBER,
      I_COMPOUNDIDS      IN NUM_ARRAY,
      I_STUDYIDS          IN NUM_ARRAY,
      I_SITEIDS           IN NUM_ARRAY,
      I_THERAPEUTICAREAIDS IN NUM_ARRAY,
      I_STUDYSITESTATUS   IN VARCHAR2,
      I_OFFSET            IN NUMBER,
      I_LIMIT             IN NUMBER,
      I_ORDRBY            IN VARCHAR2,
      I_SORTBY            IN VARCHAR2,
      I_COUNT OUT NUMBER,
      STUDYFAC OUT SYS_REFCURSOR)
    AS
    SQL_PAGINATION_PART    VARCHAR2(9999 BYTE);
    SQL_SELECT_PART        VARCHAR2(9999 BYTE);
    SQL_DYNMC_WHERE_PART   VARCHAR2(9999 BYTE);
    SQL_DYNMC_SORTING_PART VARCHAR2(9999 BYTE);
    PAG_END_ROW            NUMBER;
    SQL_MAIN_QUERY         VARCHAR2(9999 BYTE);
    V_COUNT_QUERY          VARCHAR2(9999 BYTE);
    COMP_IDS_STR       VARCHAR2(9999 BYTE);
    STUDY_IDS_STR          VARCHAR2(9999 BYTE);
    SITE_IDS_STR           VARCHAR2(9999 BYTE);
    THERA_IDS_STR           VARCHAR2(9999 BYTE);
    V_STUDYSITESTATUS      VARCHAR2(9999 BYTE);
    V_ORGID                NUMBER;
    TEMP_SORTBY            VARCHAR2(9999 BYTE);
    TEMP_ORDRBY            VARCHAR2(9999 BYTE);
    V_ROLE_COUNT            NUMBER;
    V_MONITOR_ROLE_COUNT    NUMBER;

  BEGIN
    TEMP_ORDRBY := '';
    V_ROLE_COUNT := 0;

    IF (I_LOGGEDINUSERID       IS NOT NULL AND I_LOGGEDINUSERID > 0) THEN
      SELECT ORGID
      INTO V_ORGID
      FROM TBL_USERPROFILES
      WHERE USERID = I_LOGGEDINUSERID;
    END IF;


  IF I_SORTBY = 'STUDYNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(STUDYNAME))';
    ELSIF I_SORTBY = 'COMPOUNDNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(COMPOUNDNAME))';
    ELSIF I_SORTBY    = 'SITENAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(SITENAME))';
    ELSIF I_SORTBY = 'STUDYSITESTATUS' THEN
      TEMP_SORTBY := 'UPPER(TRIM(STUDYSITESTATUS))';
    ELSIF I_SORTBY = 'PNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(PNAME))';
    ELSIF I_SORTBY = 'PFACNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(PFACNAME))';
    ELSIF I_SORTBY = 'DEPARTMENTNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(DEPARTMENTNAME))';
    ELSIF I_SORTBY = 'STARTDATE' THEN
      TEMP_SORTBY := 'STARTDATE';
    ELSIF I_SORTBY = 'ENDDATE' THEN
      TEMP_SORTBY := 'ENDDATE';
    ELSIF I_SORTBY = 'COUNTRY' THEN
      TEMP_SORTBY := 'UPPER(TRIM(COUNTRY))';
    ELSIF I_SORTBY = 'STATE' THEN
      TEMP_SORTBY := 'UPPER(TRIM(STATE))';
    ELSIF I_SORTBY = 'SITECLOSUREDATE' THEN
      TEMP_SORTBY := 'SITECLOSUREDATE';
    ELSIF I_SORTBY = 'PIEMAIL' THEN
      TEMP_SORTBY := 'UPPER(TRIM(PIEMAIL))';
    ELSIF I_SORTBY = 'SIPUSERID' THEN
      TEMP_SORTBY := 'UPPER(TRIM(SIPUSERID))';
    ELSIF I_SORTBY = 'THERANAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(THERANAME))';
    ELSE
     TEMP_SORTBY := 'SD.STUDYNAME,COUNTRY,ST.SITENAME,STUDYSITESTATUS,STFACMODHIST.FACILITYCHANGEDT DESC,STFACMODHIST.MODIFIEDDT DESC';
    END IF;

    SQL_SELECT_PART := 'select DISTINCT SD.STUDYID STUDYID,
SD.STUDYNAME STUDYNAME,
SD.ORGID ORGID,
COMP.COMPOUNDNAME,
  SD.COMPOUNDID PCOMPOUNDID,
  ST.SITEID STUDYSITEID,
  ST.SITENAME SITENAME,
  CASE WHEN ST.ISACTIVE = ''Y''
  THEN ''Active''
  ELSE ''Closed''
  END STUDYSITESTATUS,
  ST.PIID,
  PKG_ENCRYPT.FN_DECRYPT (UP.LASTNAME)||'', '' || PKG_ENCRYPT.FN_DECRYPT (UP.FIRSTNAME) || PKG_ENCRYPT.FN_DECRYPT (UP.MIDDLENAME) PNAME,
  CASE
      WHEN FAC.ISDEPARTMENT = ''N''
      THEN FAC.FACILITYID
      ELSE
      FAC.FACILITYFORDEPT
      END FACID,
  FAC.FACILITYNAME PFACNAME,
  CASE
        WHEN FAC.ISDEPARTMENT = ''N''
        THEN RTRIM(PKG_ENCRYPT.FN_DECRYPT (FACCON.ADDRESS1)||'',''||PKG_ENCRYPT.FN_DECRYPT (FACCON.ADDRESS2)||'',''||PKG_ENCRYPT.FN_DECRYPT (FACCON.ADDRESS3),'','')
        ELSE
        RTRIM(PKG_ENCRYPT.FN_DECRYPT (PRIFACCON.ADDRESS1)||'',''||PKG_ENCRYPT.FN_DECRYPT (PRIFACCON.ADDRESS2)||'',''||PKG_ENCRYPT.FN_DECRYPT (PRIFACCON.ADDRESS3),'','')
      END PFACADDRESS,
  CASE WHEN FAC.ISDEPARTMENT = ''Y''
  THEN FAC.FACILITYID
  ELSE NULL
  END DEPARTMENTID,
  FAC.DEPARTMENTNAME DEPARTMENTNAME,
  CASE WHEN FAC.ISDEPARTMENT = ''Y''
  THEN PKG_ENCRYPT.FN_DECRYPT (FACCON.ADDRESS1) ||'',''||PKG_ENCRYPT.FN_DECRYPT (FACCON.ADDRESS2)||'',''||PKG_ENCRYPT.FN_DECRYPT (FACCON.ADDRESS3)
  ELSE NULL
  END PDEPTADDRESS,
  STFACMODHIST.FACILITYCHANGEDT STARTDATE,
  STFACMODHIST.MODIFIEDDT ENDDATE,
  CONT.COUNTRYNAME COUNTRY ,
  ST.STATENAME STATE,
  ST.CLOSUREDT SITECLOSUREDATE,
  PKG_ENCRYPT.FN_DECRYPT(PICON.EMAIL) PIEMAIL,
  PKG_ENCRYPT.FN_DECRYPT (PICON.PHONE1) PHONE,
  UP.TRANSCELERATEUSERID SIPUSERID,
  THERA.ORGTHERAPEUTICAREAID THERAID,
  THERA.THERAPETICAREANAME THERANAME
  FROM TBL_STUDY SD
  LEFT JOIN TBL_STUDYCOMPOUND SDCOMP
  ON SD.STUDYID = SDCOMP.STUDYID
  LEFT JOIN TBL_COMPOUND COMP
  ON SDCOMP.COMPOUNDID = COMP.COMPOUNDID
  LEFT JOIN TBL_SITE ST
  ON ST.STUDYID = SD.STUDYID
  LEFT JOIN TBL_USERPROFILES UP
  ON ST.PIID = UP.USERID
  JOIN TBL_SITEFACMODIFICATIONHISTORY STFACMODHIST
  ON STFACMODHIST.SITEID = ST.SITEID
  JOIN TBL_FACILITIES FAC
  ON STFACMODHIST.FACILITYID = FAC.FACILITYID
  LEFT JOIN TBL_FACILITIES PRIFAC
  ON FAC.FACILITYFORDEPT = PRIFAC.FACILITYID
  LEFT JOIN TBL_CONTACT FACCON
  ON FAC.CONTACTID = FACCON.CONTACTID
  JOIN TBL_COUNTRIES CONT
  ON FACCON.COUNTRYCD = CONT.COUNTRYCD
  JOIN TBL_STATES ST
  ON FACCON.STATE = ST.STATECD
  LEFT JOIN TBL_CONTACT PRIFACCON
  ON PRIFACCON.CONTACTID = PRIFAC.CONTACTID
  LEFT JOIN TBL_CONTACT PICON
  ON UP.CONTACTID = PICON.CONTACTID
  LEFT JOIN TBL_STUDYTHERAPEUTICAREA STDAREA
  ON STDAREA.STUDYID = SD.STUDYID
  LEFT JOIN TBL_ORGTHERAPEUTICAREA THERA
  ON THERA.ORGTHERAPEUTICAREAID = STDAREA.THERAPEUTICAREAID    ' ;

  SQL_SELECT_PART := SQL_SELECT_PART || ' WHERE SD.ORGID = ' || V_ORGID ;
  --DBMS_OUTPUT.PUT_LINE (SQL_SELECT_PART) ;

  SQL_SELECT_PART := SQL_SELECT_PART || ' AND SDCOMP.ISPRIMARY = ''Y'' '
  || 'AND ST.SITEID IS NOT NULL ' ;
    --DBMS_OUTPUT.PUT_LINE (SQL_SELECT_PART) ;
    
  IF I_COMPOUNDIDS IS NOT NULL AND I_COMPOUNDIDS.count >0 THEN
    FOR i IN 1..I_COMPOUNDIDS.count
    LOOP
      EXIT
    WHEN I_COMPOUNDIDS(i) = -1;
      IF i             = 1 THEN
      COMP_IDS_STR := I_COMPOUNDIDS(i);
      ELSE
      COMP_IDS_STR := COMP_IDS_STR || ',' || I_COMPOUNDIDS(i);
      END IF;
    END LOOP;
    END IF;

    
  
  IF I_STUDYIDS IS NOT NULL AND I_STUDYIDS.count >0 THEN
    FOR i IN 1..I_STUDYIDS.count
    LOOP
      EXIT
    WHEN I_STUDYIDS(i) = -1;
      IF i             = 1 THEN
      STUDY_IDS_STR := I_STUDYIDS(i);
      ELSE
      STUDY_IDS_STR := STUDY_IDS_STR || ',' || I_STUDYIDS(i);
      END IF;
    END LOOP;
    END IF;

    IF I_SITEIDS         IS NOT NULL AND I_SITEIDS.count >0 THEN
    FOR i IN 1..I_SITEIDS.count
    LOOP
      EXIT
    WHEN I_SITEIDS(i) = -1;
      IF i             = 1 THEN
      SITE_IDS_STR := I_SITEIDS(i);
      ELSE
      SITE_IDS_STR := SITE_IDS_STR || ',' || I_SITEIDS(i);
      END IF;
    END LOOP;
    END IF;
    
        IF I_THERAPEUTICAREAIDS         IS NOT NULL AND I_THERAPEUTICAREAIDS.count >0 THEN
    FOR i IN 1..I_THERAPEUTICAREAIDS.count
    LOOP
      EXIT
    WHEN I_THERAPEUTICAREAIDS(i) = -1;
      IF i             = 1 THEN
      THERA_IDS_STR := I_THERAPEUTICAREAIDS(i);
      ELSE
      THERA_IDS_STR := THERA_IDS_STR || ',' || I_THERAPEUTICAREAIDS(i);
      END IF;
    END LOOP;
    END IF;
    
    IF (I_LOGGEDINUSERID       IS NOT NULL AND I_LOGGEDINUSERID > 0) THEN
      SELECT COUNT(*) INTO V_ROLE_COUNT
      FROM TBL_USERROLEMAP usrrole
      LEFT JOIN TBL_ROLES tblroles
      ON usrrole.ROLEID        = tblroles.ROLEID
      WHERE tblroles.ROLETYPEID in (2,3)
      AND usrrole.EFFECTIVESTARTDATE    <= SYSDATE
      AND (usrrole.EFFECTIVEENDDATE >= SYSDATE
      OR usrrole.EFFECTIVEENDDATE   IS NULL) AND usrrole.USERID=I_LOGGEDINUSERID;
    
          IF(V_ROLE_COUNT <= 0) then
       SELECT COUNT(*) INTO V_MONITOR_ROLE_COUNT
      FROM TBL_USERROLEMAP usrrole
      LEFT JOIN TBL_ROLES tblroles
      ON usrrole.ROLEID        = tblroles.ROLEID
      WHERE tblroles.ROLETYPEID =1 and tblroles.ROLEID=2 
      AND usrrole.EFFECTIVESTARTDATE    <= SYSDATE
      AND (usrrole.EFFECTIVEENDDATE >= SYSDATE
      OR usrrole.EFFECTIVEENDDATE   IS NULL) AND usrrole.USERID=I_LOGGEDINUSERID;
      END IF;

    
    END IF;
 
    SQL_DYNMC_WHERE_PART := '';
    
    IF COMP_IDS_STR     IS NOT NULL THEN
    SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||
    ' AND SD.COMPOUNDID IN(' || COMP_IDS_STR || ')';
    END IF;
  
  IF (V_ROLE_COUNT >0) THEN  
    IF STUDY_IDS_STR     IS NOT NULL THEN
    SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||
    ' AND SD.STUDYID IN(' || STUDY_IDS_STR || ')';
    ELSE 
    SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||
    ' AND SD.STUDYID IN( select STUDYID from TBL_STUDY where ORGID = ' || V_ORGID ||')';
    END IF;
  ELSE 
    IF STUDY_IDS_STR     IS NOT NULL THEN
    SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||
    ' AND SD.STUDYID IN(' || STUDY_IDS_STR || ')';
    ELSE 
    SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||' AND SD.STUDYID in (SELECT STUDYID FROM TBL_USERROLEMAP WHERE USERID = '|| TO_CHAR(I_LOGGEDINUSERID) || ')';
    END IF;
  END IF;  
    
    IF V_MONITOR_ROLE_COUNT > 0 THEN
      IF SITE_IDS_STR     IS NOT NULL THEN
    SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||
    ' AND ST.SITEID IN(' || SITE_IDS_STR || ') AND ST.SITEID in (SELECT SITEID FROM TBL_USERROLEMAP WHERE USERID = '|| TO_CHAR(I_LOGGEDINUSERID) || ') ';
      ELSE 
        SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||' AND ST.SITEID in (SELECT SITEID FROM TBL_USERROLEMAP WHERE USERID = '|| TO_CHAR(I_LOGGEDINUSERID) || ')';
      END IF;
    ELSE
      IF SITE_IDS_STR     IS NOT NULL THEN
    SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||
    ' AND ST.SITEID IN(' || SITE_IDS_STR || ') ' ;
      END IF;
    END IF;
    
    IF THERA_IDS_STR     IS NOT NULL THEN
    SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||
    ' AND THERA.ORGTHERAPEUTICAREAID IN(' || THERA_IDS_STR || ')';
    END IF;
        
    IF I_STUDYSITESTATUS IS NOT NULL THEN  
    IF I_STUDYSITESTATUS = 'Y' THEN
    SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||
    'AND ST.ISACTIVE = ''Y''  ';
    ELSE 
    SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||
    'AND ST.ISACTIVE = ''N''  ';
    END IF;
    END IF;
    IF I_ORDRBY             IS NOT NULL THEN
      TEMP_ORDRBY := ' ' || I_ORDRBY;
    END IF;
    
    --TEMP_SORTBY:= 'SD.STUDYID' ;
      SQL_DYNMC_SORTING_PART := SQL_DYNMC_SORTING_PART || ' ORDER BY ' || TEMP_SORTBY || TEMP_ORDRBY ;

    SQL_MAIN_QUERY := SQL_SELECT_PART || SQL_DYNMC_WHERE_PART;
     V_COUNT_QUERY  := 'select count(1) from ((' || SQL_MAIN_QUERY || '))';
    --dbms_output.put_line(V_COUNT_QUERY);
    EXECUTE IMMEDIATE V_COUNT_QUERY INTO I_COUNT;
    PAG_END_ROW         := I_OFFSET + I_LIMIT - 1;
     -- SQL_PAGINATION_PART := 'SELECT * FROM (SELECT ROWNUM RNUM , TEMP.* FROM ((' || SQL_MAIN_QUERY ;
     -- SQL_PAGINATION_PART := SQL_PAGINATION_PART || ')' || SQL_DYNMC_SORTING_PART ||' ) TEMP  WHERE ROWNUM <= ' || TO_CHAR
    --(PAG_END_ROW) ||' ) WHERE RNUM >='|| TO_CHAR(I_OFFSET) ;

    SQL_PAGINATION_PART := 'SELECT * FROM (SELECT ROWNUM RNUM , TEMP.* FROM ((' || SQL_MAIN_QUERY ;
    SQL_PAGINATION_PART := SQL_PAGINATION_PART || ')' || SQL_DYNMC_SORTING_PART ||' ) TEMP  WHERE ROWNUM <= ' || TO_CHAR(PAG_END_ROW) ||' ) WHERE RNUM >='|| TO_CHAR(I_OFFSET) ;

    -- dbms_output.put_line(SQL_PAGINATION_PART);
    --insert into temp_table values (SQL_MAIN_QUERY);
    --commit;
    OPEN STUDYFAC FOR SQL_PAGINATION_PART;
    
    END SP_STUDYFAC_REPORT;
    
PROCEDURE SP_Survey_Template_Details(
      IP_LOGGEDIN_USER   IN NUMBER,
      IP_TYPE            IN NUMBER,
      IP_RECIPIENT       IN NUMBER,
      IP_SURVEYID        IN NUM_ARRAY,
      IP_SURVEYTITLE     IN NUM_ARRAY,
      IP_TEMPLATEID      IN NUM_ARRAY,
      IP_TEMPLATETITLE   IN NUM_ARRAY,
      IP_SURVEYTYPE      IN NUM_ARRAY,
      IP_SURVEYSTATUS    IN NUM_ARRAY,
      IP_THERAPEUTICAREA IN NUM_ARRAY,
      IP_COMPOUND        IN NUM_ARRAY,
      IP_PROGRAM         IN NUM_ARRAY,
      IP_STUDYID         IN NUM_ARRAY,
      IP_INDICATION      IN NUM_ARRAY,
      IP_STUDYPHASE      IN NUM_ARRAY,
      IP_SURVEYCREATOR   IN NUM_ARRAY,
      IP_SURVEYFROMDATE  IN DATE,
      IP_SURVEYTODATE    IN DATE,
      IP_COUNTRYID       IN NUM_ARRAY,
      IP_LANGUAGEID      IN NUM_ARRAY,
      IP_OFFSET          IN NUMBER,
      IP_LIMIT           IN NUMBER,
      IP_ORDRBY          IN VARCHAR2,
      IP_SORTBY          IN VARCHAR2,
      OP_COUNT OUT NUMBER,
      OP_REPORT_DATA OUT SYS_REFCURSOR)
    -- /*********************************************************************
    --/**
    --/** Procedure:   SP_Survey_Template_Details
    --/** Description: POPULATES 'Survey Template Details Report' that provide the details of the Surveys and Templates.
    --/** Author:      Cognizant
    --/** Out:
    --/** In:
    --/*********************************************************************/
  AS
    V_SELECT_PART             VARCHAR2(32000);
    V_SELECT_PART1            VARCHAR2(32000);
    V_SELECT_PART2            VARCHAR2(32000);
    V_FINAL_QUERY             VARCHAR2(32000);
    V_QUERY_FINAL             VARCHAR2(32000);
    V_DYNMC_SQL_CLAUSE_PART_1 VARCHAR2(32000);
    V_DYNMC_SQL_CLAUSE_PART_2 VARCHAR2(32000);
    --V_DYNMC_SQL_CLAUSE        VARCHAR2(32000);
    V_PAG_END_ROW             NUMBER;
    V_COUNT_QUERY             VARCHAR2(32000);
    --V_ORGID                   NUMBER(38);
    V_TEMP_SORTBY             VARCHAR2(32000);
    V_TEMP_ORDRBY             VARCHAR2(32000);
    V_ROLEID                  NUMBER ;
    V_ROLENAME                VARCHAR2(1000);
   -- V_WHERE_CLAUSE          VARCHAR2(32000);
    V_STUDY_IDS_STR           VARCHAR2(32000);
    V_SURVEY_IDS_STR          VARCHAR2(32000);
    V_TEMPLATE_IDS_STR        VARCHAR2(32000);
    V_LANGUAGE_IDS_STR        VARCHAR2(32000);
    V_THERAPEUTICAREA_STR     VARCHAR2(32000);
    V_COMPOUND_STR            VARCHAR2(32000);
    V_COUNTRYID               VARCHAR2(32000);
    V_PROGRAM_STR             VARCHAR2(32000);
    V_INDICATION_STR          VARCHAR2(32000);
    V_ORGID                   NUMBER;
    V_ROLE_COUNT              NUMBER;
    V_SPONSORORGANIZAIONID    NUMBER;
    V_SURVEYTITLE_STR         VARCHAR2(32000);
    V_TEMPLATETITLE_STR       VARCHAR2(32000);
    V_SURVEYTYPE_STR          VARCHAR2(32000);
    V_SURVEYSTATUS_STR        VARCHAR2(32000);
    V_SURVEYCREATOR_STR       VARCHAR2(32000);
    V_STUDYPHASE_STR          VARCHAR2(32000);


  BEGIN
    V_ROLE_COUNT := 0;
    V_TEMP_ORDRBY := '';
    --P_OFFSET :=I_OFFSET+1;
    IF IP_SORTBY     = 'SPONSOR_THERAPEUTICAREA' THEN
      V_TEMP_SORTBY := 'UPPER(TRIM(Sponsor_TherapeuticArea))';
    ELSIF IP_SORTBY  = 'INDICATION' THEN
      V_TEMP_SORTBY := 'UPPER(TRIM(Indication))';
    ELSIF IP_SORTBY  = 'COMPOUND' THEN
      V_TEMP_SORTBY := 'UPPER(TRIM(Compound))';
    ELSIF IP_SORTBY  = 'PROGRAM' THEN
      V_TEMP_SORTBY := 'UPPER(TRIM(Program))';
    ELSIF IP_SORTBY  = 'TYPE' THEN
      V_TEMP_SORTBY := 'UPPER(TRIM(Type))';
    ELSIF IP_SORTBY  = 'SURVEY_TEMPLATE_ID' THEN
      V_TEMP_SORTBY := 'UPPER(TRIM(Survey_Template_ID))';
    ELSIF IP_SORTBY  = 'PARENTSURVEYID' THEN
      V_TEMP_SORTBY := 'UPPER(TRIM(PARENTSURVEYID))';
    ELSIF IP_SORTBY  = 'SURVEY_TEMPLATE_TITLE' THEN
      V_TEMP_SORTBY := 'UPPER(TRIM(Survey_Template_Title))';
    ELSIF IP_SORTBY  = 'DESCRIPTION' THEN
      V_TEMP_SORTBY := 'UPPER(TRIM(Description))';
    ELSIF IP_SORTBY  = 'COUNTRY' THEN
      V_TEMP_SORTBY := 'UPPER(TRIM(COUNTRY))';
    ELSIF IP_SORTBY  = 'RECIPIENT' THEN
      V_TEMP_SORTBY := 'UPPER(TRIM(Recipient))';
    ELSIF IP_SORTBY  = 'SURVEYTYPE' THEN
      V_TEMP_SORTBY := 'UPPER(TRIM(SURVEYTYPE))';
     ELSIF IP_SORTBY  = 'OTHER_SURVEY_TYPE' THEN
      V_TEMP_SORTBY := 'UPPER(TRIM(Other_Survey_Type))';
    ELSIF IP_SORTBY  = 'SURVEY_STATUS' THEN
      V_TEMP_SORTBY := 'UPPER(TRIM(Survey_Status))';
    ELSIF IP_SORTBY  = 'STUDYID' THEN
      V_TEMP_SORTBY := 'UPPER(TRIM(StudyID))';
    ELSIF IP_SORTBY  = 'PROTOCOL_SHORT_DESCRIPTION' THEN
      V_TEMP_SORTBY := 'UPPER(TRIM(Protocol_Short_Description))';
    ELSIF IP_SORTBY  = 'STUDYPHASE' THEN
      V_TEMP_SORTBY := 'UPPER(TRIM(StudyPhase))';
    ELSIF IP_SORTBY  = 'SURVEY_CREATOR' THEN
      V_TEMP_SORTBY := 'UPPER(TRIM(Survey_Creator))';
    ELSIF IP_SORTBY  = 'CREATED_DATE' THEN
      V_TEMP_SORTBY := 'Created_Date';
    ELSIF IP_SORTBY  = 'SURVEY_TEMPLATE_PK' THEN
      V_TEMP_SORTBY := 'Survey_Template_PK';
    ELSIF IP_SORTBY  = 'LANGUAGE' THEN
      V_TEMP_SORTBY := 'UPPER(TRIM(LANGUAGE))';
    ELSE
      V_TEMP_SORTBY := ' UPPER(TRIM(SURVEY_TEMPLATE_ID)) ';
      --INSERT INTO temp_table VALUES (V_TEMP_SORTBY);
    END IF;

    SELECT ORGID INTO V_ORGID FROM TBL_USERPROFILES WHERE USERID=IP_LOGGEDIN_USER;

    V_SELECT_PART1:=
   'SELECT distinct
    (select listagg(thera.therapeticareaname, '','') within Group (order by surveytheramap.therapeuticareaid ) from tbl_orgtherapeuticarea thera,TCSIP_CPORTAL.TBL_SURVEY_THERAPEUTICAREAMAP surveytheramap where thera.orgtherapeuticareaid=surveytheramap.therapeuticareaid AND surveytheramap.BELONGTO=survey.surveyid and surveytheramap.istemplate=0 ) Sponsor_TherapeuticAreaID,
    (select listagg(thera.therapeticareaname, '','') within Group (order by surveytheramap.therapeuticareaid ) from tbl_orgtherapeuticarea thera,TCSIP_CPORTAL.TBL_SURVEY_THERAPEUTICAREAMAP surveytheramap where thera.orgtherapeuticareaid=surveytheramap.therapeuticareaid AND surveytheramap.BELONGTO=survey.surveyid and surveytheramap.istemplate=0 ) Sponsor_TherapeuticArea,
    (select listagg(ind.indicationid, '','') within Group (order by surveyindmap.indicationid ) from TBL_INDICATION ind,TCSIP_CPORTAL.TBL_SURVEY_INDICATIONMAP surveyindmap where ind.indicationid=surveyindmap.indicationid AND surveyindmap.BELONGTO=survey.surveyid and surveyindmap.istemplate=0 ) Indication_ID,
    (select listagg(ind.indicationname, '','') within Group (order by surveyindmap.indicationid ) from TBL_INDICATION ind,TCSIP_CPORTAL.TBL_SURVEY_INDICATIONMAP surveyindmap where ind.indicationid=surveyindmap.indicationid AND surveyindmap.BELONGTO=survey.surveyid and surveyindmap.istemplate=0 ) Indication,
    (select listagg(comp.compoundid, '','') within Group (order by surveycompmap.compoundid ) from TBL_COMPOUND comp,TCSIP_CPORTAL.TBL_SURVEY_COMPOUNDMAP surveycompmap where comp.compoundid=surveycompmap.compoundid AND surveycompmap.BELONGTO=survey.surveyid and surveycompmap.istemplate=0 ) Compound_ID,
    (select listagg(comp.compoundname, '','') within Group (order by surveycompmap.compoundid ) from TBL_COMPOUND comp,TCSIP_CPORTAL.TBL_SURVEY_COMPOUNDMAP surveycompmap where comp.compoundid=surveycompmap.compoundid AND surveycompmap.BELONGTO=survey.surveyid and surveycompmap.istemplate=0 ) Compound,
    (select listagg(prog.PROGID, '','') within Group (order by surveyprogmap.PROGRAMID ) from TBL_PROGRAM prog,TCSIP_CPORTAL.TBL_SURVEY_PROGRAMMAP surveyprogmap where prog.progid=surveyprogmap.PROGRAMID AND surveyprogmap.BELONGTO=survey.surveyid and surveyprogmap.istemplate=0 ) ProgramID,
    (select listagg(prog.progname, '','') within Group (order by surveyprogmap.PROGRAMID ) from TBL_PROGRAM prog,TCSIP_CPORTAL.TBL_SURVEY_PROGRAMMAP surveyprogmap where prog.progid=surveyprogmap.PROGRAMID AND surveyprogmap.BELONGTO=survey.surveyid and surveyprogmap.istemplate=0 ) Program,
    ''SURVEY'' AS TYPE,
    survey.SURVEYCD  Survey_Template_ID,
    survey.surveyid  Survey_Template_PK,
    CASE
      WHEN survey.PARENTSURVEYID IS NOT NULL
      THEN (SELECT SURVEYCD FROM TBL_SURVEY WHERE SURVEYID IN (survey.PARENTSURVEYID))
    ELSE NULL end PARENTSURVEYID ,
    SURVEY.SURVEYTITLE Survey_Template_Title,
    CASE
      WHEN survey.surveydesc IS NOT NULL
      THEN survey.surveydesc
      ELSE NULL  end  Description,
     (select distinct listagg(cou.countryname, '','') within Group (order by surveycountrymap.countryid ) from TBL_COUNTRIES cou,TCSIP_CPORTAL.TBL_SURVEY_COUNTRYMAP surveycountrymap where cou.countryid=surveycountrymap.countryid AND surveycountrymap.BELONGTO=survey.surveyid and surveycountrymap.istemplate=''0'' ) COUNTRY,
    CASE
      WHEN survey.SURVEYTYPEID=21
      THEN ''Site User''
      WHEN survey.SURVEYTYPEID=22
      THEN ''Sponsor User'' end Recipient,
     (select metadata.metadatavalue from TBL_SURVEYMETADATA metadata where metadata.SURVEYMETADATAID=survey.SURVEYSUBTYPE)  SURVEYTYPE,
      survey.OTHERSURVEYTYPETEXT Other_Survey_Type,
     (select metadata.metadatavalue from TBL_SURVEYMETADATA metadata where metadata.SURVEYMETADATAID=survey.SURVEYSTATUS) as Survey_Status,
     (select std.studyname from tbl_study std where std.studyid=surveysipassoc.STUDYID )as StudyID,
     (select std.studyshortdesc from tbl_study std where std.studyid=surveysipassoc.STUDYID ) as Protocol_Short_Description,
     (select phase.phasename from tbl_phase phase,tbl_study std where std.studyid=surveysipassoc.STUDYID and std.studyphase=phase.phaseid) as StudyPhase,
     survey.createdby as Survey_Creator,
     up.actualtranscelerateuserid actualtranscelerateuserid,
     survey.createddt as Created_Date,
     CASE
      WHEN survey.languageid IS NOT NULL
      THEN (select languagename from TBL_LANGUAGEMASTER where languageid=survey.languageid)
      ELSE NULL end LANGUAGE

 FROM TBL_SURVEY  survey
 left join TBL_SURVEYSIPASSOCIATION surveysipassoc
 ON survey.surveyid = surveysipassoc.belongto and surveysipassoc.istemplate=0
 left join      TBL_STUDY   std  ON surveysipassoc.studyid = std.studyid
 left join TBL_SURVEY_THERAPEUTICAREAMAP surthermapp on survey.surveyid=surthermapp.BELONGTO and surthermapp.istemplate=0
 join tbl_userprofiles up
 on survey.createdby=up.transcelerateuserid

 where survey.surveyid is not null';

   V_SELECT_PART2 :=
   'SELECT distinct
     (select listagg(thera.therapeticareaname, '','') within Group (order by surveytheramap.therapeuticareaid ) from tbl_orgtherapeuticarea thera,TCSIP_CPORTAL.TBL_SURVEY_THERAPEUTICAREAMAP surveytheramap where thera.orgtherapeuticareaid=surveytheramap.therapeuticareaid AND surveytheramap.BELONGTO=template.surveytemplateid and surveytheramap.istemplate=1 ) Sponsor_TherapeuticAreaID,
    (select listagg(thera.therapeticareaname, '','') within Group (order by surveytheramap.therapeuticareaid ) from tbl_orgtherapeuticarea thera,TCSIP_CPORTAL.TBL_SURVEY_THERAPEUTICAREAMAP surveytheramap where thera.orgtherapeuticareaid=surveytheramap.therapeuticareaid AND surveytheramap.BELONGTO=template.surveytemplateid and surveytheramap.istemplate=1 ) Sponsor_TherapeuticArea,
     (select listagg(ind.indicationid, '','') within Group (order by surveyindmap.indicationid ) from TBL_INDICATION ind,TCSIP_CPORTAL.TBL_SURVEY_INDICATIONMAP surveyindmap where ind.indicationid=surveyindmap.indicationid AND surveyindmap.BELONGTO=template.surveytemplateid and surveyindmap.istemplate=1 ) Indication_ID,
    (select listagg(ind.indicationname, '','') within Group (order by surveyindmap.indicationid ) from TBL_INDICATION ind,TCSIP_CPORTAL.TBL_SURVEY_INDICATIONMAP surveyindmap where ind.indicationid=surveyindmap.indicationid AND surveyindmap.BELONGTO=template.surveytemplateid and surveyindmap.istemplate=1 ) Indication,
    (select listagg(comp.compoundid, '','') within Group (order by surveycompmap.compoundid ) from TBL_COMPOUND comp,TCSIP_CPORTAL.TBL_SURVEY_COMPOUNDMAP surveycompmap where comp.compoundid=surveycompmap.compoundid AND surveycompmap.BELONGTO=template.surveytemplateid and surveycompmap.istemplate=1 ) Compound_ID,
    (select listagg(comp.compoundname, '','') within Group (order by surveycompmap.compoundid ) from TBL_COMPOUND comp,TCSIP_CPORTAL.TBL_SURVEY_COMPOUNDMAP surveycompmap where comp.compoundid=surveycompmap.compoundid AND surveycompmap.BELONGTO=template.surveytemplateid and surveycompmap.istemplate=1 ) Compound,
    (select listagg(prog.PROGID, '','') within Group (order by surveyprogmap.PROGRAMID ) from TBL_PROGRAM prog,TCSIP_CPORTAL.TBL_SURVEY_PROGRAMMAP surveyprogmap where prog.progid=surveyprogmap.PROGRAMID AND surveyprogmap.BELONGTO=template.surveytemplateid and surveyprogmap.istemplate=1 ) Program_ID,
    (select listagg(prog.progname, '','') within Group (order by surveyprogmap.PROGRAMID ) from TBL_PROGRAM prog,TCSIP_CPORTAL.TBL_SURVEY_PROGRAMMAP surveyprogmap where prog.progid=surveyprogmap.PROGRAMID AND surveyprogmap.BELONGTO=template.surveytemplateid and surveyprogmap.istemplate=1 ) Program,
    ''TEMPLATE'' AS TYPE,
    template.TEMPLATECD Survey_Template_ID,
    template.surveytemplateid  Survey_Template_PK,
    NULL as  PARENTSURVEYID ,
    template.TEMPLATETITLE Survey_Template_Title,
    CASE
      WHEN template.TEMPLATEDESC IS NOT NULL
      THEN template.TEMPLATEDESC
      ELSE NULL  end  Description,
    (select distinct listagg(cou.countryname, '','') within Group (order by surveycountrymap.countryid ) from TBL_COUNTRIES cou,TCSIP_CPORTAL.TBL_SURVEY_COUNTRYMAP surveycountrymap where cou.countryid=surveycountrymap.countryid AND surveycountrymap.BELONGTO=template.surveytemplateid and surveycountrymap.istemplate=1 ) COUNTRY,
    CASE
      WHEN template.RECIPIENTTYPE=21
      THEN ''Site User''
      WHEN template.RECIPIENTTYPE=22
      THEN ''Sponsor User'' end Recipient,
     (select metadata.metadatavalue from TBL_SURVEYMETADATA metadata where metadata.SURVEYMETADATAID=template.SURVEYTYPE)  SURVEYTYPE,
      template.OTHERSURVEYTYPETEXT Other_Survey_Type,
     (select metadata.metadatavalue from TBL_SURVEYMETADATA metadata where metadata.SURVEYMETADATAID=template.TEMPLATESTATUS) as Survey_Status,
     (select std.studyname from tbl_study std where std.studyid=surveysipassoc.STUDYID )as StudyID,
     (select std.studyshortdesc from tbl_study std where std.studyid=surveysipassoc.STUDYID ) as Protocol_Short_Description,
     (select phase.phasename from tbl_phase phase,tbl_study std where std.studyid=surveysipassoc.STUDYID and std.studyphase=phase.phaseid) as StudyPhase,
     template.createdby as Survey_Creator,
     up.actualtranscelerateuserid actualtranscelerateuserid,
     template.createddt as Created_Date,
     CASE
      WHEN template.languageid IS NOT NULL
      THEN (select languagename from TBL_LANGUAGEMASTER where languageid=template.languageid)
      ELSE NULL end LANGUAGE
 FROM TBL_SURVEYTEMPLATE  template
 left join TBL_SURVEYSIPASSOCIATION surveysipassoc
 ON template.surveytemplateid = surveysipassoc.belongto and surveysipassoc.istemplate=1
 left join      TBL_STUDY   std  ON surveysipassoc.studyid = std.studyid
 left join TBL_SURVEY_THERAPEUTICAREAMAP surthermapp on template.surveytemplateid=surthermapp.BELONGTO and surthermapp.istemplate=1
 join tbl_userprofiles up on template.createdby=up.transcelerateuserid
 where template.surveytemplateid is not null ';

    IF  (IP_TYPE IS NOT NULL and IP_TYPE=0) THEN
    V_SELECT_PART :=V_SELECT_PART1||V_DYNMC_SQL_CLAUSE_PART_1;
    ELSIF (IP_TYPE IS NOT NULL and IP_TYPE=1) THEN
    V_SELECT_PART :=V_SELECT_PART2||V_DYNMC_SQL_CLAUSE_PART_2;
    ELSIF  IP_TYPE IS NULL THEN
    V_SELECT_PART :='(' || V_SELECT_PART1 ||V_DYNMC_SQL_CLAUSE_PART_1|| ') UNION ALL (' || V_SELECT_PART2 ||V_DYNMC_SQL_CLAUSE_PART_2|| ')';
    END IF;
    --dbms_output.put_line(V_SELECT_PART);

    IF (IP_LOGGEDIN_USER       IS NOT NULL AND IP_LOGGEDIN_USER > 0) THEN
      SELECT COUNT(*) INTO V_ROLE_COUNT
      FROM TBL_USERROLEMAP usrrole
      LEFT JOIN TBL_ROLES tblroles
      ON usrrole.ROLEID        = tblroles.ROLEID
      WHERE tblroles.ROLETYPEID in (2,3)
      AND usrrole.EFFECTIVESTARTDATE    <= SYSDATE
      AND (usrrole.EFFECTIVEENDDATE >= SYSDATE
      OR usrrole.EFFECTIVEENDDATE   IS NULL) AND usrrole.USERID=IP_LOGGEDIN_USER;

    select up.orgid into V_SPONSORORGANIZAIONID from Tbl_userprofiles up where up.userid = IP_LOGGEDIN_USER and up.issponsor = 'Y';

      IF (V_ROLE_COUNT >0) THEN
          V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1 || ' AND (surveysipassoc.STUDYID=0 OR surveysipassoc.STUDYID in (select STUDYID from TBL_STUDY where PROGID

      in (
          select PROGID from TBL_PROGRAM where ORGID = (select ORGID from TBL_USERPROFILES where USERID = '|| TO_CHAR(IP_LOGGEDIN_USER) || ')))) ';

       ELSE
           V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1 || ' AND (surveysipassoc.STUDYID=0 OR surveysipassoc.STUDYID in (SELECT STUDYID FROM TBL_USERROLEMAP WHERE USERID = '|| TO_CHAR(IP_LOGGEDIN_USER) || '))';
       END IF;

  END IF;

  IF V_ORGID IS NOT NULL THEN
      V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1 || ' AND  surveysipassoc.SPONSORORGANIZAIONID= '|| V_ORGID ||'';
      V_DYNMC_SQL_CLAUSE_PART_2 := V_DYNMC_SQL_CLAUSE_PART_2 || ' AND  surveysipassoc.SPONSORORGANIZAIONID= '|| V_ORGID ||'';
  END IF;

  IF IP_SURVEYTITLE  IS NOT NULL AND IP_SURVEYTITLE.count >0 THEN
    FOR i IN 1..IP_SURVEYTITLE.count
    LOOP
      EXIT
    WHEN IP_SURVEYTITLE(i) = -1;
      IF i             = 1 THEN
      V_SURVEYTITLE_STR := IP_SURVEYTITLE(i);
      ELSE
      V_SURVEYTITLE_STR := V_SURVEYTITLE_STR || ',' ||IP_SURVEYTITLE(i);
      END IF;

    END LOOP;

  END IF;


IF IP_TEMPLATETITLE  IS NOT NULL AND IP_TEMPLATETITLE.count >0 THEN
    FOR i IN 1..IP_TEMPLATETITLE.count
    LOOP
    EXIT
    WHEN IP_TEMPLATETITLE(i) = -1;
        IF i             = 1 THEN
      V_TEMPLATETITLE_STR := IP_TEMPLATETITLE(i);
      ELSE
      V_TEMPLATETITLE_STR := V_TEMPLATETITLE_STR || ',' ||IP_TEMPLATETITLE(i);
      END IF;

    END LOOP;

  END IF;


 IF IP_RECIPIENT=21 THEN

  V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1|| ' AND survey.SURVEYTYPEID=21';
  V_DYNMC_SQL_CLAUSE_PART_2 := V_DYNMC_SQL_CLAUSE_PART_2|| ' AND template.RECIPIENTTYPE=21';


  ELSIF IP_RECIPIENT=22 THEN

    V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1|| 'AND survey.SURVEYTYPEID=22';
    V_DYNMC_SQL_CLAUSE_PART_2 := V_DYNMC_SQL_CLAUSE_PART_2|| 'AND template.RECIPIENTTYPE=22';
END IF;


IF IP_SURVEYTYPE  IS NOT NULL AND IP_SURVEYTYPE.count >0 THEN
    FOR i IN 1..IP_SURVEYTYPE.count
    LOOP
      EXIT
    WHEN IP_SURVEYTYPE(i) = -1;
      IF i             = 1 THEN
      V_SURVEYTYPE_STR := IP_SURVEYTYPE(i);
      ELSE
      V_SURVEYTYPE_STR := V_SURVEYTYPE_STR || ',' || IP_SURVEYTYPE(i);
      END IF;

    END LOOP;

  END IF;

 IF V_SURVEYTYPE_STR IS NOT NULL THEN

      V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1|| ' AND  survey.surveysubtype in ('|| V_SURVEYTYPE_STR||')' ;
      V_DYNMC_SQL_CLAUSE_PART_2 := V_DYNMC_SQL_CLAUSE_PART_2|| ' AND  template.SURVEYTYPE in ('|| V_SURVEYTYPE_STR||')' ;

  END IF;



IF IP_SURVEYSTATUS  IS NOT NULL AND IP_SURVEYSTATUS.count >0 THEN
    FOR i IN 1..IP_SURVEYSTATUS.count
    LOOP
      EXIT
    WHEN IP_SURVEYSTATUS(i) = -1;
      IF i             = 1 THEN
      V_SURVEYSTATUS_STR := IP_SURVEYSTATUS(i);
      ELSE
      V_SURVEYSTATUS_STR := V_SURVEYSTATUS_STR || ',' || IP_SURVEYSTATUS(i);
      END IF;

    END LOOP;

  END IF;

 IF V_SURVEYSTATUS_STR IS NOT NULL THEN

      V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1|| ' AND survey.surveystatus in ('|| V_SURVEYSTATUS_STR||')' ;
      V_DYNMC_SQL_CLAUSE_PART_2 := V_DYNMC_SQL_CLAUSE_PART_2|| ' AND template.TEMPLATESTATUS in ('|| V_SURVEYSTATUS_STR||')' ;

 END IF;


  IF IP_SURVEYCREATOR  IS NOT NULL AND IP_SURVEYCREATOR.count >0 THEN
    FOR i IN 1..IP_SURVEYCREATOR.count
    LOOP
      EXIT
    WHEN IP_SURVEYCREATOR(i) = -1;
      IF i             = 1 THEN
      V_SURVEYCREATOR_STR := IP_SURVEYCREATOR(i);
      ELSE
      V_SURVEYCREATOR_STR := V_SURVEYCREATOR_STR || ',' || IP_SURVEYCREATOR(i);
      END IF;

    END LOOP;

  END IF;

 IF V_SURVEYCREATOR_STR IS NOT NULL THEN
       V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1|| ' AND survey.createdby in (select  up.transcelerateuserid from tbl_userprofiles up where up.userid in ('|| V_SURVEYCREATOR_STR||'))' ;
       V_DYNMC_SQL_CLAUSE_PART_2 := V_DYNMC_SQL_CLAUSE_PART_2|| ' AND template.createdby in (select  up.transcelerateuserid from tbl_userprofiles up where up.userid in ('|| V_SURVEYCREATOR_STR||'))' ;
     END IF;


  IF IP_STUDYID  IS NOT NULL AND IP_STUDYID.count >0 THEN
    FOR i IN 1..IP_STUDYID.count
    LOOP
      EXIT
    WHEN IP_STUDYID(i) = -1;
      IF i             = 1 THEN
        V_STUDY_IDS_STR := IP_STUDYID(i);
      ELSE
        V_STUDY_IDS_STR := V_STUDY_IDS_STR || ',' || IP_STUDYID(i);
      END IF;

    END LOOP;
END IF;

IF V_STUDY_IDS_STR IS NOT NULL THEN

      V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1 ||' And surveysipassoc.studyid in ('||V_STUDY_IDS_STR||')';
      V_DYNMC_SQL_CLAUSE_PART_2 := V_DYNMC_SQL_CLAUSE_PART_2 ||' And surveysipassoc.studyid in ('||V_STUDY_IDS_STR||')';
END IF;

IF IP_STUDYPHASE  IS NOT NULL AND IP_STUDYPHASE.count >0 THEN
    FOR i IN 1..IP_STUDYPHASE.count
    LOOP
      EXIT
    WHEN IP_STUDYPHASE(i) = -1;
      IF i             = 1 THEN
        V_STUDYPHASE_STR := IP_STUDYPHASE(i);
      ELSE
        V_STUDYPHASE_STR := V_STUDYPHASE_STR || ',' || IP_STUDYPHASE(i);
      END IF;

    END LOOP;
END IF;

IF V_STUDYPHASE_STR IS NOT NULL THEN
     --IF V_DYNMC_SQL_CLAUSE_PART_1 IS NOT NULL THEN
      V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1 ||' And std.STUDYPHASE in ('||V_STUDYPHASE_STR||')';
      V_DYNMC_SQL_CLAUSE_PART_2 := V_DYNMC_SQL_CLAUSE_PART_2 ||' And std.STUDYPHASE in ('||V_STUDYPHASE_STR||')';
    -- END IF;
END IF;
 IF IP_SURVEYID  IS NOT NULL AND IP_SURVEYID.count <=1000 THEN
    FOR i IN 1..IP_SURVEYID.count
    LOOP
      EXIT
    WHEN IP_SURVEYID(i) = -1;
      IF i             = 1 THEN
        V_SURVEY_IDS_STR := IP_SURVEYID(i);
      ELSE
        V_SURVEY_IDS_STR := V_SURVEY_IDS_STR || ',' || IP_SURVEYID(i);
      END IF;

    END LOOP;
  END IF;

IF V_SURVEY_IDS_STR IS NOT NULL AND V_SURVEYTITLE_STR IS NOT NULL THEN
   V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1 || ' AND survey.surveyid in ('||V_SURVEY_IDS_STR||','|| V_SURVEYTITLE_STR||')';
ELSIF V_SURVEY_IDS_STR IS NOT NULL AND V_SURVEYTITLE_STR IS NULL THEN
   V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1 || ' AND survey.surveyid in ('||V_SURVEY_IDS_STR||')';
ELSIF V_SURVEY_IDS_STR IS NULL AND V_SURVEYTITLE_STR IS NOT NULL THEN
   V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1 || ' AND survey.surveyid in ('||V_SURVEYTITLE_STR||')';
END IF;

 IF IP_SURVEYID  IS NOT NULL AND IP_SURVEYID.count >1000 THEN
    FOR i IN 1..IP_SURVEYID.count
    LOOP
      EXIT
    WHEN IP_SURVEYID(i) = -1;
      IF i             = 1 THEN
        V_SURVEY_IDS_STR := IP_SURVEYID(i);
      ELSE
        V_SURVEY_IDS_STR := V_SURVEY_IDS_STR || ',' || IP_SURVEYID(i);
      END IF;

    END LOOP;
  END IF;

IF V_SURVEY_IDS_STR IS NOT NULL AND V_SURVEYTITLE_STR IS NOT NULL THEN
   V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1 || ' AND survey.surveyid in (select sv.surveyid  from tbl_survey sv)';
ELSIF V_SURVEY_IDS_STR IS NOT NULL AND V_SURVEYTITLE_STR IS NULL THEN
   V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1 || ' AND survey.surveyid in (select sv.surveyid  from tbl_survey sv)';
ELSIF V_SURVEY_IDS_STR IS NULL AND V_SURVEYTITLE_STR IS NOT NULL THEN
   V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1 || ' AND survey.surveyid in (select sv.surveyid  from tbl_survey sv)';
END IF;




IF IP_TEMPLATEID  IS NOT NULL AND IP_TEMPLATEID.count >0 THEN
    FOR i IN 1..IP_TEMPLATEID.count
    LOOP
      EXIT
    WHEN IP_TEMPLATEID(i) = -1;
      IF i             = 1 THEN
        V_TEMPLATE_IDS_STR := IP_TEMPLATEID(i);
      ELSE
        V_TEMPLATE_IDS_STR := V_TEMPLATE_IDS_STR || ',' || IP_TEMPLATEID(i);
      END IF;

    END LOOP;
  END IF;

IF V_TEMPLATE_IDS_STR IS NOT NULL AND V_TEMPLATETITLE_STR IS NOT NULL THEN
   V_DYNMC_SQL_CLAUSE_PART_2 := V_DYNMC_SQL_CLAUSE_PART_2 || ' AND template.surveytemplateid in ('|| V_TEMPLATE_IDS_STR||','||V_TEMPLATETITLE_STR||')' ;
ELSIF V_TEMPLATE_IDS_STR IS NOT NULL AND V_TEMPLATETITLE_STR IS  NULL THEN
   V_DYNMC_SQL_CLAUSE_PART_2 := V_DYNMC_SQL_CLAUSE_PART_2 || ' AND template.surveytemplateid in ('|| V_TEMPLATE_IDS_STR||')';
ELSIF V_TEMPLATE_IDS_STR IS NULL AND V_TEMPLATETITLE_STR IS NOT NULL THEN
   V_DYNMC_SQL_CLAUSE_PART_2 := V_DYNMC_SQL_CLAUSE_PART_2 || ' AND template.surveytemplateid in ('|| V_TEMPLATETITLE_STR||')';
END IF;

IF IP_SURVEYFROMDATE  IS NOT NULL THEN

     V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1 || ' AND survey.createddt  >= TO_DATE('''|| IP_SURVEYFROMDATE ||

  ''', ''dd-mon-yy HH24:MI:SS'')';
     V_DYNMC_SQL_CLAUSE_PART_2 := V_DYNMC_SQL_CLAUSE_PART_2 || ' AND template.createddt  >= TO_DATE('''|| IP_SURVEYFROMDATE ||

  ''', ''dd-mon-yy HH24:MI:SS'')';
END IF;
IF IP_SURVEYTODATE  IS NOT NULL THEN

     V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1 || ' AND survey.createddt  <= TO_DATE('''|| IP_SURVEYTODATE ||

  ''', ''dd-mon-yy HH24:MI:SS'')';
     V_DYNMC_SQL_CLAUSE_PART_2 := V_DYNMC_SQL_CLAUSE_PART_2 || ' AND template.createddt  <= TO_DATE('''|| IP_SURVEYTODATE ||

  ''', ''dd-mon-yy HH24:MI:SS'')';
END IF;
IF IP_COUNTRYID  IS NOT NULL AND IP_COUNTRYID.count >0 THEN
    FOR i IN 1..IP_COUNTRYID.count
    LOOP
      EXIT
    WHEN IP_COUNTRYID(i) = -1;
      IF i             = 1 THEN
        V_COUNTRYID := IP_COUNTRYID(i);
      ELSE
        V_COUNTRYID := V_COUNTRYID || ',' || IP_COUNTRYID(i);
      END IF;

    END LOOP;
  END IF;

IF V_COUNTRYID IS NOT NULL THEN
     V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1|| ' and (select distinct listagg(cou.countryname, '','') within Group (order by surveycountrymap.countryid ) from TBL_COUNTRIES cou,TCSIP_CPORTAL.TBL_SURVEY_COUNTRYMAP surveycountrymap where cou.countryid=surveycountrymap.countryid AND surveycountrymap.BELONGTO=survey.surveyid and surveycountrymap.istemplate=0 ) in ( select contr.countryname from tbl_countries contr where contr.countryid in ( '|| V_COUNTRYID||'))' ;
     V_DYNMC_SQL_CLAUSE_PART_2 := V_DYNMC_SQL_CLAUSE_PART_2|| ' AND (select distinct listagg(cou.countryname, '','') within Group (order by surveycountrymap.countryid ) from TBL_COUNTRIES cou,TCSIP_CPORTAL.TBL_SURVEY_COUNTRYMAP surveycountrymap where cou.countryid=surveycountrymap.countryid AND surveycountrymap.BELONGTO=template.surveytemplateid and surveycountrymap.istemplate=1 ) in (  select contr.countryname from tbl_countries contr where contr.countryid in ( '|| V_COUNTRYID||'))' ;
END IF;

IF IP_LANGUAGEID  IS NOT NULL AND IP_LANGUAGEID.count >0 THEN
    FOR i IN 1..IP_LANGUAGEID.count
    LOOP
      EXIT
    WHEN IP_LANGUAGEID(i) = -1;
      IF i             = 1 THEN
        V_LANGUAGE_IDS_STR := IP_LANGUAGEID(i);
      ELSE
        V_LANGUAGE_IDS_STR := V_LANGUAGE_IDS_STR || ',' || IP_LANGUAGEID(i);
      END IF;

    END LOOP;
  END IF;

IF V_LANGUAGE_IDS_STR IS NOT NULL THEN
     V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1|| ' AND survey.languageid in ('|| V_LANGUAGE_IDS_STR||')' ;
     V_DYNMC_SQL_CLAUSE_PART_2 := V_DYNMC_SQL_CLAUSE_PART_2|| ' AND template.languageid in ('|| V_LANGUAGE_IDS_STR||')' ;
END IF;

IF IP_THERAPEUTICAREA  IS NOT NULL AND IP_THERAPEUTICAREA.count >0 THEN
    FOR i IN 1..IP_THERAPEUTICAREA.count
    LOOP
      EXIT
    WHEN IP_THERAPEUTICAREA(i) = -1;
      IF i             = 1 THEN
        V_THERAPEUTICAREA_STR := IP_THERAPEUTICAREA(i);
      ELSE
        V_THERAPEUTICAREA_STR := V_THERAPEUTICAREA_STR || ',' || IP_THERAPEUTICAREA(i);
      END IF;

    END LOOP;
  END IF;

IF V_THERAPEUTICAREA_STR IS NOT NULL THEN
      V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1|| ' AND (select listagg(thera.orgtherapeuticareaid, '','') within Group (order by surveytheramap.therapeuticareaid ) from tbl_orgtherapeuticarea thera,TCSIP_CPORTAL.TBL_SURVEY_THERAPEUTICAREAMAP surveytheramap where thera.orgtherapeuticareaid=surveytheramap.therapeuticareaid AND surveytheramap.BELONGTO=survey.surveyid and surveytheramap.istemplate=0 ) in ('''||V_THERAPEUTICAREA_STR||''')';
      V_DYNMC_SQL_CLAUSE_PART_2 := V_DYNMC_SQL_CLAUSE_PART_2|| ' AND (select listagg(thera.orgtherapeuticareaid, '','') within Group (order by surveytheramap.therapeuticareaid ) from tbl_orgtherapeuticarea thera,TCSIP_CPORTAL.TBL_SURVEY_THERAPEUTICAREAMAP surveytheramap where thera.orgtherapeuticareaid=surveytheramap.therapeuticareaid AND surveytheramap.BELONGTO=template.surveytemplateid and surveytheramap.istemplate=1 ) in ('''||V_THERAPEUTICAREA_STR||''')';
END IF;

IF IP_COMPOUND  IS NOT NULL AND IP_COMPOUND.count >0 THEN
    FOR i IN 1..IP_COMPOUND.count
    LOOP
      EXIT
    WHEN IP_COMPOUND(i) = -1;
      IF i             = 1 THEN
        V_COMPOUND_STR := IP_COMPOUND(i);
      ELSE
        V_COMPOUND_STR := V_COMPOUND_STR || ',' || IP_COMPOUND(i);
      END IF;

    END LOOP;
  END IF;

IF V_COMPOUND_STR IS NOT NULL THEN
     V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1|| ' AND  (select listagg(comp.compoundid, '','') within Group (order by surveycompmap.compoundid ) from TBL_COMPOUND comp,TCSIP_CPORTAL.TBL_SURVEY_COMPOUNDMAP surveycompmap where comp.compoundid=surveycompmap.compoundid AND surveycompmap.BELONGTO=survey.surveyid and surveycompmap.istemplate=0 )  in ('''||V_COMPOUND_STR||''')';

     V_DYNMC_SQL_CLAUSE_PART_2 := V_DYNMC_SQL_CLAUSE_PART_2|| ' AND (select listagg(comp.compoundid, '','') within Group (order by surveycompmap.compoundid ) from TBL_COMPOUND comp,TCSIP_CPORTAL.TBL_SURVEY_COMPOUNDMAP surveycompmap where comp.compoundid=surveycompmap.compoundid AND surveycompmap.BELONGTO=template.surveytemplateid and surveycompmap.istemplate=1 )  in ('''||V_COMPOUND_STR||''')';
END IF;

IF IP_PROGRAM  IS NOT NULL AND IP_PROGRAM.count >0 THEN
    FOR i IN 1..IP_PROGRAM.count
    LOOP
      EXIT
    WHEN IP_PROGRAM(i) = -1;
      IF i             = 1 THEN
        V_PROGRAM_STR := IP_PROGRAM(i);
      ELSE
        V_PROGRAM_STR := V_PROGRAM_STR || ',' || IP_PROGRAM(i);
      END IF;

    END LOOP;
END IF;

IF V_PROGRAM_STR IS NOT NULL THEN
      V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1|| ' (select listagg(prog.PROGID, '','') within Group (order by surveyprogmap.PROGRAMID ) from TBL_PROGRAM prog,TCSIP_CPORTAL.TBL_SURVEY_PROGRAMMAP surveyprogmap where prog.progid=surveyprogmap.PROGRAMID AND surveyprogmap.BELONGTO=survey.surveyid and surveyprogmap.istemplate=0 ) in ('''||V_PROGRAM_STR||''')';
      V_DYNMC_SQL_CLAUSE_PART_2 := V_DYNMC_SQL_CLAUSE_PART_2|| ' (select listagg(prog.PROGID, '','') within Group (order by surveyprogmap.PROGRAMID ) from TBL_PROGRAM prog,TCSIP_CPORTAL.TBL_SURVEY_PROGRAMMAP surveyprogmap where prog.progid=surveyprogmap.PROGRAMID AND surveyprogmap.BELONGTO=template.surveytemplateid and surveyprogmap.istemplate=1 ) in ('''||V_PROGRAM_STR||''')';
END IF;

IF IP_INDICATION  IS NOT NULL AND IP_INDICATION.count >0 THEN
    FOR i IN 1..IP_INDICATION.count
    LOOP
      EXIT
    WHEN IP_INDICATION(i) = -1;
      IF i             = 1 THEN
        V_INDICATION_STR := IP_INDICATION(i);
      ELSE
        V_INDICATION_STR := V_INDICATION_STR || ',' || IP_INDICATION(i);
      END IF;

    END LOOP;
  END IF;

IF V_INDICATION_STR IS NOT NULL THEN
      V_DYNMC_SQL_CLAUSE_PART_1 := V_DYNMC_SQL_CLAUSE_PART_1|| ' AND (select listagg(ind.indicationid, '','') within Group (order by surveyindmap.indicationid ) from TBL_INDICATION ind,TCSIP_CPORTAL.TBL_SURVEY_INDICATIONMAP surveyindmap where ind.indicationid=surveyindmap.indicationid AND surveyindmap.BELONGTO=survey.surveyid and surveyindmap.istemplate=0 ) in ('''||V_INDICATION_STR||''')';
      V_DYNMC_SQL_CLAUSE_PART_2 := V_DYNMC_SQL_CLAUSE_PART_2|| ' AND (select listagg(ind.indicationid, '','') within Group (order by surveyindmap.indicationid ) from TBL_INDICATION ind,TCSIP_CPORTAL.TBL_SURVEY_INDICATIONMAP surveyindmap where ind.indicationid=surveyindmap.indicationid AND surveyindmap.BELONGTO=template.surveytemplateid and surveyindmap.istemplate=1 ) in ('''||V_INDICATION_STR||''')';
END IF;

V_TEMP_ORDRBY := ' ORDER BY ' || V_TEMP_SORTBY || ' ' || IP_ORDRBY;

 IF (IP_TYPE IS NOT NULL and IP_TYPE=0) THEN
    V_QUERY_FINAL := V_SELECT_PART||V_DYNMC_SQL_CLAUSE_PART_1;
    ELSIF (IP_TYPE IS NOT NULL and IP_TYPE=1) THEN
    V_QUERY_FINAL := V_SELECT_PART||V_DYNMC_SQL_CLAUSE_PART_2;
    ELSIF IP_TYPE IS NULL THEN
    V_QUERY_FINAL :='(' || V_SELECT_PART1 ||V_DYNMC_SQL_CLAUSE_PART_1|| ') UNION ALL (' || V_SELECT_PART2 ||V_DYNMC_SQL_CLAUSE_PART_2|| ')';
 END IF;
 --dbms_output.put_line(V_QUERY_FINAL);
    V_COUNT_QUERY := 'select count(1) from (' || V_QUERY_FINAL || ')';
    -- INSERT INTO temp_table VALUES (V_COUNT_QUERY);
  --  commit;
   -- dbms_output.put_line(V_COUNT_QUERY);
    EXECUTE IMMEDIATE V_COUNT_QUERY INTO OP_COUNT;
    V_PAG_END_ROW := IP_OFFSET + IP_LIMIT;
    V_FINAL_QUERY := 'SELECT * FROM (SELECT ROWNUM RNUM , TEMP.* FROM (' || V_QUERY_FINAL || ' ) TEMP  '|| V_TEMP_ORDRBY ||' ) WHERE  ROWNUM < ' || TO_CHAR(V_PAG_END_ROW) || ' AND RNUM >='|| TO_CHAR(IP_OFFSET)|| '' ;
    dbms_output.put_line(V_FINAL_QUERY);
   --INSERT INTO temp_table VALUES (V_FINAL_QUERY);
   -- commit;
    OPEN OP_REPORT_DATA FOR V_FINAL_QUERY ;
  END SP_Survey_Template_Details;

PROCEDURE SP_SS_STAFF_SYSTEM_ACCESS (
  I_LOGGEDINUSERID    IN NUMBER,
  I_STUDYIDS          IN NUM_ARRAY,
  I_SITEIDS           IN NUM_ARRAY,
  I_COUNTRYIDS        IN NUM_ARRAY,
  I_ROLEIDS           IN NUM_ARRAY,
  I_LASTNAME          IN VARCHAR2,
  I_FIRSTNAME         IN VARCHAR2,
  I_OFFSET            IN NUMBER,
  I_LIMIT             IN NUMBER,
  I_ORDRBY            IN VARCHAR2,
  I_SORTBY            IN VARCHAR2,
  I_COUNT OUT NUMBER,
  STUDYSITESTAFF OUT SYS_REFCURSOR) 
  
  AS
  
  SQL_PAGINATION_PART    VARCHAR2(9999 BYTE);
  SQL_SELECT_PART        VARCHAR2(9999 BYTE);
  SQL_DYNMC_WHERE_PART   VARCHAR2(9999 BYTE);
  SQL_DYNMC_SORTING_PART VARCHAR2(9999 BYTE);
  PAG_END_ROW            NUMBER;
  SQL_MAIN_QUERY         VARCHAR2(9999 BYTE);
  V_COUNT_QUERY          VARCHAR2(9999 BYTE);
  STUDY_IDS_STR          VARCHAR2(9999 BYTE);
  SITE_IDS_STR           VARCHAR2(9999 BYTE);
  COUNTRY_IDS_STR        VARCHAR2(9999 BYTE);
  ROLE_IDS_STR           VARCHAR2(9999 BYTE);
  V_ORGID                NUMBER;
  TEMP_SORTBY            VARCHAR2(9999 BYTE);
  TEMP_ORDRBY            VARCHAR2(9999 BYTE);
  V_ROLE_COUNT            NUMBER;
  V_MONITOR_ROLE_COUNT    NUMBER;
  
  
  BEGIN
    
   TEMP_ORDRBY := '';
   V_ROLE_COUNT := 0;
  IF (I_LOGGEDINUSERID       IS NOT NULL AND I_LOGGEDINUSERID > 0) THEN
  SELECT ORGID
  INTO V_ORGID
  FROM TBL_USERPROFILES
  WHERE USERID = I_LOGGEDINUSERID;
  END IF;
    
    
    
  IF I_SORTBY = 'STUDYNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(STUDYNAME))';
    ELSIF I_SORTBY = 'SITENAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(SITENAME))';
    ELSIF I_SORTBY    = 'SITESTAFFLASTNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(SITESTAFFLASTNAME))';
    ELSIF I_SORTBY = 'SITESTAFFFIRSTNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(SITESTAFFFIRSTNAME))';
    ELSIF I_SORTBY = 'PISIPUSERID' THEN
      TEMP_SORTBY := 'UPPER(TRIM(PISIPUSERID))';
    ELSIF I_SORTBY = 'SITESTAFFSIPUSERID' THEN
      TEMP_SORTBY := 'UPPER(TRIM(SITESTAFFSIPUSERID))';
    ELSIF I_SORTBY = 'SITESTAFFROLE' THEN
      TEMP_SORTBY := 'UPPER(TRIM(SITESTAFFROLE))';
    ELSIF I_SORTBY = 'ROLESTARTDATE' THEN
      TEMP_SORTBY := 'ROLESTARTDATE';
    ELSIF I_SORTBY = 'ROLEENDDATE' THEN
      TEMP_SORTBY := 'ROLEENDDATE';
    ELSIF I_SORTBY = 'REQUESTEDSYSTEMNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(REQUESTEDSYSTEMNAME))';
    ELSIF I_SORTBY = 'REQUESTEDACCESSTYPE' THEN
      TEMP_SORTBY := 'UPPER(TRIM(REQUESTEDACCESSTYPE))';
    ELSIF I_SORTBY = 'REQUESTEDDATE' THEN
      TEMP_SORTBY := 'REQUESTEDDATE';
    ELSIF I_SORTBY = 'PRIMARYFACILITYNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(PRIMARYFACILITYNAME))';
    ELSIF I_SORTBY = 'PRIMARYDEPARTMENTNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(PRIMARYDEPARTMENTNAME))';
    ELSIF I_SORTBY = 'FACCOUNTRY' THEN
      TEMP_SORTBY := 'UPPER(TRIM(FACCOUNTRY))';
    ELSIF I_SORTBY = 'PINAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(PINAME))';
    ELSIF I_SORTBY = 'PIID' THEN
      TEMP_SORTBY := 'UPPER(TRIM(PIID))';
    ELSE
     TEMP_SORTBY := 'STUDYNAME,FACCOUNTRY,SITENAME,SITESTAFFROLE,REQUESTEDDATE,REQUESTEDSYSTEMNAME,REQUESTEDACCESSTYPE ';
    END IF;
    
SQL_SELECT_PART := 'SELECT DISTINCT SD.STUDYNAME STUDYNAME,
SD.STUDYID STUDYID,
ST.SITENAME SITENAME,
ST.SITEID SITEID,
PKG_ENCRYPT.FN_DECRYPT (UPSS.LASTNAME) SITESTAFFLASTNAME,
PKG_ENCRYPT.FN_DECRYPT (UPSS.FIRSTNAME) SITESTAFFFIRSTNAME,
UPSS.TRANSCELERATEUSERID SITESTAFFSIPUSERID,
UPSS.USERID SITESTAFFUSERID,
(SELECT ROLENAME FROM TBL_ROLES WHERE ROLEID=UR.ROLEID) SITESTAFFROLE,
UR.EFFECTIVESTARTDATE ROLESTARTDATE,
UR.EFFECTIVEENDDATE ROLEENDDATE,
pkg_encrypt.fn_decrypt(SITECON.EMAIL) SITESTAFFEMAILADDRESS,
pkg_encrypt.fn_decrypt(SITECON.PHONE1) SITESTAFFPHONE,
pkg_encrypt.fn_decrypt(SITECON.FAX) SITESTAFFFAX,
OSACC.SYSTEMNAME REQUESTEDSYSTEMNAME,
OSACC.ACCESSTYPE REQUESTEDACCESSTYPE,
SSACC.REQUESTED_DATE REQUESTEDDATE,
FAC.FACILITYNAME PRIMARYFACILITYNAME,
  CASE
        WHEN FAC.ISDEPARTMENT = ''N''
        THEN RTRIM(PKG_ENCRYPT.FN_DECRYPT (FACCON.ADDRESS1)||'',''||PKG_ENCRYPT.FN_DECRYPT (FACCON.ADDRESS2)||'',''||PKG_ENCRYPT.FN_DECRYPT (FACCON.ADDRESS3),'','')
        ELSE 
        RTRIM(PKG_ENCRYPT.FN_DECRYPT (PRIFACCON.ADDRESS1)||'',''||PKG_ENCRYPT.FN_DECRYPT (PRIFACCON.ADDRESS2)||'',''||PKG_ENCRYPT.FN_DECRYPT (PRIFACCON.ADDRESS3),'','')
      END PFACADDRESS,
  CASE WHEN FAC.ISDEPARTMENT = ''N''
  THEN FAC.FACILITYID 
  ELSE FAC.FACILITYFORDEPT
  END FACILITYID,
  CASE WHEN FAC.ISDEPARTMENT = ''Y''
  THEN FAC.FACILITYID 
  ELSE NULL
  END DEPARTMENTID,
  FAC.DEPARTMENTNAME PRIMARYDEPARTMENTNAME,
  CASE WHEN FAC.ISDEPARTMENT = ''Y''
  THEN RTRIM(PKG_ENCRYPT.FN_DECRYPT (FACCON.ADDRESS1)||'',''||PKG_ENCRYPT.FN_DECRYPT (FACCON.ADDRESS2)||'',''||PKG_ENCRYPT.FN_DECRYPT (FACCON.ADDRESS3),'','')
  ELSE NULL
  END PDEPTADDRESS,
CR.COUNTRYNAME  FACCOUNTRY ,
PKG_ENCRYPT.FN_DECRYPT (UPPI.LASTNAME)||'', '' || PKG_ENCRYPT.FN_DECRYPT (UPPI.FIRSTNAME)||'' '' || PKG_ENCRYPT.FN_DECRYPT (UPPI.MIDDLENAME) PINAME,
PKG_ENCRYPT.FN_DECRYPT (PICON.PHONE1) PIPHONE,
PKG_ENCRYPT.FN_DECRYPT (PICON.EMAIL) PIEMAIL,
ST.PIID PIUSERID,
UPPI.TRANSCELERATEUSERID PISIPUSERID
FROM TBL_STUDY SD 
LEFT JOIN TBL_SITE ST 
ON SD.STUDYID=ST.STUDYID 
LEFT JOIN TBL_USERPROFILES UPPI 
ON ST.PIID=UPPI.USERID 
LEFT JOIN TBL_CONTACT PICON
ON UPPI.CONTACTID=PICON.CONTACTID
JOIN TBL_USERROLEMAP UR 
ON UR.SITEID=ST.SITEID
LEFT JOIN TBL_USERPROFILES UPSS
ON UR.USERID=UPSS.USERID
LEFT JOIN TBL_CONTACT SITECON
ON SITECON.CONTACTID=UPSS.CONTACTID 
JOIN TBL_ORGSITESTAFFMAP ORGSITE
ON ORGSITE.Sitestaffuserid=UPSS.Userid
JOIN TBL_ORGSYSTEMACCESS OSACC
ON OSACC.ORGID=ORGSITE.ORGID
JOIN TBL_SITESYSTEMACCESS SSACC
ON (SSACC.SYSTEMID = OSACC.ORGSYSTEMID
AND SSACC.USERID  =ORGSITE.SITESTAFFUSERID and SSACC.SITEID=ST.SITEID)
JOIN TBL_FACILITIES FAC
ON ST.PRINCIPALFACILITYID = FAC.FACILITYID
LEFT JOIN TBL_FACILITIES PRIFAC
ON FAC.FACILITYFORDEPT = PRIFAC.FACILITYID
LEFT JOIN TBL_CONTACT FACCON
ON FAC.CONTACTID = FACCON.CONTACTID  
LEFT JOIN TBL_CONTACT PRIFACCON
ON PRIFACCON.CONTACTID = PRIFAC.CONTACTID
JOIN TBL_COUNTRIES CR
ON CR.COUNTRYCD=FACCON.COUNTRYCD ';

SQL_SELECT_PART := SQL_SELECT_PART || ' WHERE SD.ORGID = ' || V_ORGID ;

SQL_SELECT_PART := SQL_SELECT_PART || ' AND ST.SITEID IS NOT NULL ' ;
  
  

IF I_STUDYIDS IS NOT NULL AND I_STUDYIDS.count >0 THEN
    FOR i IN 1..I_STUDYIDS.count
    LOOP
      EXIT
    WHEN I_STUDYIDS(i) = -1;
      IF i             = 1 THEN
      STUDY_IDS_STR := I_STUDYIDS(i);
      ELSE
      STUDY_IDS_STR := STUDY_IDS_STR || ',' || I_STUDYIDS(i);
      END IF;
    END LOOP;
    END IF;


IF I_SITEIDS         IS NOT NULL AND I_SITEIDS.count >0 THEN
    FOR i IN 1..I_SITEIDS.count
    LOOP
      EXIT
    WHEN I_SITEIDS(i) = -1;
      IF i             = 1 THEN
      SITE_IDS_STR := I_SITEIDS(i);
      ELSE
      SITE_IDS_STR := SITE_IDS_STR || ',' || I_SITEIDS(i);
      END IF;
    END LOOP;
    END IF;
  
  
IF I_COUNTRYIDS IS NOT NULL AND I_COUNTRYIDS.count >0 THEN
    FOR i IN 1..I_COUNTRYIDS.count
    LOOP
      EXIT
    WHEN I_COUNTRYIDS(i) = -1;
      IF i             = 1 THEN
      COUNTRY_IDS_STR := I_COUNTRYIDS(i);
      ELSE
      COUNTRY_IDS_STR := COUNTRY_IDS_STR || ',' || I_COUNTRYIDS(i);
      END IF;
    END LOOP;
    END IF;
  
  
IF I_ROLEIDS IS NOT NULL AND I_ROLEIDS.count >0 THEN
    FOR i IN 1..I_ROLEIDS.count
    LOOP
      EXIT
    WHEN I_ROLEIDS(i) = -1;
      IF i             = 1 THEN
      ROLE_IDS_STR := I_ROLEIDS(i);
      ELSE
      ROLE_IDS_STR := ROLE_IDS_STR || ',' || I_ROLEIDS(i);
      END IF;
    END LOOP;
    END IF;
  
  
    IF (I_LOGGEDINUSERID       IS NOT NULL AND I_LOGGEDINUSERID > 0) THEN
      SELECT COUNT(*) INTO V_ROLE_COUNT
      FROM TBL_USERROLEMAP usrrole
      LEFT JOIN TBL_ROLES tblroles
      ON usrrole.ROLEID        = tblroles.ROLEID
      WHERE tblroles.ROLETYPEID in (2,3)
      AND usrrole.EFFECTIVESTARTDATE    <= SYSDATE
      AND (usrrole.EFFECTIVEENDDATE >= SYSDATE
      OR usrrole.EFFECTIVEENDDATE   IS NULL) AND usrrole.USERID=I_LOGGEDINUSERID;
    
          IF(V_ROLE_COUNT <= 0) then
       SELECT COUNT(*) INTO V_MONITOR_ROLE_COUNT
      FROM TBL_USERROLEMAP usrrole
      LEFT JOIN TBL_ROLES tblroles
      ON usrrole.ROLEID        = tblroles.ROLEID
      WHERE tblroles.ROLETYPEID =1 and tblroles.ROLEID=2 
      AND usrrole.EFFECTIVESTARTDATE    <= SYSDATE
      AND (usrrole.EFFECTIVEENDDATE >= SYSDATE
      OR usrrole.EFFECTIVEENDDATE   IS NULL) AND usrrole.USERID=I_LOGGEDINUSERID;
          END IF;
    END IF;


SQL_DYNMC_WHERE_PART := '';

  IF (V_ROLE_COUNT >0) THEN  
    IF STUDY_IDS_STR     IS NOT NULL THEN
    SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||
    ' AND SD.STUDYID IN(' || STUDY_IDS_STR || ')';
    ELSE 
    SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||
    ' AND SD.STUDYID IN( select STUDYID from TBL_STUDY where ORGID = ' || V_ORGID ||')';
    END IF;
  ELSE 
    IF STUDY_IDS_STR     IS NOT NULL THEN
    SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||
    ' AND SD.STUDYID IN(' || STUDY_IDS_STR || ')';
    ELSE 
    SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||' AND SD.STUDYID in (SELECT STUDYID FROM TBL_USERROLEMAP WHERE USERID = '|| TO_CHAR(I_LOGGEDINUSERID) || ')';
    END IF;
  END IF;  
    
    IF V_MONITOR_ROLE_COUNT > 0 THEN
      IF SITE_IDS_STR     IS NOT NULL THEN
    SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||
    ' AND ST.SITEID IN(' || SITE_IDS_STR || ') AND ST.SITEID in (SELECT SITEID FROM TBL_USERROLEMAP WHERE USERID = '|| TO_CHAR(I_LOGGEDINUSERID) || ') ';
      ELSE 
        SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||' AND ST.SITEID in (SELECT SITEID FROM TBL_USERROLEMAP WHERE USERID = '|| TO_CHAR(I_LOGGEDINUSERID) || ')';
      END IF;
    ELSE
      IF SITE_IDS_STR     IS NOT NULL THEN
    SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||
    ' AND ST.SITEID IN(' || SITE_IDS_STR || ') ' ;
      END IF;
    END IF;
    
IF ROLE_IDS_STR IS NOT NULL THEN
    SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||' AND UR.ROLEID IN(' || ROLE_IDS_STR || ')';
END IF;

  
IF COUNTRY_IDS_STR IS NOT NULL THEN
    SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||' AND CR.COUNTRYID IN(' || COUNTRY_IDS_STR || ')';
END IF;


IF I_FIRSTNAME         IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND LOWER(pkg_encrypt.fn_decrypt (UPSS.FIRSTNAME)) LIKE LOWER(''%' || I_FIRSTNAME || '%'')';
END IF;
IF I_LASTNAME          IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND LOWER(pkg_encrypt.fn_decrypt (UPSS.LASTNAME)) LIKE LOWER(''%' || I_LASTNAME || '%'')';
END IF;


IF I_ORDRBY IS NOT NULL THEN
    TEMP_ORDRBY := ' ' || I_ORDRBY;
END IF;


SQL_DYNMC_SORTING_PART := SQL_DYNMC_SORTING_PART || ' ORDER BY ' || TEMP_SORTBY || TEMP_ORDRBY ;


SQL_MAIN_QUERY := SQL_SELECT_PART || SQL_DYNMC_WHERE_PART;
V_COUNT_QUERY  := 'select count(1) from ((' || SQL_MAIN_QUERY || '))';


EXECUTE IMMEDIATE V_COUNT_QUERY INTO I_COUNT;
DBMS_OUTPUT.PUT_LINE (V_COUNT_QUERY ) ;

PAG_END_ROW := I_OFFSET + I_LIMIT - 1;


SQL_PAGINATION_PART := 'SELECT * FROM (SELECT ROWNUM RNUM , TEMP.* FROM ((' || SQL_MAIN_QUERY ;

SQL_PAGINATION_PART := SQL_PAGINATION_PART || ')' || SQL_DYNMC_SORTING_PART ||' ) TEMP  WHERE ROWNUM <= ' || TO_CHAR(PAG_END_ROW) ||' ) WHERE RNUM >='|| TO_CHAR(I_OFFSET) ;


OPEN STUDYSITESTAFF FOR SQL_PAGINATION_PART; 
--DBMS_OUTPUT.PUT_LINE (    SQL_PAGINATION_PART ) ;
    
    
  END SP_SS_STAFF_SYSTEM_ACCESS;

  
  
PROCEDURE SP_SS_STAFF_DETAILS (
  I_LOGGEDINUSERID    IN NUMBER,
  I_STUDYIDS          IN NUM_ARRAY,
  I_SITEIDS           IN NUM_ARRAY,
  I_COUNTRYIDS        IN NUM_ARRAY,
  I_LASTNAME          IN VARCHAR2,
  I_FIRSTNAME         IN VARCHAR2,
  I_FACILITYNAME      IN VARCHAR2,
  I_DEPARTMENTNAME    IN VARCHAR2,
  I_FROMDATE          IN DATE,
  I_TODATE            IN DATE,
  I_OFFSET            IN NUMBER,
  I_LIMIT             IN NUMBER,
  I_ORDRBY            IN VARCHAR2,
  I_SORTBY            IN VARCHAR2,
  I_COUNT OUT NUMBER,
  STUDYSITESTAFFDETAILS OUT SYS_REFCURSOR) 
  
  AS
  
  SQL_PAGINATION_PART    VARCHAR2(9999 BYTE);
  SQL_SELECT_PART        VARCHAR2(9999 BYTE);
  SQL_DYNMC_WHERE_PART   VARCHAR2(9999 BYTE);
  SQL_DYNMC_SORTING_PART VARCHAR2(9999 BYTE);
  PAG_END_ROW            NUMBER;
  SQL_MAIN_QUERY         VARCHAR2(9999 BYTE);
  V_COUNT_QUERY          VARCHAR2(9999 BYTE);
  STUDY_IDS_STR          VARCHAR2(9999 BYTE);
  SITE_IDS_STR           VARCHAR2(9999 BYTE);
  COUNTRY_IDS_STR        VARCHAR2(9999 BYTE);
  V_ORGID                NUMBER;
  V_FROMDATE             DATE;
  V_TODATE               DATE;
  TEMP_SORTBY            VARCHAR2(9999 BYTE);
  TEMP_ORDRBY            VARCHAR2(9999 BYTE);
  V_ROLE_COUNT           NUMBER;
  V_MONITOR_ROLE_COUNT   NUMBER;
  
  
  BEGIN
    
TEMP_ORDRBY := '';
   V_ROLE_COUNT := 0;
  IF (I_LOGGEDINUSERID       IS NOT NULL AND I_LOGGEDINUSERID > 0) THEN
  SELECT ORGID
  INTO V_ORGID
  FROM TBL_USERPROFILES
  WHERE USERID = I_LOGGEDINUSERID;
  END IF;
  
  
  IF I_SORTBY = 'STUDYNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(STUDYNAME))';
    ELSIF I_SORTBY = 'SITENAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(SITENAME))';
    ELSIF I_SORTBY = 'SIPUSERID' THEN
      TEMP_SORTBY := 'UPPER(TRIM(SIPUSERID))';
    ELSIF I_SORTBY = 'COUNTRY' THEN
      TEMP_SORTBY := 'UPPER(TRIM(COUNTRY))';
    ELSIF I_SORTBY = 'SITESTAFFNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(SITESTAFFNAME))';
    ELSIF I_SORTBY = 'EMAIL' THEN
      TEMP_SORTBY := 'UPPER(TRIM(EMAIL))';
    ELSIF I_SORTBY = 'PHONE' THEN
      TEMP_SORTBY := 'PHONE';
    ELSIF I_SORTBY = 'ROLENAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(ROLENAME))';
    ELSIF I_SORTBY = 'FACILITYNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(FACILITYNAME))'; 
    ELSIF I_SORTBY = 'DEPARTMENTNAME' THEN
      TEMP_SORTBY := 'UPPER(TRIM(DEPARTMENTNAME))';  
    ELSIF I_SORTBY = 'ROLESTARTDATE' THEN
      TEMP_SORTBY := 'ROLESTARTDATE';
    ELSIF I_SORTBY = 'STUDYACCREMREASON' THEN
      TEMP_SORTBY := 'UPPER(TRIM(STUDYACCREMREASON))';
    ELSIF I_SORTBY = 'ROLEENDDATE' THEN
      TEMP_SORTBY := 'ROLEENDDATE';
  ELSIF I_SORTBY = 'TRANSCELERATEUSERID' THEN
      TEMP_SORTBY := 'TRANSCELERATEUSERID';
      
    ELSE
     TEMP_SORTBY := 'STUDYNAME,COUNTRY,SITENAME,SITESTAFFNAME,ROLENAME,ROLESTARTDATE  ';
    END IF;
    
    
    SQL_SELECT_PART := 'SELECT DISTINCT SD.STUDYNAME STUDYNAME,SD.STUDYID,
ST.SITENAME SITENAME,ST.SITEID,UR.USERROLEID,
PKG_ENCRYPT.FN_DECRYPT (PKG_ENCRYPT.FN_DECRYPT (USRCN.EMAIL)) EMAIL,
PKG_ENCRYPT.FN_DECRYPT (PKG_ENCRYPT.FN_DECRYPT (USRCN.PHONE1)) PHONE,
PKG_ENCRYPT.FN_DECRYPT (URP.LASTNAME)||'', '' || PKG_ENCRYPT.FN_DECRYPT (URP.FIRSTNAME)||'' '' || PKG_ENCRYPT.FN_DECRYPT (URP.MIDDLENAME) SITESTAFFNAME,
CR.COUNTRYNAME COUNTRY,
(SELECT ROLENAME FROM TBL_ROLES WHERE ROLEID=UR.ROLEID) ROLENAME,
FAC.FACILITYNAME FACILITYNAME,
FAC.DEPARTMENTNAME DEPARTMENTNAME,
  UR.EFFECTIVESTARTDATE ROLESTARTDATE,
  UR.EFFECTIVEENDDATE ROLEENDDATE,
JTF.JUSTIFICATIONDESC STUDYACCREMREASON,
URP.TRANSCELERATEUSERID TRANSCELERATEUSERID,URP.USERID

FROM TBL_USERROLEMAP UR 
LEFT JOIN TBL_STUDY SD ON UR.STUDYID = SD.STUDYID
LEFT JOIN TBL_SITE ST ON UR.SITEID = ST.SITEID
LEFT JOIN TBL_USERPROFILES URP ON UR.USERID=URP.USERID
LEFT JOIN TBL_CONTACT USRCN ON URP.CONTACTID=USRCN.CONTACTID
LEFT JOIN TBL_CONTACT SITCON ON ST.CONTACTID=SITCON.CONTACTID
LEFT JOIN TBL_FACILITIES FAC ON ST.PRINCIPALFACILITYID = FAC.FACILITYID
LEFT JOIN TBL_COUNTRIES CR ON CR.COUNTRYCD=SITCON.COUNTRYCD
LEFT JOIN TBL_USERDEACTIVATIONLOG UDL ON (UR.SITEID =UDL.SITEID AND UR.STUDYID=UDL.STUDYID AND UR.USERID =UDL.AFFECTORID AND UR.ROLEID=UDL.ROLEID)
LEFT JOIN TBL_JUSTIFICATION JTF ON UDL.JUSTIFICATIONID=JTF.JUSTIFICATIONID';


SQL_SELECT_PART := SQL_SELECT_PART || ' WHERE SD.ORGID = ' || V_ORGID ;
SQL_SELECT_PART := SQL_SELECT_PART || ' AND ST.SITEID IS NOT NULL ' ;

   
   
   
   
IF I_STUDYIDS IS NOT NULL AND I_STUDYIDS.count >0 THEN
    FOR i IN 1..I_STUDYIDS.count
    LOOP
      EXIT
    WHEN I_STUDYIDS(i) = -1;
      IF i             = 1 THEN
      STUDY_IDS_STR := I_STUDYIDS(i);
      ELSE
      STUDY_IDS_STR := STUDY_IDS_STR || ',' || I_STUDYIDS(i);
      END IF;
    END LOOP;
    END IF;


IF I_SITEIDS IS NOT NULL AND I_SITEIDS.count >0 THEN
    FOR i IN 1..I_SITEIDS.count
    LOOP
      EXIT
    WHEN I_SITEIDS(i) = -1;
      IF i             = 1 THEN
      SITE_IDS_STR := I_SITEIDS(i);
      ELSE
      SITE_IDS_STR := SITE_IDS_STR || ',' || I_SITEIDS(i);
      END IF;
    END LOOP;
    END IF;
  
  
IF I_COUNTRYIDS IS NOT NULL AND I_COUNTRYIDS.count >0 THEN
    FOR i IN 1..I_COUNTRYIDS.count
    LOOP
      EXIT
    WHEN I_COUNTRYIDS(i) = -1;
      IF i             = 1 THEN
      COUNTRY_IDS_STR := I_COUNTRYIDS(i);
      ELSE
      COUNTRY_IDS_STR := COUNTRY_IDS_STR || ',' || I_COUNTRYIDS(i);
      END IF;
    END LOOP;
    END IF;
    
  
  
IF (I_LOGGEDINUSERID       IS NOT NULL AND I_LOGGEDINUSERID > 0) THEN
      SELECT COUNT(*) INTO V_ROLE_COUNT
      FROM TBL_USERROLEMAP usrrole
      LEFT JOIN TBL_ROLES tblroles
      ON usrrole.ROLEID        = tblroles.ROLEID
      WHERE tblroles.ROLETYPEID in (2,3)
      AND usrrole.EFFECTIVESTARTDATE    <= SYSDATE
      AND (usrrole.EFFECTIVEENDDATE >= SYSDATE
      OR usrrole.EFFECTIVEENDDATE   IS NULL) AND usrrole.USERID=I_LOGGEDINUSERID;
    
IF (V_ROLE_COUNT <= 0) then
       SELECT COUNT(*) INTO V_MONITOR_ROLE_COUNT
      FROM TBL_USERROLEMAP usrrole
      LEFT JOIN TBL_ROLES tblroles
      ON usrrole.ROLEID        = tblroles.ROLEID
      WHERE tblroles.ROLETYPEID =1 and tblroles.ROLEID=2 
      AND usrrole.EFFECTIVESTARTDATE    <= SYSDATE
      AND (usrrole.EFFECTIVEENDDATE >= SYSDATE
      OR usrrole.EFFECTIVEENDDATE   IS NULL) AND usrrole.USERID=I_LOGGEDINUSERID;
          END IF;
END IF;
  
  
  
  
    
SQL_DYNMC_WHERE_PART := '';


IF (V_ROLE_COUNT >0) THEN  
    IF STUDY_IDS_STR     IS NOT NULL THEN
         SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||  ' AND SD.STUDYID IN(' || STUDY_IDS_STR || ')';
    
    ELSE 
    
         SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||
         ' AND SD.STUDYID IN( select STUDYID from TBL_STUDY where ORGID = ' || V_ORGID ||')';
    END IF;
  
ELSE 
  
    IF STUDY_IDS_STR     IS NOT NULL THEN
         SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||  ' AND SD.STUDYID IN(' || STUDY_IDS_STR || ')';
    ELSE 
         SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||' AND SD.STUDYID in (SELECT STUDYID FROM TBL_USERROLEMAP WHERE USERID = '|| TO_CHAR(I_LOGGEDINUSERID) || ')';
    END IF;
END IF;  


    
IF V_MONITOR_ROLE_COUNT > 0 THEN
     
      IF SITE_IDS_STR     IS NOT NULL THEN
          SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||
          ' AND ST.SITEID IN(' || SITE_IDS_STR || ') AND ST.SITEID in (SELECT SITEID FROM TBL_USERROLEMAP WHERE USERID = '|| TO_CHAR(I_LOGGEDINUSERID) || ') ';
      ELSE 
           SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||' AND ST.SITEID in (SELECT SITEID FROM TBL_USERROLEMAP WHERE USERID = '|| TO_CHAR(I_LOGGEDINUSERID) || ')';
      
      END IF;

ELSE

      IF SITE_IDS_STR     IS NOT NULL THEN
      
            SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||' AND ST.SITEID IN(' || SITE_IDS_STR || ') ' ;
     
      END IF;
      
      
END IF;


    
    
    
IF COUNTRY_IDS_STR IS NOT NULL THEN
    SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART ||' AND CR.COUNTRYID IN(' || COUNTRY_IDS_STR || ')';
END IF;



IF I_FIRSTNAME  IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND LOWER(pkg_encrypt.fn_decrypt (URP.FIRSTNAME)) LIKE LOWER(''%' || I_FIRSTNAME || '%'')';
END IF;


IF I_LASTNAME IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND LOWER(pkg_encrypt.fn_decrypt (URP.LASTNAME)) LIKE LOWER(''%' || I_LASTNAME || '%'')';
END IF;


IF I_FACILITYNAME  IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND LOWER(FAC.FACILITYNAME) LIKE LOWER(''%' || I_FACILITYNAME || '%'')';
END IF;


IF I_DEPARTMENTNAME  IS NOT NULL THEN
      SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND LOWER(FAC.DEPARTMENTNAME) LIKE LOWER(''%' || I_DEPARTMENTNAME || '%'')';
END IF;



IF I_FROMDATE IS NOT NULL 
  AND 
      I_TODATE IS NULL
  THEN
    V_FROMDATE := TO_DATE(I_FROMDATE,'dd-mon-yy HH24:MI:SS');
    SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND UR.EFFECTIVESTARTDATE >= TO_DATE('''|| V_FROMDATE || ''', ''dd-mon-yy HH24:MI:SS'')' ;
 
END IF;
  
  
  
  
IF I_TODATE IS NOT NULL
  AND
    I_FROMDATE IS NULL
  THEN
    V_TODATE := TO_DATE(I_TODATE,'dd-mon-yy HH24:MI:SS');
    SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND UR.EFFECTIVESTARTDATE <= TO_DATE('''|| V_TODATE || ''', ''dd-mon-yy HH24:MI:SS'')';

END IF;
  
 
 
  
IF I_FROMDATE IS NOT NULL 
    AND 
      I_TODATE IS NOT NULL  
    THEN

V_FROMDATE := TO_DATE(I_FROMDATE,'dd-mon-yy HH24:MI:SS');
V_TODATE := TO_DATE(I_TODATE,'dd-mon-yy HH24:MI:SS');

SQL_DYNMC_WHERE_PART := SQL_DYNMC_WHERE_PART || ' AND UR.EFFECTIVESTARTDATE BETWEEN 
TO_DATE('''|| V_FROMDATE || ''', ''dd-mon-yy HH24:MI:SS'') AND  TO_DATE('''|| V_TODATE || ''', ''dd-mon-yy HH24:MI:SS'')';


END IF;


IF I_SORTBY IS NULL AND I_ORDRBY='ASC' THEN
  
    TEMP_ORDRBY := ' ' || 'DESC';
  ELSE 
    TEMP_ORDRBY := ' ' || I_ORDRBY;
END IF;


SQL_DYNMC_SORTING_PART := SQL_DYNMC_SORTING_PART || ' ORDER BY ' || TEMP_SORTBY || TEMP_ORDRBY ;


SQL_MAIN_QUERY := SQL_SELECT_PART || SQL_DYNMC_WHERE_PART;
V_COUNT_QUERY  := 'select count(1) from ((' || SQL_MAIN_QUERY || '))';



EXECUTE IMMEDIATE V_COUNT_QUERY INTO I_COUNT;

PAG_END_ROW := I_OFFSET + I_LIMIT - 1;


SQL_PAGINATION_PART := 'SELECT * FROM (SELECT ROWNUM RNUM , TEMP.* FROM ((' || SQL_MAIN_QUERY ;

SQL_PAGINATION_PART := SQL_PAGINATION_PART || ')' || SQL_DYNMC_SORTING_PART ||' ) TEMP  WHERE ROWNUM <= ' || TO_CHAR(PAG_END_ROW) ||' ) WHERE RNUM >='|| TO_CHAR(I_OFFSET) ;


OPEN STUDYSITESTAFFDETAILS FOR SQL_PAGINATION_PART; 
DBMS_OUTPUT.PUT_LINE (SQL_PAGINATION_PART) ;
   
   
      
END SP_SS_STAFF_DETAILS;

FUNCTION FN_BLOB_TO_CHAR(IP_BLOB BLOB)
RETURN VARCHAR2 is
  c clob;
  n number;
begin
  if (IP_BLOB is null) then
    return null;
  end if;
  if (length(IP_BLOB)=0) then
    return empty_clob();
  end if;
  dbms_lob.createtemporary(c,true);
  n:=1;
  while (n+32767<=length(IP_BLOB)) loop
    dbms_lob.writeappend(c,32767,utl_raw.cast_to_varchar2(dbms_lob.substr(IP_BLOB,32767,n)));
    n:=n+32767;
  end loop;
  dbms_lob.writeappend(c,length(IP_BLOB)-n+1,utl_raw.cast_to_varchar2(dbms_lob.substr(IP_BLOB,length(IP_BLOB)-n+1,n)));
  return c;
end FN_BLOB_TO_CHAR;

END pkg_reports;
/